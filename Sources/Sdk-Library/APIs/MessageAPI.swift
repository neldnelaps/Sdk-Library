//
// MessageAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MessageAPI {

    /**
     Получает chatBot сообщение.
     
     - parameter chatBotId: (path) Идентификатор. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func messageGetChatBotMessage(chatBotId: Int64, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfChatBotMessageViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return messageGetChatBotMessageWithRequestBuilder(chatBotId: chatBotId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает chatBot сообщение.
     - GET /v1.2/messages/chatBot/{chatBotId}
     - parameter chatBotId: (path) Идентификатор. 
     - returns: RequestBuilder<ResultModelOfChatBotMessageViewModel> 
     */
    open class func messageGetChatBotMessageWithRequestBuilder(chatBotId: Int64) -> RequestBuilder<ResultModelOfChatBotMessageViewModel> {
        var localVariablePath = "/v1.2/messages/chatBot/{chatBotId}"
        let chatBotIdPreEscape = "\(APIHelper.mapValueToPathItem(chatBotId))"
        let chatBotIdPostEscape = chatBotIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{chatBotId}", with: chatBotIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfChatBotMessageViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает список chatbot сообщений.
     
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterPhone: (query)  (optional)
     - parameter filterState: (query)  (optional)
     - parameter filterPersonUid: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func messageGetChatBotMessages(from: Int? = nil, count: Int? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterPhone: String? = nil, filterState: [NotificationMessageState]? = nil, filterPersonUid: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfChatBotMessageViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return messageGetChatBotMessagesWithRequestBuilder(from: from, count: count, filterDateFrom: filterDateFrom, filterDateTo: filterDateTo, filterPhone: filterPhone, filterState: filterState, filterPersonUid: filterPersonUid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает список chatbot сообщений.
     - GET /v1.2/messages/chatBot
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterPhone: (query)  (optional)
     - parameter filterState: (query)  (optional)
     - parameter filterPersonUid: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfChatBotMessageViewModel> 
     */
    open class func messageGetChatBotMessagesWithRequestBuilder(from: Int? = nil, count: Int? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterPhone: String? = nil, filterState: [NotificationMessageState]? = nil, filterPersonUid: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfChatBotMessageViewModel> {
        let localVariablePath = "/v1.2/messages/chatBot"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.dateFrom": filterDateFrom?.encodeToJSON(),
            "filter.dateTo": filterDateTo?.encodeToJSON(),
            "filter.phone": filterPhone?.encodeToJSON(),
            "filter.state": filterState?.encodeToJSON(),
            "filter.personUid": filterPersonUid?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfChatBotMessageViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает информацию о mail сообщении.
     
     - parameter mailId: (path) Идентификатор mail сообщения. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func messageGetMailMessage(mailId: Int64, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfMailMessageViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return messageGetMailMessageWithRequestBuilder(mailId: mailId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает информацию о mail сообщении.
     - GET /v1.2/messages/mail/{mailId}
     - parameter mailId: (path) Идентификатор mail сообщения. 
     - returns: RequestBuilder<ResultModelOfMailMessageViewModel> 
     */
    open class func messageGetMailMessageWithRequestBuilder(mailId: Int64) -> RequestBuilder<ResultModelOfMailMessageViewModel> {
        var localVariablePath = "/v1.2/messages/mail/{mailId}"
        let mailIdPreEscape = "\(APIHelper.mapValueToPathItem(mailId))"
        let mailIdPostEscape = mailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mailId}", with: mailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfMailMessageViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает список отправленных mail сообщений.
     
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterToEmail: (query)  (optional)
     - parameter filterHeader: (query)  (optional)
     - parameter filterState: (query)  (optional)
     - parameter filterPersonUid: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func messageGetMailMessages(from: Int? = nil, count: Int? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterToEmail: String? = nil, filterHeader: String? = nil, filterState: [NotificationMessageState]? = nil, filterPersonUid: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfMailMessageViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return messageGetMailMessagesWithRequestBuilder(from: from, count: count, filterDateFrom: filterDateFrom, filterDateTo: filterDateTo, filterToEmail: filterToEmail, filterHeader: filterHeader, filterState: filterState, filterPersonUid: filterPersonUid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает список отправленных mail сообщений.
     - GET /v1.2/messages/mail
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterToEmail: (query)  (optional)
     - parameter filterHeader: (query)  (optional)
     - parameter filterState: (query)  (optional)
     - parameter filterPersonUid: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfMailMessageViewModel> 
     */
    open class func messageGetMailMessagesWithRequestBuilder(from: Int? = nil, count: Int? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterToEmail: String? = nil, filterHeader: String? = nil, filterState: [NotificationMessageState]? = nil, filterPersonUid: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfMailMessageViewModel> {
        let localVariablePath = "/v1.2/messages/mail"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.dateFrom": filterDateFrom?.encodeToJSON(),
            "filter.dateTo": filterDateTo?.encodeToJSON(),
            "filter.toEmail": filterToEmail?.encodeToJSON(),
            "filter.header": filterHeader?.encodeToJSON(),
            "filter.state": filterState?.encodeToJSON(),
            "filter.personUid": filterPersonUid?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfMailMessageViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает нотификаторы из сообщений.
     
     - parameter messagesNotifiersFilterPersonUid: (query) Гуид пользователя. (optional)
     - parameter messagesNotifiersFilterNotifyType: (query) Тип нотификатора. (optional)
     - parameter messagesNotifiersFilterSubstring: (query) Подстрока для поиска. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func messageGetMessagesNotifiers(messagesNotifiersFilterPersonUid: String? = nil, messagesNotifiersFilterNotifyType: NotifyType? = nil, messagesNotifiersFilterSubstring: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfString?, _ error: Error?) -> Void)) -> RequestTask {
        return messageGetMessagesNotifiersWithRequestBuilder(messagesNotifiersFilterPersonUid: messagesNotifiersFilterPersonUid, messagesNotifiersFilterNotifyType: messagesNotifiersFilterNotifyType, messagesNotifiersFilterSubstring: messagesNotifiersFilterSubstring).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает нотификаторы из сообщений.
     - GET /v1.2/messages/notifiers
     - parameter messagesNotifiersFilterPersonUid: (query) Гуид пользователя. (optional)
     - parameter messagesNotifiersFilterNotifyType: (query) Тип нотификатора. (optional)
     - parameter messagesNotifiersFilterSubstring: (query) Подстрока для поиска. (optional)
     - returns: RequestBuilder<ResultModelOfListOfString> 
     */
    open class func messageGetMessagesNotifiersWithRequestBuilder(messagesNotifiersFilterPersonUid: String? = nil, messagesNotifiersFilterNotifyType: NotifyType? = nil, messagesNotifiersFilterSubstring: String? = nil) -> RequestBuilder<ResultModelOfListOfString> {
        let localVariablePath = "/v1.2/messages/notifiers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "messagesNotifiersFilter.personUid": messagesNotifiersFilterPersonUid?.encodeToJSON(),
            "messagesNotifiersFilter.notifyType": messagesNotifiersFilterNotifyType?.encodeToJSON(),
            "messagesNotifiersFilter.substring": messagesNotifiersFilterSubstring?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает push сообщение.
     
     - parameter pushId: (path) Идентификатор. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func messageGetPushMessage(pushId: Int64, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPushMessageViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return messageGetPushMessageWithRequestBuilder(pushId: pushId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает push сообщение.
     - GET /v1.2/messages/push/{pushId}
     - parameter pushId: (path) Идентификатор. 
     - returns: RequestBuilder<ResultModelOfPushMessageViewModel> 
     */
    open class func messageGetPushMessageWithRequestBuilder(pushId: Int64) -> RequestBuilder<ResultModelOfPushMessageViewModel> {
        var localVariablePath = "/v1.2/messages/push/{pushId}"
        let pushIdPreEscape = "\(APIHelper.mapValueToPathItem(pushId))"
        let pushIdPostEscape = pushIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pushId}", with: pushIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPushMessageViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает список push сообщений.
     
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterPlatformType: (query)  (optional)
     - parameter filterState: (query)  (optional)
     - parameter filterHeader: (query)  (optional)
     - parameter filterPersonUid: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func messageGetPushMessages(from: Int? = nil, count: Int? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterPlatformType: [PlatformType]? = nil, filterState: [NotificationMessageState]? = nil, filterHeader: String? = nil, filterPersonUid: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfPushMessageViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return messageGetPushMessagesWithRequestBuilder(from: from, count: count, filterDateFrom: filterDateFrom, filterDateTo: filterDateTo, filterPlatformType: filterPlatformType, filterState: filterState, filterHeader: filterHeader, filterPersonUid: filterPersonUid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает список push сообщений.
     - GET /v1.2/messages/push
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterPlatformType: (query)  (optional)
     - parameter filterState: (query)  (optional)
     - parameter filterHeader: (query)  (optional)
     - parameter filterPersonUid: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfPushMessageViewModel> 
     */
    open class func messageGetPushMessagesWithRequestBuilder(from: Int? = nil, count: Int? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterPlatformType: [PlatformType]? = nil, filterState: [NotificationMessageState]? = nil, filterHeader: String? = nil, filterPersonUid: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfPushMessageViewModel> {
        let localVariablePath = "/v1.2/messages/push"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.dateFrom": filterDateFrom?.encodeToJSON(),
            "filter.dateTo": filterDateTo?.encodeToJSON(),
            "filter.platformType": filterPlatformType?.encodeToJSON(),
            "filter.state": filterState?.encodeToJSON(),
            "filter.header": filterHeader?.encodeToJSON(),
            "filter.personUid": filterPersonUid?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfPushMessageViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает информацию о sms сообщении.
     
     - parameter smsId: (path) Идентификатор sms сообщения. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func messageGetSmsMessage(smsId: Int64, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfSmsMessageViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return messageGetSmsMessageWithRequestBuilder(smsId: smsId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает информацию о sms сообщении.
     - GET /v1.2/messages/sms/{smsId}
     - parameter smsId: (path) Идентификатор sms сообщения. 
     - returns: RequestBuilder<ResultModelOfSmsMessageViewModel> 
     */
    open class func messageGetSmsMessageWithRequestBuilder(smsId: Int64) -> RequestBuilder<ResultModelOfSmsMessageViewModel> {
        var localVariablePath = "/v1.2/messages/sms/{smsId}"
        let smsIdPreEscape = "\(APIHelper.mapValueToPathItem(smsId))"
        let smsIdPostEscape = smsIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{smsId}", with: smsIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfSmsMessageViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает список отправленных смс сообщений.
     
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterPhone: (query)  (optional)
     - parameter filterPersonUid: (query)  (optional)
     - parameter filterState: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func messageGetSmsMessages(from: Int? = nil, count: Int? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterPhone: String? = nil, filterPersonUid: String? = nil, filterState: [NotificationMessageState]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfSmsMessageViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return messageGetSmsMessagesWithRequestBuilder(from: from, count: count, filterDateFrom: filterDateFrom, filterDateTo: filterDateTo, filterPhone: filterPhone, filterPersonUid: filterPersonUid, filterState: filterState).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает список отправленных смс сообщений.
     - GET /v1.2/messages/sms
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterPhone: (query)  (optional)
     - parameter filterPersonUid: (query)  (optional)
     - parameter filterState: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfSmsMessageViewModel> 
     */
    open class func messageGetSmsMessagesWithRequestBuilder(from: Int? = nil, count: Int? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterPhone: String? = nil, filterPersonUid: String? = nil, filterState: [NotificationMessageState]? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfSmsMessageViewModel> {
        let localVariablePath = "/v1.2/messages/sms"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.dateFrom": filterDateFrom?.encodeToJSON(),
            "filter.dateTo": filterDateTo?.encodeToJSON(),
            "filter.phone": filterPhone?.encodeToJSON(),
            "filter.personUid": filterPersonUid?.encodeToJSON(),
            "filter.state": filterState?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfSmsMessageViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает socialNetwork сообщение.
     
     - parameter socialNetworksId: (path) Идентификатор. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func messageGetSocialNetworksMessage(socialNetworksId: Int64, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfSocialNetworksMessageViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return messageGetSocialNetworksMessageWithRequestBuilder(socialNetworksId: socialNetworksId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает socialNetwork сообщение.
     - GET /v1.2/messages/socialNetworks/{socialNetworksId}
     - parameter socialNetworksId: (path) Идентификатор. 
     - returns: RequestBuilder<ResultModelOfSocialNetworksMessageViewModel> 
     */
    open class func messageGetSocialNetworksMessageWithRequestBuilder(socialNetworksId: Int64) -> RequestBuilder<ResultModelOfSocialNetworksMessageViewModel> {
        var localVariablePath = "/v1.2/messages/socialNetworks/{socialNetworksId}"
        let socialNetworksIdPreEscape = "\(APIHelper.mapValueToPathItem(socialNetworksId))"
        let socialNetworksIdPostEscape = socialNetworksIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{socialNetworksId}", with: socialNetworksIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfSocialNetworksMessageViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает список socialNetworks сообщений.
     
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterPhone: (query)  (optional)
     - parameter filterState: (query)  (optional)
     - parameter filterPersonUid: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func messageGetSocialNetworksMessages(from: Int? = nil, count: Int? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterPhone: String? = nil, filterState: [NotificationMessageState]? = nil, filterPersonUid: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfSocialNetworksMessageViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return messageGetSocialNetworksMessagesWithRequestBuilder(from: from, count: count, filterDateFrom: filterDateFrom, filterDateTo: filterDateTo, filterPhone: filterPhone, filterState: filterState, filterPersonUid: filterPersonUid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает список socialNetworks сообщений.
     - GET /v1.2/messages/socialNetworks
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterPhone: (query)  (optional)
     - parameter filterState: (query)  (optional)
     - parameter filterPersonUid: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfSocialNetworksMessageViewModel> 
     */
    open class func messageGetSocialNetworksMessagesWithRequestBuilder(from: Int? = nil, count: Int? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterPhone: String? = nil, filterState: [NotificationMessageState]? = nil, filterPersonUid: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfSocialNetworksMessageViewModel> {
        let localVariablePath = "/v1.2/messages/socialNetworks"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.dateFrom": filterDateFrom?.encodeToJSON(),
            "filter.dateTo": filterDateTo?.encodeToJSON(),
            "filter.phone": filterPhone?.encodeToJSON(),
            "filter.state": filterState?.encodeToJSON(),
            "filter.personUid": filterPersonUid?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfSocialNetworksMessageViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает viber сообщение.
     
     - parameter viberId: (path) Идентификатор. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func messageGetViberMessage(viberId: Int64, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfViberMessageViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return messageGetViberMessageWithRequestBuilder(viberId: viberId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает viber сообщение.
     - GET /v1.2/messages/viber/{viberId}
     - parameter viberId: (path) Идентификатор. 
     - returns: RequestBuilder<ResultModelOfViberMessageViewModel> 
     */
    open class func messageGetViberMessageWithRequestBuilder(viberId: Int64) -> RequestBuilder<ResultModelOfViberMessageViewModel> {
        var localVariablePath = "/v1.2/messages/viber/{viberId}"
        let viberIdPreEscape = "\(APIHelper.mapValueToPathItem(viberId))"
        let viberIdPostEscape = viberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{viberId}", with: viberIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfViberMessageViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает список viber сообщений.
     
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterPhone: (query)  (optional)
     - parameter filterState: (query)  (optional)
     - parameter filterPersonUid: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func messageGetViberMessages(from: Int? = nil, count: Int? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterPhone: String? = nil, filterState: [NotificationMessageState]? = nil, filterPersonUid: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfViberMessageViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return messageGetViberMessagesWithRequestBuilder(from: from, count: count, filterDateFrom: filterDateFrom, filterDateTo: filterDateTo, filterPhone: filterPhone, filterState: filterState, filterPersonUid: filterPersonUid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает список viber сообщений.
     - GET /v1.2/messages/viber
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterPhone: (query)  (optional)
     - parameter filterState: (query)  (optional)
     - parameter filterPersonUid: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfViberMessageViewModel> 
     */
    open class func messageGetViberMessagesWithRequestBuilder(from: Int? = nil, count: Int? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterPhone: String? = nil, filterState: [NotificationMessageState]? = nil, filterPersonUid: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfViberMessageViewModel> {
        let localVariablePath = "/v1.2/messages/viber"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.dateFrom": filterDateFrom?.encodeToJSON(),
            "filter.dateTo": filterDateTo?.encodeToJSON(),
            "filter.phone": filterPhone?.encodeToJSON(),
            "filter.state": filterState?.encodeToJSON(),
            "filter.personUid": filterPersonUid?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfViberMessageViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
