//
// GoodsGroupAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class GoodsGroupAPI {

    /**
     Получает внешние идентификаторы товаров по идентификатору группы товаров.
     
     - parameter uid: (path) Внешний или внутренний идентификатор группы товаров. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func goodsGroupGetGoodsCodes(uid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return goodsGroupGetGoodsCodesWithRequestBuilder(uid: uid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает внешние идентификаторы товаров по идентификатору группы товаров.
     - GET /v1.2/goodsGroups/{uid}/goodsCodes
     - parameter uid: (path) Внешний или внутренний идентификатор группы товаров. 
     - returns: RequestBuilder<String> 
     */
    open class func goodsGroupGetGoodsCodesWithRequestBuilder(uid: String) -> RequestBuilder<String> {
        var localVariablePath = "/v1.2/goodsGroups/{uid}/goodsCodes"
        let uidPreEscape = "\(APIHelper.mapValueToPathItem(uid))"
        let uidPostEscape = uidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uid}", with: uidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить группу товаров по id.
     
     - parameter id: (path) Id группы товаров. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func goodsGroupGetGoodsGroup(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfGoodsGroupViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return goodsGroupGetGoodsGroupWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить группу товаров по id.
     - GET /v1.2/goodsGroups/{id}
     - parameter id: (path) Id группы товаров. 
     - returns: RequestBuilder<ResultModelOfGoodsGroupViewModel> 
     */
    open class func goodsGroupGetGoodsGroupWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfGoodsGroupViewModel> {
        var localVariablePath = "/v1.2/goodsGroups/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfGoodsGroupViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить группу товаров по внешнему идентификатору.
     
     - parameter externalId: (path) Внешний идентификатор. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func goodsGroupGetGoodsGroupByExternalId(externalId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfGoodsGroupViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return goodsGroupGetGoodsGroupByExternalIdWithRequestBuilder(externalId: externalId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить группу товаров по внешнему идентификатору.
     - GET /v1.2/goodsGroups/{externalId}
     - parameter externalId: (path) Внешний идентификатор. 
     - returns: RequestBuilder<ResultModelOfGoodsGroupViewModel> 
     */
    open class func goodsGroupGetGoodsGroupByExternalIdWithRequestBuilder(externalId: String) -> RequestBuilder<ResultModelOfGoodsGroupViewModel> {
        var localVariablePath = "/v1.2/goodsGroups/{externalId}"
        let externalIdPreEscape = "\(APIHelper.mapValueToPathItem(externalId))"
        let externalIdPostEscape = externalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{externalId}", with: externalIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfGoodsGroupViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить количество товаров в группе товаров.
     
     - parameter id: (path) Id группы товаров. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func goodsGroupGetGoodsGroupGoodsCount(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfInt32?, _ error: Error?) -> Void)) -> RequestTask {
        return goodsGroupGetGoodsGroupGoodsCountWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить количество товаров в группе товаров.
     - GET /v1.2/goodsGroups/{id}/goodsCount
     - Для фиксированной группы товаров - количество зафиксированных товаров, для нефиксированной - текущее количество товаров в наборах.
     - parameter id: (path) Id группы товаров. 
     - returns: RequestBuilder<ResultModelOfInt32> 
     */
    open class func goodsGroupGetGoodsGroupGoodsCountWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfInt32> {
        var localVariablePath = "/v1.2/goodsGroups/{id}/goodsCount"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfInt32>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить полную информацию о группах товаров.
     
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter sortingFilterId: (query) ID фильтра, группы товаров которого будут выбираться первыми. (optional)
     - parameter sortingIds: (query) Список идентификаторов для первоочередного выбора. (optional)
     - parameter properties: (query) Требуемые свойства view-модели. Если не указано ни одного, то будут заданы все. (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterCreatorIds: (query)  (optional)
     - parameter filterPartnerIds: (query)  (optional)
     - parameter filterArchivedShowMode: (query)  (optional)
     - parameter filterName: (query)  (optional)
     - parameter filterDateFromLastChange: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func goodsGroupGetGoodsGroups(from: Int? = nil, count: Int? = nil, sortingFilterId: Int? = nil, sortingIds: [Int]? = nil, properties: [String]? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterCreatorIds: [Int]? = nil, filterPartnerIds: [String]? = nil, filterArchivedShowMode: ArchivedState? = nil, filterName: String? = nil, filterDateFromLastChange: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfGoodsGroupViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return goodsGroupGetGoodsGroupsWithRequestBuilder(from: from, count: count, sortingFilterId: sortingFilterId, sortingIds: sortingIds, properties: properties, filterDateFrom: filterDateFrom, filterDateTo: filterDateTo, filterCreatorIds: filterCreatorIds, filterPartnerIds: filterPartnerIds, filterArchivedShowMode: filterArchivedShowMode, filterName: filterName, filterDateFromLastChange: filterDateFromLastChange).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить полную информацию о группах товаров.
     - GET /v1.2/goodsGroups
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter sortingFilterId: (query) ID фильтра, группы товаров которого будут выбираться первыми. (optional)
     - parameter sortingIds: (query) Список идентификаторов для первоочередного выбора. (optional)
     - parameter properties: (query) Требуемые свойства view-модели. Если не указано ни одного, то будут заданы все. (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterCreatorIds: (query)  (optional)
     - parameter filterPartnerIds: (query)  (optional)
     - parameter filterArchivedShowMode: (query)  (optional)
     - parameter filterName: (query)  (optional)
     - parameter filterDateFromLastChange: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfGoodsGroupViewModel> 
     */
    open class func goodsGroupGetGoodsGroupsWithRequestBuilder(from: Int? = nil, count: Int? = nil, sortingFilterId: Int? = nil, sortingIds: [Int]? = nil, properties: [String]? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterCreatorIds: [Int]? = nil, filterPartnerIds: [String]? = nil, filterArchivedShowMode: ArchivedState? = nil, filterName: String? = nil, filterDateFromLastChange: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfGoodsGroupViewModel> {
        let localVariablePath = "/v1.2/goodsGroups"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "sortingFilterId": sortingFilterId?.encodeToJSON(),
            "sortingIds": sortingIds?.encodeToJSON(),
            "properties": properties?.encodeToJSON(),
            "filter.dateFrom": filterDateFrom?.encodeToJSON(),
            "filter.dateTo": filterDateTo?.encodeToJSON(),
            "filter.creatorIds": filterCreatorIds?.encodeToJSON(),
            "filter.partnerIds": filterPartnerIds?.encodeToJSON(),
            "filter.archivedShowMode": filterArchivedShowMode?.encodeToJSON(),
            "filter.name": filterName?.encodeToJSON(),
            "filter.dateFromLastChange": filterDateFromLastChange?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfGoodsGroupViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Восстановить из архива группу товаров.
     
     - parameter id: (path) Id группы товаров. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func goodsGroupRestoreGoodsGroup(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return goodsGroupRestoreGoodsGroupWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Восстановить из архива группу товаров.
     - POST /v1.2/goodsGroups/{id}/restore
     - parameter id: (path) Id группы товаров. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func goodsGroupRestoreGoodsGroupWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/goodsGroups/{id}/restore"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
