//
// CountryImageAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CountryImageAPI {

    /**
     Получить изображение.
     
     - parameter countryId: (path) Идентификатор страны. 
     - parameter imageId: (path) Идентификатор файла. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func countryImageGetImage(countryId: Int, imageId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfImageFileViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return countryImageGetImageWithRequestBuilder(countryId: countryId, imageId: imageId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить изображение.
     - GET /v1.2/countries/{countryId}/Images/{imageId}
     - parameter countryId: (path) Идентификатор страны. 
     - parameter imageId: (path) Идентификатор файла. 
     - returns: RequestBuilder<ResultModelOfImageFileViewModel> 
     */
    open class func countryImageGetImageWithRequestBuilder(countryId: Int, imageId: Int) -> RequestBuilder<ResultModelOfImageFileViewModel> {
        var localVariablePath = "/v1.2/countries/{countryId}/Images/{imageId}"
        let countryIdPreEscape = "\(APIHelper.mapValueToPathItem(countryId))"
        let countryIdPostEscape = countryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{countryId}", with: countryIdPostEscape, options: .literal, range: nil)
        let imageIdPreEscape = "\(APIHelper.mapValueToPathItem(imageId))"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageId}", with: imageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfImageFileViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить список изображений для страны.
     
     - parameter countryId: (path) Идентификатор страны. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func countryImageGetImages(countryId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfImageFileViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return countryImageGetImagesWithRequestBuilder(countryId: countryId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить список изображений для страны.
     - GET /v1.2/countries/{countryId}/Images
     - parameter countryId: (path) Идентификатор страны. 
     - returns: RequestBuilder<ResultModelOfListOfImageFileViewModel> 
     */
    open class func countryImageGetImagesWithRequestBuilder(countryId: Int) -> RequestBuilder<ResultModelOfListOfImageFileViewModel> {
        var localVariablePath = "/v1.2/countries/{countryId}/Images"
        let countryIdPreEscape = "\(APIHelper.mapValueToPathItem(countryId))"
        let countryIdPostEscape = countryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{countryId}", with: countryIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfImageFileViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
