//
// ApplicationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ApplicationAPI {

    /**
     Получает информацию об OAuth-приложении по его идентификатору.
     
     - parameter id: (path) Внутренний идентификатор OAuth-приложения. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func applicationGet(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfApplicationModel?, _ error: Error?) -> Void)) -> RequestTask {
        return applicationGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает информацию об OAuth-приложении по его идентификатору.
     - GET /v1.2/OAuth/Applications/{id}
     - parameter id: (path) Внутренний идентификатор OAuth-приложения. 
     - returns: RequestBuilder<ResultModelOfApplicationModel> 
     */
    open class func applicationGetWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfApplicationModel> {
        var localVariablePath = "/v1.2/OAuth/Applications/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfApplicationModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает список OAuth-приложений.
     
     - parameter filterFrom: (query) Порядковый номер элемента, с которого должна начинаться выборка. (optional)
     - parameter filterCount: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterMode: (query) Режим выбора архивных объектов. (optional)
     - parameter filterIsOrderedByAscending: (query) Режим прямой сортировки. (optional)
     - parameter filterPartnerIds: (query) Внутренние идентификаторы Партнеров (Id). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func applicationGetFilteredPagedList(filterFrom: Int? = nil, filterCount: Int? = nil, filterMode: ArchivedState? = nil, filterIsOrderedByAscending: Bool? = nil, filterPartnerIds: [Int]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfApplicationModel?, _ error: Error?) -> Void)) -> RequestTask {
        return applicationGetFilteredPagedListWithRequestBuilder(filterFrom: filterFrom, filterCount: filterCount, filterMode: filterMode, filterIsOrderedByAscending: filterIsOrderedByAscending, filterPartnerIds: filterPartnerIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает список OAuth-приложений.
     - GET /v1.2/OAuth/Applications
     - parameter filterFrom: (query) Порядковый номер элемента, с которого должна начинаться выборка. (optional)
     - parameter filterCount: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterMode: (query) Режим выбора архивных объектов. (optional)
     - parameter filterIsOrderedByAscending: (query) Режим прямой сортировки. (optional)
     - parameter filterPartnerIds: (query) Внутренние идентификаторы Партнеров (Id). (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfApplicationModel> 
     */
    open class func applicationGetFilteredPagedListWithRequestBuilder(filterFrom: Int? = nil, filterCount: Int? = nil, filterMode: ArchivedState? = nil, filterIsOrderedByAscending: Bool? = nil, filterPartnerIds: [Int]? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfApplicationModel> {
        let localVariablePath = "/v1.2/OAuth/Applications"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.from": filterFrom?.encodeToJSON(),
            "filter.count": filterCount?.encodeToJSON(),
            "filter.mode": filterMode?.encodeToJSON(),
            "filter.isOrderedByAscending": filterIsOrderedByAscending?.encodeToJSON(),
            "filter.partnerIds": filterPartnerIds?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfApplicationModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает секретный ключ для OAuth-приложения по его идентификатору.
     
     - parameter id: (path) Внутренний идентификатор OAuth-приложения. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func applicationGetSecret(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfString?, _ error: Error?) -> Void)) -> RequestTask {
        return applicationGetSecretWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает секретный ключ для OAuth-приложения по его идентификатору.
     - GET /v1.2/OAuth/Applications/{id}/Secret
     - parameter id: (path) Внутренний идентификатор OAuth-приложения. 
     - returns: RequestBuilder<ResultModelOfString> 
     */
    open class func applicationGetSecretWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfString> {
        var localVariablePath = "/v1.2/OAuth/Applications/{id}/Secret"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Восстанавливает OAuth-приложение.
     
     - parameter id: (path) Внутренний идентификатор OAuth-приложения. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func applicationRestore(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return applicationRestoreWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Восстанавливает OAuth-приложение.
     - POST /v1.2/OAuth/Applications/{id}/Restore
     - parameter id: (path) Внутренний идентификатор OAuth-приложения. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func applicationRestoreWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/OAuth/Applications/{id}/Restore"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
