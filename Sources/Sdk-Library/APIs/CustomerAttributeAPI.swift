//
// CustomerAttributeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CustomerAttributeAPI {

    /**
     Удалить атрибут.
     
     - parameter id: (path) Идентификатор атрибута. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerAttributeDeleteAttribute(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return customerAttributeDeleteAttributeWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Удалить атрибут.
     - DELETE /v1.2/Attributes/{id}/Delete
     - parameter id: (path) Идентификатор атрибута. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func customerAttributeDeleteAttributeWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/Attributes/{id}/Delete"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Выключение истории для атрибута.
     
     - parameter id: (path) Id атрибута. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerAttributeDisableHistoryRecording(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return customerAttributeDisableHistoryRecordingWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Выключение истории для атрибута.
     - POST /v1.2/Attributes/{id}/history/disable
     - parameter id: (path) Id атрибута. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func customerAttributeDisableHistoryRecordingWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/Attributes/{id}/history/disable"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Включение истории для атрибута.
     
     - parameter id: (path) Id атрибута. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerAttributeEnableHistoryRecording(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return customerAttributeEnableHistoryRecordingWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Включение истории для атрибута.
     - POST /v1.2/Attributes/{id}/history/enable
     - parameter id: (path) Id атрибута. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func customerAttributeEnableHistoryRecordingWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/Attributes/{id}/history/enable"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Экспортировать значения атрибутов в csv.
     
     - parameter attributeLogicalName: (query) Логическое имя атрибута. 
     - parameter targetGroupId: (query) Идентификатор целевой аудитории. (optional)
     - parameter fromDate: (query) С какого периода действует значение атрибута. (optional)
     - parameter toDate: (query) По какой период действует значение атрибута. (optional)
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerAttributeExportAttributeValues(attributeLogicalName: String, targetGroupId: Int? = nil, fromDate: String? = nil, toDate: String? = nil, from: Int? = nil, count: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return customerAttributeExportAttributeValuesWithRequestBuilder(attributeLogicalName: attributeLogicalName, targetGroupId: targetGroupId, fromDate: fromDate, toDate: toDate, from: from, count: count).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Экспортировать значения атрибутов в csv.
     - GET /v1.2/Attributes/csv
     - parameter attributeLogicalName: (query) Логическое имя атрибута. 
     - parameter targetGroupId: (query) Идентификатор целевой аудитории. (optional)
     - parameter fromDate: (query) С какого периода действует значение атрибута. (optional)
     - parameter toDate: (query) По какой период действует значение атрибута. (optional)
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - returns: RequestBuilder<String> 
     */
    open class func customerAttributeExportAttributeValuesWithRequestBuilder(attributeLogicalName: String, targetGroupId: Int? = nil, fromDate: String? = nil, toDate: String? = nil, from: Int? = nil, count: Int? = nil) -> RequestBuilder<String> {
        let localVariablePath = "/v1.2/Attributes/csv"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "attributeLogicalName": attributeLogicalName.encodeToJSON(),
            "targetGroupId": targetGroupId?.encodeToJSON(),
            "fromDate": fromDate?.encodeToJSON(),
            "toDate": toDate?.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить атрибут по идентификатору.
     
     - parameter id: (path) Идентификатор. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerAttributeGet(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfBaseUserAttributeViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return customerAttributeGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить атрибут по идентификатору.
     - GET /v1.2/Attributes/{id}
     - parameter id: (path) Идентификатор. 
     - returns: RequestBuilder<ResultModelOfBaseUserAttributeViewModel> 
     */
    open class func customerAttributeGetWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfBaseUserAttributeViewModel> {
        var localVariablePath = "/v1.2/Attributes/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfBaseUserAttributeViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить список всех атрибутов.
     
     - parameter attributesFilterFrom: (query) Начало выборки. (optional)
     - parameter attributesFilterCount: (query) Количество. (optional)
     - parameter attributesFilterPartnerId: (query) Id партнера (для получения списка для акции). (optional)
     - parameter attributesFilterSelectedAttributeId: (query) Id выбранного атрибута (для подгрузки значения в фильтре). (optional)
     - parameter attributesFilterNameSearch: (query) Название атрибута. (optional)
     - parameter attributesFilterLogicalName: (query) Логическое имя. (optional)
     - parameter attributesFilterIsHidden: (query) Видимость атрибута. (optional)
     - parameter attributesFilterIsDeleted: (query) Архивные/Не архивные. (optional)
     - parameter attributesFilterValueType: (query) Тип значения. (optional)
     - parameter attributesFilterAttributeType: (query) Тип атрибута. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerAttributeGetList(attributesFilterFrom: Int? = nil, attributesFilterCount: Int? = nil, attributesFilterPartnerId: Int? = nil, attributesFilterSelectedAttributeId: Int? = nil, attributesFilterNameSearch: String? = nil, attributesFilterLogicalName: String? = nil, attributesFilterIsHidden: Bool? = nil, attributesFilterIsDeleted: Bool? = nil, attributesFilterValueType: [CommonAttributeValueType]? = nil, attributesFilterAttributeType: UserAttributeType? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfBaseUserAttributeViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return customerAttributeGetListWithRequestBuilder(attributesFilterFrom: attributesFilterFrom, attributesFilterCount: attributesFilterCount, attributesFilterPartnerId: attributesFilterPartnerId, attributesFilterSelectedAttributeId: attributesFilterSelectedAttributeId, attributesFilterNameSearch: attributesFilterNameSearch, attributesFilterLogicalName: attributesFilterLogicalName, attributesFilterIsHidden: attributesFilterIsHidden, attributesFilterIsDeleted: attributesFilterIsDeleted, attributesFilterValueType: attributesFilterValueType, attributesFilterAttributeType: attributesFilterAttributeType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить список всех атрибутов.
     - GET /v1.2/Attributes
     - parameter attributesFilterFrom: (query) Начало выборки. (optional)
     - parameter attributesFilterCount: (query) Количество. (optional)
     - parameter attributesFilterPartnerId: (query) Id партнера (для получения списка для акции). (optional)
     - parameter attributesFilterSelectedAttributeId: (query) Id выбранного атрибута (для подгрузки значения в фильтре). (optional)
     - parameter attributesFilterNameSearch: (query) Название атрибута. (optional)
     - parameter attributesFilterLogicalName: (query) Логическое имя. (optional)
     - parameter attributesFilterIsHidden: (query) Видимость атрибута. (optional)
     - parameter attributesFilterIsDeleted: (query) Архивные/Не архивные. (optional)
     - parameter attributesFilterValueType: (query) Тип значения. (optional)
     - parameter attributesFilterAttributeType: (query) Тип атрибута. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfBaseUserAttributeViewModel> 
     */
    open class func customerAttributeGetListWithRequestBuilder(attributesFilterFrom: Int? = nil, attributesFilterCount: Int? = nil, attributesFilterPartnerId: Int? = nil, attributesFilterSelectedAttributeId: Int? = nil, attributesFilterNameSearch: String? = nil, attributesFilterLogicalName: String? = nil, attributesFilterIsHidden: Bool? = nil, attributesFilterIsDeleted: Bool? = nil, attributesFilterValueType: [CommonAttributeValueType]? = nil, attributesFilterAttributeType: UserAttributeType? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfBaseUserAttributeViewModel> {
        let localVariablePath = "/v1.2/Attributes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "attributesFilter.from": attributesFilterFrom?.encodeToJSON(),
            "attributesFilter.count": attributesFilterCount?.encodeToJSON(),
            "attributesFilter.partnerId": attributesFilterPartnerId?.encodeToJSON(),
            "attributesFilter.selectedAttributeId": attributesFilterSelectedAttributeId?.encodeToJSON(),
            "attributesFilter.nameSearch": attributesFilterNameSearch?.encodeToJSON(),
            "attributesFilter.logicalName": attributesFilterLogicalName?.encodeToJSON(),
            "attributesFilter.isHidden": attributesFilterIsHidden?.encodeToJSON(),
            "attributesFilter.isDeleted": attributesFilterIsDeleted?.encodeToJSON(),
            "attributesFilter.valueType": attributesFilterValueType?.encodeToJSON(),
            "attributesFilter.attributeType": attributesFilterAttributeType?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfBaseUserAttributeViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получение количества выбранных товаров.
     
     - parameter id: (path) Id атрибута. 
     - parameter personId: (query) Id пользователя. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerAttributeGetSelectGoodsCount(id: Int, personId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfInt32?, _ error: Error?) -> Void)) -> RequestTask {
        return customerAttributeGetSelectGoodsCountWithRequestBuilder(id: id, personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получение количества выбранных товаров.
     - GET /v1.2/Attributes/{id}/getSelectGoodsCount
     - parameter id: (path) Id атрибута. 
     - parameter personId: (query) Id пользователя. 
     - returns: RequestBuilder<ResultModelOfInt32> 
     */
    open class func customerAttributeGetSelectGoodsCountWithRequestBuilder(id: Int, personId: Int) -> RequestBuilder<ResultModelOfInt32> {
        var localVariablePath = "/v1.2/Attributes/{id}/getSelectGoodsCount"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "personId": personId.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfInt32>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Восстановить атрибут.
     
     - parameter id: (path) Идентификатор атрибута. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerAttributeRestoreAttribute(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return customerAttributeRestoreAttributeWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Восстановить атрибут.
     - POST /v1.2/Attributes/{id}/Restore
     - parameter id: (path) Идентификатор атрибута. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func customerAttributeRestoreAttributeWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/Attributes/{id}/Restore"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Обновление данных атрибута.
     
     - parameter id: (path) Идентификатор атрибута. 
     - parameter data: (query) Данные для обновления. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerAttributeUpdateAttribute(id: Int, data: BaseUserAttributeViewModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return customerAttributeUpdateAttributeWithRequestBuilder(id: id, data: data).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Обновление данных атрибута.
     - POST /v1.2/Attributes/{id}/Update
     - parameter id: (path) Идентификатор атрибута. 
     - parameter data: (query) Данные для обновления. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func customerAttributeUpdateAttributeWithRequestBuilder(id: Int, data: BaseUserAttributeViewModel) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/Attributes/{id}/Update"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "data": data.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
