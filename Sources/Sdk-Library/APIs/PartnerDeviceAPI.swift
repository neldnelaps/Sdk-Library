//
// PartnerDeviceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PartnerDeviceAPI {

    /**
     Возвращает информацию о кассе.
     
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter deviceId: (path) Внутренний идентификатор кассы. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerDeviceGetDevice(partnerId: Int, deviceId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfDeviceViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerDeviceGetDeviceWithRequestBuilder(partnerId: partnerId, deviceId: deviceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о кассе.
     - GET /v1.2/partners/{partnerId}/devices/{deviceId}
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter deviceId: (path) Внутренний идентификатор кассы. 
     - returns: RequestBuilder<ResultModelOfDeviceViewModel> 
     */
    open class func partnerDeviceGetDeviceWithRequestBuilder(partnerId: Int, deviceId: Int) -> RequestBuilder<ResultModelOfDeviceViewModel> {
        var localVariablePath = "/v1.2/partners/{partnerId}/devices/{deviceId}"
        let partnerIdPreEscape = "\(APIHelper.mapValueToPathItem(partnerId))"
        let partnerIdPostEscape = partnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{partnerId}", with: partnerIdPostEscape, options: .literal, range: nil)
        let deviceIdPreEscape = "\(APIHelper.mapValueToPathItem(deviceId))"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfDeviceViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список касс Партнера.
     
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter merchantIds: (query) Список внутренних идентификаторов магазинов. (optional)
     - parameter legalId: (query) Внутренний идентификатор юридического лица. (optional)
     - parameter code: (query) Код. (optional)
     - parameter mode: (query) Признак состояния кассы. (optional)
     - parameter isOrderedByAscending: (query) Режим прямой сортировки (true — да, false — нет). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerDeviceGetPartnerDeviceInfo(partnerId: Int, from: Int? = nil, count: Int? = nil, merchantIds: String? = nil, legalId: Int? = nil, code: String? = nil, mode: ArchivedState? = nil, isOrderedByAscending: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfDeviceBriefViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerDeviceGetPartnerDeviceInfoWithRequestBuilder(partnerId: partnerId, from: from, count: count, merchantIds: merchantIds, legalId: legalId, code: code, mode: mode, isOrderedByAscending: isOrderedByAscending).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список касс Партнера.
     - GET /v1.2/partners/{partnerId}/deviceInfo
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter merchantIds: (query) Список внутренних идентификаторов магазинов. (optional)
     - parameter legalId: (query) Внутренний идентификатор юридического лица. (optional)
     - parameter code: (query) Код. (optional)
     - parameter mode: (query) Признак состояния кассы. (optional)
     - parameter isOrderedByAscending: (query) Режим прямой сортировки (true — да, false — нет). (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfDeviceBriefViewModel> 
     */
    open class func partnerDeviceGetPartnerDeviceInfoWithRequestBuilder(partnerId: Int, from: Int? = nil, count: Int? = nil, merchantIds: String? = nil, legalId: Int? = nil, code: String? = nil, mode: ArchivedState? = nil, isOrderedByAscending: Bool? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfDeviceBriefViewModel> {
        var localVariablePath = "/v1.2/partners/{partnerId}/deviceInfo"
        let partnerIdPreEscape = "\(APIHelper.mapValueToPathItem(partnerId))"
        let partnerIdPostEscape = partnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{partnerId}", with: partnerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "merchantIds": merchantIds?.encodeToJSON(),
            "legalId": legalId?.encodeToJSON(),
            "code": code?.encodeToJSON(),
            "mode": mode?.encodeToJSON(),
            "isOrderedByAscending": isOrderedByAscending?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfDeviceBriefViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список касс для привязки к OAuth-приложениям.
     
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter filterFrom: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter filterCount: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterLogicalId: (query) Логическое имя кассы. (optional)
     - parameter filterOAuthApplicationId: (query) Внутренний идентификатор OAuth-приложения. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerDeviceGetPartnerDeviceInfoForOAuthApplication(partnerId: Int, filterFrom: Int? = nil, filterCount: Int? = nil, filterLogicalId: String? = nil, filterOAuthApplicationId: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfDeviceBriefViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerDeviceGetPartnerDeviceInfoForOAuthApplicationWithRequestBuilder(partnerId: partnerId, filterFrom: filterFrom, filterCount: filterCount, filterLogicalId: filterLogicalId, filterOAuthApplicationId: filterOAuthApplicationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список касс для привязки к OAuth-приложениям.
     - GET /v1.2/partners/{partnerId}/oauth/devices
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter filterFrom: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter filterCount: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterLogicalId: (query) Логическое имя кассы. (optional)
     - parameter filterOAuthApplicationId: (query) Внутренний идентификатор OAuth-приложения. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfDeviceBriefViewModel> 
     */
    open class func partnerDeviceGetPartnerDeviceInfoForOAuthApplicationWithRequestBuilder(partnerId: Int, filterFrom: Int? = nil, filterCount: Int? = nil, filterLogicalId: String? = nil, filterOAuthApplicationId: Int? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfDeviceBriefViewModel> {
        var localVariablePath = "/v1.2/partners/{partnerId}/oauth/devices"
        let partnerIdPreEscape = "\(APIHelper.mapValueToPathItem(partnerId))"
        let partnerIdPostEscape = partnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{partnerId}", with: partnerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.from": filterFrom?.encodeToJSON(),
            "filter.count": filterCount?.encodeToJSON(),
            "filter.logicalId": filterLogicalId?.encodeToJSON(),
            "filter.oAuthApplicationId": filterOAuthApplicationId?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfDeviceBriefViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список касс Партнера с детальной информацией.
     
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter merchantIds: (query) Список внутренних идентификаторов магазинов. (optional)
     - parameter legalId: (query) Внутренний идентификатор юридического лица. (optional)
     - parameter code: (query) Код. (optional)
     - parameter mode: (query) Признак состояния кассы. (optional)
     - parameter isOrderedByAscending: (query) Режим прямой сортировки (true — да, false — нет). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerDeviceGetPartnerDevices(partnerId: Int, from: Int? = nil, count: Int? = nil, merchantIds: String? = nil, legalId: Int? = nil, code: String? = nil, mode: ArchivedState? = nil, isOrderedByAscending: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfDeviceViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerDeviceGetPartnerDevicesWithRequestBuilder(partnerId: partnerId, from: from, count: count, merchantIds: merchantIds, legalId: legalId, code: code, mode: mode, isOrderedByAscending: isOrderedByAscending).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список касс Партнера с детальной информацией.
     - GET /v1.2/partners/{partnerId}/devices
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter merchantIds: (query) Список внутренних идентификаторов магазинов. (optional)
     - parameter legalId: (query) Внутренний идентификатор юридического лица. (optional)
     - parameter code: (query) Код. (optional)
     - parameter mode: (query) Признак состояния кассы. (optional)
     - parameter isOrderedByAscending: (query) Режим прямой сортировки (true — да, false — нет). (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfDeviceViewModel> 
     */
    open class func partnerDeviceGetPartnerDevicesWithRequestBuilder(partnerId: Int, from: Int? = nil, count: Int? = nil, merchantIds: String? = nil, legalId: Int? = nil, code: String? = nil, mode: ArchivedState? = nil, isOrderedByAscending: Bool? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfDeviceViewModel> {
        var localVariablePath = "/v1.2/partners/{partnerId}/devices"
        let partnerIdPreEscape = "\(APIHelper.mapValueToPathItem(partnerId))"
        let partnerIdPostEscape = partnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{partnerId}", with: partnerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "merchantIds": merchantIds?.encodeToJSON(),
            "legalId": legalId?.encodeToJSON(),
            "code": code?.encodeToJSON(),
            "mode": mode?.encodeToJSON(),
            "isOrderedByAscending": isOrderedByAscending?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfDeviceViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список типов кассы.
     
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter count: (query) Количество возвращаемых элементов выборки. 
     - parameter nameSubstr: (query) Подстрока для поиска по названию типа кассы. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerDeviceGetPossibleTypes(partnerId: Int, count: Int, nameSubstr: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfDeviceTypeViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerDeviceGetPossibleTypesWithRequestBuilder(partnerId: partnerId, count: count, nameSubstr: nameSubstr).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список типов кассы.
     - GET /v1.2/partners/{partnerId}/devices/possibleTypes
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter count: (query) Количество возвращаемых элементов выборки. 
     - parameter nameSubstr: (query) Подстрока для поиска по названию типа кассы. (optional)
     - returns: RequestBuilder<ResultModelOfListOfDeviceTypeViewModel> 
     */
    open class func partnerDeviceGetPossibleTypesWithRequestBuilder(partnerId: Int, count: Int, nameSubstr: String? = nil) -> RequestBuilder<ResultModelOfListOfDeviceTypeViewModel> {
        var localVariablePath = "/v1.2/partners/{partnerId}/devices/possibleTypes"
        let partnerIdPreEscape = "\(APIHelper.mapValueToPathItem(partnerId))"
        let partnerIdPostEscape = partnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{partnerId}", with: partnerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count.encodeToJSON(),
            "nameSubstr": nameSubstr?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfDeviceTypeViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Восстанавливает кассу из архива.
     
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter deviceId: (path) Внутренний идентификатор кассы. 
     - parameter changeCode: (query) Необходимость изменения кода кассы (true — да, false — нет). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerDeviceRestore(partnerId: Int, deviceId: Int, changeCode: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerDeviceRestoreWithRequestBuilder(partnerId: partnerId, deviceId: deviceId, changeCode: changeCode).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Восстанавливает кассу из архива.
     - POST /v1.2/partners/{partnerId}/devices/{deviceId}/restore
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter deviceId: (path) Внутренний идентификатор кассы. 
     - parameter changeCode: (query) Необходимость изменения кода кассы (true — да, false — нет). (optional)
     - returns: RequestBuilder<ResultModel> 
     */
    open class func partnerDeviceRestoreWithRequestBuilder(partnerId: Int, deviceId: Int, changeCode: Bool? = nil) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/partners/{partnerId}/devices/{deviceId}/restore"
        let partnerIdPreEscape = "\(APIHelper.mapValueToPathItem(partnerId))"
        let partnerIdPostEscape = partnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{partnerId}", with: partnerIdPostEscape, options: .literal, range: nil)
        let deviceIdPreEscape = "\(APIHelper.mapValueToPathItem(deviceId))"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "changeCode": changeCode?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
