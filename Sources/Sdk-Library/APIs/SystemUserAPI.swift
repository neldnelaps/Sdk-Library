//
// SystemUserAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SystemUserAPI {

    /**
     Добавляет роль пользователю.
     
     - parameter userId: (path) Id пользователя. 
     - parameter roleId: (path) Id роли. 
     - parameter userRole: (query) Модель роли пользователя. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func systemUserAddRoleToUser(userId: Int, roleId: Int, userRole: UserRoleModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return systemUserAddRoleToUserWithRequestBuilder(userId: userId, roleId: roleId, userRole: userRole).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Добавляет роль пользователю.
     - PUT /v1.2/SystemUsers/{userId}/roles/{roleId}
     - parameter userId: (path) Id пользователя. 
     - parameter roleId: (path) Id роли. 
     - parameter userRole: (query) Модель роли пользователя. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func systemUserAddRoleToUserWithRequestBuilder(userId: Int, roleId: Int, userRole: UserRoleModel) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/SystemUsers/{userId}/roles/{roleId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userRole": userRole.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter models: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func systemUserAddUserPermissions(userId: Int, models: [UserPermissionModel], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return systemUserAddUserPermissionsWithRequestBuilder(userId: userId, models: models).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /v1.2/SystemUsers/{userId}/permissions/add
     - parameter userId: (path)  
     - parameter models: (query)  
     - returns: RequestBuilder<ResultModel> 
     */
    open class func systemUserAddUserPermissionsWithRequestBuilder(userId: Int, models: [UserPermissionModel]) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/SystemUsers/{userId}/permissions/add"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "models": models.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Метод для смены пароля текущего пользователя.
     
     - parameter id: (path) Идентфикатор пользователя. 
     - parameter changePasswordModel: (query) Модель смены пароля. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func systemUserChangeUserPassword(id: Int, changePasswordModel: ChangePasswordModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfAuthResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return systemUserChangeUserPasswordWithRequestBuilder(id: id, changePasswordModel: changePasswordModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Метод для смены пароля текущего пользователя.
     - POST /v1.2/SystemUsers/{id}/ChangePassword
     - parameter id: (path) Идентфикатор пользователя. 
     - parameter changePasswordModel: (query) Модель смены пароля. 
     - returns: RequestBuilder<ResultModelOfAuthResultModel> 
     */
    open class func systemUserChangeUserPasswordWithRequestBuilder(id: Int, changePasswordModel: ChangePasswordModel) -> RequestBuilder<ResultModelOfAuthResultModel> {
        var localVariablePath = "/v1.2/SystemUsers/{id}/ChangePassword"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "changePasswordModel": changePasswordModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfAuthResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter permissions: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func systemUserDeleteUserPermissions(userId: Int, permissions: [UserPermissionModel], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return systemUserDeleteUserPermissionsWithRequestBuilder(userId: userId, permissions: permissions).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v1.2/SystemUsers/{userId}/permissions/delete
     - parameter userId: (path)  
     - parameter permissions: (query)  
     - returns: RequestBuilder<ResultModel> 
     */
    open class func systemUserDeleteUserPermissionsWithRequestBuilder(userId: Int, permissions: [UserPermissionModel]) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/SystemUsers/{userId}/permissions/delete"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "permissions": permissions.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить пользователя по ID.
     
     - parameter id: (path) Id пользователя. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func systemUserGetUser(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfSystemUserWithPermissionsViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return systemUserGetUserWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить пользователя по ID.
     - GET /v1.2/SystemUsers/{id}
     - parameter id: (path) Id пользователя. 
     - returns: RequestBuilder<ResultModelOfSystemUserWithPermissionsViewModel> 
     */
    open class func systemUserGetUserWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfSystemUserWithPermissionsViewModel> {
        var localVariablePath = "/v1.2/SystemUsers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfSystemUserWithPermissionsViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Список всех пользователей.
     
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter identifierText: (query) Текст идентификатора. (optional)
     - parameter searchSubstring: (query) Строка поиска. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func systemUserGetUsers(from: Int? = nil, count: Int? = nil, identifierText: String? = nil, searchSubstring: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfSystemUserWithPermissionsViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return systemUserGetUsersWithRequestBuilder(from: from, count: count, identifierText: identifierText, searchSubstring: searchSubstring).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Список всех пользователей.
     - GET /v1.2/SystemUsers
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter identifierText: (query) Текст идентификатора. (optional)
     - parameter searchSubstring: (query) Строка поиска. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfSystemUserWithPermissionsViewModel> 
     */
    open class func systemUserGetUsersWithRequestBuilder(from: Int? = nil, count: Int? = nil, identifierText: String? = nil, searchSubstring: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfSystemUserWithPermissionsViewModel> {
        let localVariablePath = "/v1.2/SystemUsers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "identifierText": identifierText?.encodeToJSON(),
            "searchSubstring": searchSubstring?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfSystemUserWithPermissionsViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Восстановление пользователя.
     
     - parameter id: (path) Id пользователя. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func systemUserRecoverUser(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return systemUserRecoverUserWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Восстановление пользователя.
     - POST /v1.2/SystemUsers/{id}/recover
     - parameter id: (path) Id пользователя. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func systemUserRecoverUserWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/SystemUsers/{id}/recover"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter models: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func systemUserUpdateUserPermissions(userId: Int, models: [UserPermissionModel], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return systemUserUpdateUserPermissionsWithRequestBuilder(userId: userId, models: models).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1.2/SystemUsers/{userId}/permissions/update
     - parameter userId: (path)  
     - parameter models: (query)  
     - returns: RequestBuilder<ResultModel> 
     */
    open class func systemUserUpdateUserPermissionsWithRequestBuilder(userId: Int, models: [UserPermissionModel]) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/SystemUsers/{userId}/permissions/update"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "models": models.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
