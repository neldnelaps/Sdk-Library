//
// OffersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OffersAPI {

    /**
     Применить изменения акции.
     
     - parameter acceptOfferChangesModel: (query) Модель применения изменений для акции. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersAcceptOfferChanges(acceptOfferChangesModel: AcceptOfferChangesModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersAcceptOfferChangesWithRequestBuilder(acceptOfferChangesModel: acceptOfferChangesModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Применить изменения акции.
     - POST /v1.2/offers/AcceptChanges
     - parameter acceptOfferChangesModel: (query) Модель применения изменений для акции. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func offersAcceptOfferChangesWithRequestBuilder(acceptOfferChangesModel: AcceptOfferChangesModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/offers/AcceptChanges"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "acceptOfferChangesModel": acceptOfferChangesModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Удаляет акцию.
     
     - parameter offerModel: (query) Модель акции. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersDeleteOffer(offerModel: EditOfferModelBase, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersDeleteOfferWithRequestBuilder(offerModel: offerModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Удаляет акцию.
     - POST /v1.2/offers/DeleteOffer
     - parameter offerModel: (query) Модель акции. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func offersDeleteOfferWithRequestBuilder(offerModel: EditOfferModelBase) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/offers/DeleteOffer"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offerModel": offerModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Редактирует акцию.
     
     - parameter offerModel: (query) Модель редактирования акции. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersEditOffer(offerModel: EditOfferModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfInt32?, _ error: Error?) -> Void)) -> RequestTask {
        return offersEditOfferWithRequestBuilder(offerModel: offerModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Редактирует акцию.
     - POST /v1.2/offers/EditOffer
     - parameter offerModel: (query) Модель редактирования акции. 
     - returns: RequestBuilder<ResultModelOfInt32> 
     */
    open class func offersEditOfferWithRequestBuilder(offerModel: EditOfferModel) -> RequestBuilder<ResultModelOfInt32> {
        let localVariablePath = "/v1.2/offers/EditOffer"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offerModel": offerModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfInt32>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список пользователей, имеющих право создавать акции.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersGetAvailableCreators(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfCreatorModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersGetAvailableCreatorsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список пользователей, имеющих право создавать акции.
     - GET /v1.2/offers/AvailableCreators
     - returns: RequestBuilder<ResultModelOfListOfCreatorModel> 
     */
    open class func offersGetAvailableCreatorsWithRequestBuilder() -> RequestBuilder<ResultModelOfListOfCreatorModel> {
        let localVariablePath = "/v1.2/offers/AvailableCreators"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfCreatorModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список Партнеров.
     
     - parameter viewMode: (query) Доступный режим работы с акциями. 
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter name: (query) Подстрока для поиска по названию. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersGetAvailablePartners(viewMode: OfferViewMode, from: Int? = nil, count: Int? = nil, name: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfPartnerModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersGetAvailablePartnersWithRequestBuilder(viewMode: viewMode, from: from, count: count, name: name).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список Партнеров.
     - GET /v1.2/offers/AvailablePartners
     - parameter viewMode: (query) Доступный режим работы с акциями. 
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter name: (query) Подстрока для поиска по названию. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfPartnerModel> 
     */
    open class func offersGetAvailablePartnersWithRequestBuilder(viewMode: OfferViewMode, from: Int? = nil, count: Int? = nil, name: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfPartnerModel> {
        let localVariablePath = "/v1.2/offers/AvailablePartners"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "viewMode": viewMode.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "name": name?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfPartnerModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию об акции (по идентификатору версии).
     
     - parameter offerId: (path) Внутренний идентификатор акции. 
     - parameter offerVersion: (path) Идентификатор версии акции. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersGetOffer(offerId: Int, offerVersion: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfCommunicationOfferInfoModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersGetOfferWithRequestBuilder(offerId: offerId, offerVersion: offerVersion).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию об акции (по идентификатору версии).
     - GET /v1.2/offers/{offerId}/versions/{offerVersion}
     - parameter offerId: (path) Внутренний идентификатор акции. 
     - parameter offerVersion: (path) Идентификатор версии акции. 
     - returns: RequestBuilder<ResultModelOfCommunicationOfferInfoModel> 
     */
    open class func offersGetOfferWithRequestBuilder(offerId: Int, offerVersion: String) -> RequestBuilder<ResultModelOfCommunicationOfferInfoModel> {
        var localVariablePath = "/v1.2/offers/{offerId}/versions/{offerVersion}"
        let offerIdPreEscape = "\(APIHelper.mapValueToPathItem(offerId))"
        let offerIdPostEscape = offerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerId}", with: offerIdPostEscape, options: .literal, range: nil)
        let offerVersionPreEscape = "\(APIHelper.mapValueToPathItem(offerVersion))"
        let offerVersionPostEscape = offerVersionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerVersion}", with: offerVersionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfCommunicationOfferInfoModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию об акции.
     
     - parameter offerId: (query) Внутренний идентификатор акции. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersGetOfferInfo(offerId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfOfferBriefModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersGetOfferInfoWithRequestBuilder(offerId: offerId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию об акции.
     - GET /v1.2/offers/OfferInfo
     - parameter offerId: (query) Внутренний идентификатор акции. 
     - returns: RequestBuilder<ResultModelOfOfferBriefModel> 
     */
    open class func offersGetOfferInfoWithRequestBuilder(offerId: Int) -> RequestBuilder<ResultModelOfOfferBriefModel> {
        let localVariablePath = "/v1.2/offers/OfferInfo"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offerId": offerId.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfOfferBriefModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список Партнеров, для которых доступна акция.
     
     - parameter offerId: (query) Внутренний идентификатор акции. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersGetOfferPartners(offerId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfPartnerModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersGetOfferPartnersWithRequestBuilder(offerId: offerId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список Партнеров, для которых доступна акция.
     - GET /v1.2/offers/OfferPartners
     - parameter offerId: (query) Внутренний идентификатор акции. 
     - returns: RequestBuilder<ResultModelOfListOfPartnerModel> 
     */
    open class func offersGetOfferPartnersWithRequestBuilder(offerId: Int) -> RequestBuilder<ResultModelOfListOfPartnerModel> {
        let localVariablePath = "/v1.2/offers/OfferPartners"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offerId": offerId.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfPartnerModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает вермя действия акции.
     
     - parameter offerId: (path) Идентификатор акции. 
     - parameter offerVersion: (path) Дескриптор версии акции. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersGetOfferPeriod(offerId: Int, offerVersion: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfOfferPeriodModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersGetOfferPeriodWithRequestBuilder(offerId: offerId, offerVersion: offerVersion).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает вермя действия акции.
     - GET /v1.2/offers/{offerId}/versions/{offerVersion}/period
     - parameter offerId: (path) Идентификатор акции. 
     - parameter offerVersion: (path) Дескриптор версии акции. 
     - returns: RequestBuilder<ResultModelOfOfferPeriodModel> 
     */
    open class func offersGetOfferPeriodWithRequestBuilder(offerId: Int, offerVersion: String) -> RequestBuilder<ResultModelOfOfferPeriodModel> {
        var localVariablePath = "/v1.2/offers/{offerId}/versions/{offerVersion}/period"
        let offerIdPreEscape = "\(APIHelper.mapValueToPathItem(offerId))"
        let offerIdPostEscape = offerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerId}", with: offerIdPostEscape, options: .literal, range: nil)
        let offerVersionPreEscape = "\(APIHelper.mapValueToPathItem(offerVersion))"
        let offerVersionPostEscape = offerVersionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerVersion}", with: offerVersionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfOfferPeriodModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить приоритет акции.
     
     - parameter offerId: (path) Идентификатор акции. 
     - parameter offerVersion: (path) Дескриптор версии акции. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersGetOfferPriority(offerId: Int, offerVersion: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfInt32?, _ error: Error?) -> Void)) -> RequestTask {
        return offersGetOfferPriorityWithRequestBuilder(offerId: offerId, offerVersion: offerVersion).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить приоритет акции.
     - GET /v1.2/offers/{offerId}/versions/{offerVersion}/priority
     - parameter offerId: (path) Идентификатор акции. 
     - parameter offerVersion: (path) Дескриптор версии акции. 
     - returns: RequestBuilder<ResultModelOfInt32> 
     */
    open class func offersGetOfferPriorityWithRequestBuilder(offerId: Int, offerVersion: String) -> RequestBuilder<ResultModelOfInt32> {
        var localVariablePath = "/v1.2/offers/{offerId}/versions/{offerVersion}/priority"
        let offerIdPreEscape = "\(APIHelper.mapValueToPathItem(offerId))"
        let offerIdPostEscape = offerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerId}", with: offerIdPostEscape, options: .literal, range: nil)
        let offerVersionPreEscape = "\(APIHelper.mapValueToPathItem(offerVersion))"
        let offerVersionPostEscape = offerVersionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerVersion}", with: offerVersionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfInt32>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список правил акции.
     
     - parameter offerId: (query) Внутренний идентификатор акции. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersGetOfferRules(offerId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfOfferRuleModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersGetOfferRulesWithRequestBuilder(offerId: offerId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список правил акции.
     - GET /v1.2/offers/OfferRules
     - parameter offerId: (query) Внутренний идентификатор акции. 
     - returns: RequestBuilder<ResultModelOfListOfOfferRuleModel> 
     */
    open class func offersGetOfferRulesWithRequestBuilder(offerId: Int) -> RequestBuilder<ResultModelOfListOfOfferRuleModel> {
        let localVariablePath = "/v1.2/offers/OfferRules"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offerId": offerId.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfOfferRuleModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список акций.
     
     - parameter fromDate: (query) Начальная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter toDate: (query) Конечная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter name: (query) Подстрока для поиска по названию акции. (optional)
     - parameter merchantIds: (query) Внутренние идентификаторы торговых точек через запятую, для которых созданы акции. (optional)
     - parameter creatorIds: (query) Внутренние идентификаторы пользователей через запятую, создавших акции. (optional)
     - parameter viewStates: (query) Состояния акций по времени действия (Future — будущие, Present — действуют, Past — прошедшие). (optional)
     - parameter sortColumn: (query) Тип сортировки акций в списке (Priority — по приоритету, Name — по названию, BeginTime — по времени начала, EndTime — по времени завершения, State — по статусу, AttachDate — по дате прикрепления к маркетинговой кампании, CreationDate — по дате создания, Changedate — по дате редактирования. (optional)
     - parameter direction: (query) Направление сортировки (true - по возрастанию, false - по убыванию). (optional)
     - parameter states: (query) Состояние акции (Run — запущена, Stop — остановлена, Archived — в архиве). (optional)
     - parameter partnerIds: (query) Внутренние идентификаторы Партнеров через запятую, для которых созданы акции. (optional)
     - parameter categoryIds: (query) Внутренние идентификаторы категорий акций через запятую. (optional)
     - parameter priorityLowerBound: (query) Нижняя граница приоритета акций. (optional)
     - parameter priorityUpperBound: (query) Верхняя граница приоритета акций. (optional)
     - parameter marketingCampaignId: (query) Внутренний идентификатор маркетинговой кампании, в рамках которой созданы акции. (optional)
     - parameter includeMarketingCampaignId: (query) Признак включения в список акций, входящих в указанную маркетинговую кампанию (true — включать, false — исключать). (optional)
     - parameter loyaltyProgramIds: (query) Внутренние идентификаторы Программ лояльности через запятую. (optional)
     - parameter excludeMarketingCampaign: (query) Признак исключения из списка всех акций, входящих в какую-либо маркетинговую кампанию (true — исключить, false — не исключать). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersGetOffers(fromDate: String? = nil, toDate: String? = nil, from: Int? = nil, count: Int? = nil, name: String? = nil, merchantIds: String? = nil, creatorIds: String? = nil, viewStates: [OfferViewState]? = nil, sortColumn: OfferSortColumn? = nil, direction: Bool? = nil, states: [OfferState]? = nil, partnerIds: String? = nil, categoryIds: String? = nil, priorityLowerBound: Int? = nil, priorityUpperBound: Int? = nil, marketingCampaignId: Int? = nil, includeMarketingCampaignId: Bool? = nil, loyaltyProgramIds: String? = nil, excludeMarketingCampaign: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfOffersBriefModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersGetOffersWithRequestBuilder(fromDate: fromDate, toDate: toDate, from: from, count: count, name: name, merchantIds: merchantIds, creatorIds: creatorIds, viewStates: viewStates, sortColumn: sortColumn, direction: direction, states: states, partnerIds: partnerIds, categoryIds: categoryIds, priorityLowerBound: priorityLowerBound, priorityUpperBound: priorityUpperBound, marketingCampaignId: marketingCampaignId, includeMarketingCampaignId: includeMarketingCampaignId, loyaltyProgramIds: loyaltyProgramIds, excludeMarketingCampaign: excludeMarketingCampaign).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список акций.
     - GET /v1.2/offers
     - parameter fromDate: (query) Начальная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter toDate: (query) Конечная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter name: (query) Подстрока для поиска по названию акции. (optional)
     - parameter merchantIds: (query) Внутренние идентификаторы торговых точек через запятую, для которых созданы акции. (optional)
     - parameter creatorIds: (query) Внутренние идентификаторы пользователей через запятую, создавших акции. (optional)
     - parameter viewStates: (query) Состояния акций по времени действия (Future — будущие, Present — действуют, Past — прошедшие). (optional)
     - parameter sortColumn: (query) Тип сортировки акций в списке (Priority — по приоритету, Name — по названию, BeginTime — по времени начала, EndTime — по времени завершения, State — по статусу, AttachDate — по дате прикрепления к маркетинговой кампании, CreationDate — по дате создания, Changedate — по дате редактирования. (optional)
     - parameter direction: (query) Направление сортировки (true - по возрастанию, false - по убыванию). (optional)
     - parameter states: (query) Состояние акции (Run — запущена, Stop — остановлена, Archived — в архиве). (optional)
     - parameter partnerIds: (query) Внутренние идентификаторы Партнеров через запятую, для которых созданы акции. (optional)
     - parameter categoryIds: (query) Внутренние идентификаторы категорий акций через запятую. (optional)
     - parameter priorityLowerBound: (query) Нижняя граница приоритета акций. (optional)
     - parameter priorityUpperBound: (query) Верхняя граница приоритета акций. (optional)
     - parameter marketingCampaignId: (query) Внутренний идентификатор маркетинговой кампании, в рамках которой созданы акции. (optional)
     - parameter includeMarketingCampaignId: (query) Признак включения в список акций, входящих в указанную маркетинговую кампанию (true — включать, false — исключать). (optional)
     - parameter loyaltyProgramIds: (query) Внутренние идентификаторы Программ лояльности через запятую. (optional)
     - parameter excludeMarketingCampaign: (query) Признак исключения из списка всех акций, входящих в какую-либо маркетинговую кампанию (true — исключить, false — не исключать). (optional)
     - returns: RequestBuilder<ResultModelOfOffersBriefModel> 
     */
    open class func offersGetOffersWithRequestBuilder(fromDate: String? = nil, toDate: String? = nil, from: Int? = nil, count: Int? = nil, name: String? = nil, merchantIds: String? = nil, creatorIds: String? = nil, viewStates: [OfferViewState]? = nil, sortColumn: OfferSortColumn? = nil, direction: Bool? = nil, states: [OfferState]? = nil, partnerIds: String? = nil, categoryIds: String? = nil, priorityLowerBound: Int? = nil, priorityUpperBound: Int? = nil, marketingCampaignId: Int? = nil, includeMarketingCampaignId: Bool? = nil, loyaltyProgramIds: String? = nil, excludeMarketingCampaign: Bool? = nil) -> RequestBuilder<ResultModelOfOffersBriefModel> {
        let localVariablePath = "/v1.2/offers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fromDate": fromDate?.encodeToJSON(),
            "toDate": toDate?.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "merchantIds": merchantIds?.encodeToJSON(),
            "creatorIds": creatorIds?.encodeToJSON(),
            "viewStates": viewStates?.encodeToJSON(),
            "sortColumn": sortColumn?.encodeToJSON(),
            "direction": direction?.encodeToJSON(),
            "states": states?.encodeToJSON(),
            "partnerIds": partnerIds?.encodeToJSON(),
            "categoryIds": categoryIds?.encodeToJSON(),
            "priority.lowerBound": priorityLowerBound?.encodeToJSON(),
            "priority.upperBound": priorityUpperBound?.encodeToJSON(),
            "marketingCampaignId": marketingCampaignId?.encodeToJSON(),
            "includeMarketingCampaignId": includeMarketingCampaignId?.encodeToJSON(),
            "loyaltyProgramIds": loyaltyProgramIds?.encodeToJSON(),
            "excludeMarketingCampaign": excludeMarketingCampaign?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfOffersBriefModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает количество акций и правил.
     
     - parameter fromDate: (query) Начальная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter toDate: (query) Конечная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter name: (query) Подстрока для поиска по названию акции. (optional)
     - parameter merchantIds: (query) Внутренние идентификаторы торговых точек через запятую, для которых созданы акции. (optional)
     - parameter creatorIds: (query) Внутренние идентификаторы пользователей через запятую, создавших акции. (optional)
     - parameter viewStates: (query) Состояния акций по времени действия (Future — будущие, Present — действуют, Past — прошедшие). (optional)
     - parameter sortColumn: (query) Тип сортировки акций в списке (Priority — по приоритету, Name — по названию, BeginTime — по времени начала, EndTime — по времени завершения, State — по статусу, AttachDate — по дате прикрепления к маркетинговой кампании, CreationDate — по дате создания, Changedate — по дате редактирования. (optional)
     - parameter direction: (query) Направление сортировки (true - по возрастанию, false - по убыванию). (optional)
     - parameter states: (query) Состояние акции (Run — запущена, Stop — остановлена, Archived — в архиве). (optional)
     - parameter partnerIds: (query) Внутренние идентификаторы Партнеров через запятую, для которых созданы акции. (optional)
     - parameter categoryIds: (query) Внутренние идентификаторы категорий акций через запятую. (optional)
     - parameter priorityLowerBound: (query) Нижняя граница приоритета акций. (optional)
     - parameter priorityUpperBound: (query) Верхняя граница приоритета акций. (optional)
     - parameter marketingCampaignId: (query) Внутренний идентификатор маркетинговой кампании, в рамках которой созданы акции. (optional)
     - parameter includeMarketingCampaignId: (query) Признак включения в список акций, входящих в указанную маркетинговую кампанию (true — включать, false — исключать). (optional)
     - parameter loyaltyProgramIds: (query) Внутренние идентификаторы Программ лояльности через запятую. (optional)
     - parameter excludeMarketingCampaign: (query) Признак исключения из списка всех акций, входящих в какую-либо маркетинговую кампанию (true — исключить, false — не исключать). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersGetOffersCount(fromDate: String? = nil, toDate: String? = nil, from: Int? = nil, count: Int? = nil, name: String? = nil, merchantIds: String? = nil, creatorIds: String? = nil, viewStates: [OfferViewState]? = nil, sortColumn: OfferSortColumn? = nil, direction: Bool? = nil, states: [OfferState]? = nil, partnerIds: String? = nil, categoryIds: String? = nil, priorityLowerBound: Int? = nil, priorityUpperBound: Int? = nil, marketingCampaignId: Int? = nil, includeMarketingCampaignId: Bool? = nil, loyaltyProgramIds: String? = nil, excludeMarketingCampaign: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfOffersCountModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersGetOffersCountWithRequestBuilder(fromDate: fromDate, toDate: toDate, from: from, count: count, name: name, merchantIds: merchantIds, creatorIds: creatorIds, viewStates: viewStates, sortColumn: sortColumn, direction: direction, states: states, partnerIds: partnerIds, categoryIds: categoryIds, priorityLowerBound: priorityLowerBound, priorityUpperBound: priorityUpperBound, marketingCampaignId: marketingCampaignId, includeMarketingCampaignId: includeMarketingCampaignId, loyaltyProgramIds: loyaltyProgramIds, excludeMarketingCampaign: excludeMarketingCampaign).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает количество акций и правил.
     - GET /v1.2/offers/count
     - parameter fromDate: (query) Начальная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter toDate: (query) Конечная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter name: (query) Подстрока для поиска по названию акции. (optional)
     - parameter merchantIds: (query) Внутренние идентификаторы торговых точек через запятую, для которых созданы акции. (optional)
     - parameter creatorIds: (query) Внутренние идентификаторы пользователей через запятую, создавших акции. (optional)
     - parameter viewStates: (query) Состояния акций по времени действия (Future — будущие, Present — действуют, Past — прошедшие). (optional)
     - parameter sortColumn: (query) Тип сортировки акций в списке (Priority — по приоритету, Name — по названию, BeginTime — по времени начала, EndTime — по времени завершения, State — по статусу, AttachDate — по дате прикрепления к маркетинговой кампании, CreationDate — по дате создания, Changedate — по дате редактирования. (optional)
     - parameter direction: (query) Направление сортировки (true - по возрастанию, false - по убыванию). (optional)
     - parameter states: (query) Состояние акции (Run — запущена, Stop — остановлена, Archived — в архиве). (optional)
     - parameter partnerIds: (query) Внутренние идентификаторы Партнеров через запятую, для которых созданы акции. (optional)
     - parameter categoryIds: (query) Внутренние идентификаторы категорий акций через запятую. (optional)
     - parameter priorityLowerBound: (query) Нижняя граница приоритета акций. (optional)
     - parameter priorityUpperBound: (query) Верхняя граница приоритета акций. (optional)
     - parameter marketingCampaignId: (query) Внутренний идентификатор маркетинговой кампании, в рамках которой созданы акции. (optional)
     - parameter includeMarketingCampaignId: (query) Признак включения в список акций, входящих в указанную маркетинговую кампанию (true — включать, false — исключать). (optional)
     - parameter loyaltyProgramIds: (query) Внутренние идентификаторы Программ лояльности через запятую. (optional)
     - parameter excludeMarketingCampaign: (query) Признак исключения из списка всех акций, входящих в какую-либо маркетинговую кампанию (true — исключить, false — не исключать). (optional)
     - returns: RequestBuilder<ResultModelOfOffersCountModel> 
     */
    open class func offersGetOffersCountWithRequestBuilder(fromDate: String? = nil, toDate: String? = nil, from: Int? = nil, count: Int? = nil, name: String? = nil, merchantIds: String? = nil, creatorIds: String? = nil, viewStates: [OfferViewState]? = nil, sortColumn: OfferSortColumn? = nil, direction: Bool? = nil, states: [OfferState]? = nil, partnerIds: String? = nil, categoryIds: String? = nil, priorityLowerBound: Int? = nil, priorityUpperBound: Int? = nil, marketingCampaignId: Int? = nil, includeMarketingCampaignId: Bool? = nil, loyaltyProgramIds: String? = nil, excludeMarketingCampaign: Bool? = nil) -> RequestBuilder<ResultModelOfOffersCountModel> {
        let localVariablePath = "/v1.2/offers/count"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fromDate": fromDate?.encodeToJSON(),
            "toDate": toDate?.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "merchantIds": merchantIds?.encodeToJSON(),
            "creatorIds": creatorIds?.encodeToJSON(),
            "viewStates": viewStates?.encodeToJSON(),
            "sortColumn": sortColumn?.encodeToJSON(),
            "direction": direction?.encodeToJSON(),
            "states": states?.encodeToJSON(),
            "partnerIds": partnerIds?.encodeToJSON(),
            "categoryIds": categoryIds?.encodeToJSON(),
            "priority.lowerBound": priorityLowerBound?.encodeToJSON(),
            "priority.upperBound": priorityUpperBound?.encodeToJSON(),
            "marketingCampaignId": marketingCampaignId?.encodeToJSON(),
            "includeMarketingCampaignId": includeMarketingCampaignId?.encodeToJSON(),
            "loyaltyProgramIds": loyaltyProgramIds?.encodeToJSON(),
            "excludeMarketingCampaign": excludeMarketingCampaign?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfOffersCountModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить актуальные шаги округления.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersGetRoundingSteps(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfInt32?, _ error: Error?) -> Void)) -> RequestTask {
        return offersGetRoundingStepsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить актуальные шаги округления.
     - GET /v1.2/offers/RoundingSteps
     - returns: RequestBuilder<ResultModelOfListOfInt32> 
     */
    open class func offersGetRoundingStepsWithRequestBuilder() -> RequestBuilder<ResultModelOfListOfInt32> {
        let localVariablePath = "/v1.2/offers/RoundingSteps"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfInt32>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter offerId: (path)  
     - parameter partnerIds: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersPostOffersByOfferIdRelatedPartners(offerId: Int, partnerIds: [Int], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersPostOffersByOfferIdRelatedPartnersWithRequestBuilder(offerId: offerId, partnerIds: partnerIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1.2/offers/{offerId}/relatedPartners
     - parameter offerId: (path)  
     - parameter partnerIds: (query)  
     - returns: RequestBuilder<ResultModel> 
     */
    open class func offersPostOffersByOfferIdRelatedPartnersWithRequestBuilder(offerId: Int, partnerIds: [Int]) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/offers/{offerId}/relatedPartners"
        let offerIdPreEscape = "\(APIHelper.mapValueToPathItem(offerId))"
        let offerIdPostEscape = offerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerId}", with: offerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "partnerIds": partnerIds.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Отклонение принятых ранее изменений акции.
     
     - parameter rejectOfferChangesModel: (query) Модель отклонения изменений. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersRejectChanges(rejectOfferChangesModel: RejectOfferChangesModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersRejectChangesWithRequestBuilder(rejectOfferChangesModel: rejectOfferChangesModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Отклонение принятых ранее изменений акции.
     - POST /v1.2/offers/RejectChanges
     - parameter rejectOfferChangesModel: (query) Модель отклонения изменений. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func offersRejectChangesWithRequestBuilder(rejectOfferChangesModel: RejectOfferChangesModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/offers/RejectChanges"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "rejectOfferChangesModel": rejectOfferChangesModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Удаление черновика акции.
     
     - parameter offerModel: (query) Модель акции. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersResetChanges(offerModel: EditOfferModelBase, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersResetChangesWithRequestBuilder(offerModel: offerModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Удаление черновика акции.
     - POST /v1.2/offers/ResetChanges
     - parameter offerModel: (query) Модель акции. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func offersResetChangesWithRequestBuilder(offerModel: EditOfferModelBase) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/offers/ResetChanges"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offerModel": offerModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Востановить акцию.
     
     - parameter offerModel: (query) Модель акции. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersRestoreOffer(offerModel: EditOfferModelBase, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersRestoreOfferWithRequestBuilder(offerModel: offerModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Востановить акцию.
     - POST /v1.2/offers/RestoreOffer
     - parameter offerModel: (query) Модель акции. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func offersRestoreOfferWithRequestBuilder(offerModel: EditOfferModelBase) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/offers/RestoreOffer"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offerModel": offerModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Сохраняет изменения в акции.
     
     - parameter modelBase: (query) Модель с внутренним идентификатором акции. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersSaveChanges(modelBase: EditOfferModelBase, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersSaveChangesWithRequestBuilder(modelBase: modelBase).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Сохраняет изменения в акции.
     - POST /v1.2/offers/SaveChanges
     - parameter modelBase: (query) Модель с внутренним идентификатором акции. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func offersSaveChangesWithRequestBuilder(modelBase: EditOfferModelBase) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/offers/SaveChanges"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "modelBase": modelBase.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Отправить акцию на согласование.
     
     - parameter sendOfferToApprovalModel: (query) Модель отправки акции на согласование. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersSendToApproval(sendOfferToApprovalModel: SendOfferToApprovalModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersSendToApprovalWithRequestBuilder(sendOfferToApprovalModel: sendOfferToApprovalModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Отправить акцию на согласование.
     - POST /v1.2/offers/SendToApproval
     - parameter sendOfferToApprovalModel: (query) Модель отправки акции на согласование. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func offersSendToApprovalWithRequestBuilder(sendOfferToApprovalModel: SendOfferToApprovalModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/offers/SendToApproval"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sendOfferToApprovalModel": sendOfferToApprovalModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Запускает акцию.
     
     - parameter editOfferModelBase: (query) Модель акции. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersStartOffer(editOfferModelBase: EditOfferModelBase, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersStartOfferWithRequestBuilder(editOfferModelBase: editOfferModelBase).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Запускает акцию.
     - POST /v1.2/offers/StartOffer
     - parameter editOfferModelBase: (query) Модель акции. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func offersStartOfferWithRequestBuilder(editOfferModelBase: EditOfferModelBase) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/offers/StartOffer"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "editOfferModelBase": editOfferModelBase.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Остановливает акцию.
     
     - parameter editOfferModelBase: (query) Модель акции. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersStopOffer(editOfferModelBase: EditOfferModelBase, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersStopOfferWithRequestBuilder(editOfferModelBase: editOfferModelBase).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Остановливает акцию.
     - POST /v1.2/offers/StopOffer
     - parameter editOfferModelBase: (query) Модель акции. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func offersStopOfferWithRequestBuilder(editOfferModelBase: EditOfferModelBase) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/offers/StopOffer"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "editOfferModelBase": editOfferModelBase.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Обновляет маркетинговую кампанию.
     
     - parameter offerId: (path) Внутренний идентификатор акции. 
     - parameter marketingCampaignId: (query) Внутренний идентификатор маркетинговой кампании. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersUpdateMarketingCampaign(offerId: Int, marketingCampaignId: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersUpdateMarketingCampaignWithRequestBuilder(offerId: offerId, marketingCampaignId: marketingCampaignId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Обновляет маркетинговую кампанию.
     - POST /v1.2/offers/{offerId}/marketingCampaign
     - parameter offerId: (path) Внутренний идентификатор акции. 
     - parameter marketingCampaignId: (query) Внутренний идентификатор маркетинговой кампании. (optional)
     - returns: RequestBuilder<ResultModel> 
     */
    open class func offersUpdateMarketingCampaignWithRequestBuilder(offerId: Int, marketingCampaignId: Int? = nil) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/offers/{offerId}/marketingCampaign"
        let offerIdPreEscape = "\(APIHelper.mapValueToPathItem(offerId))"
        let offerIdPostEscape = offerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerId}", with: offerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "marketingCampaignId": marketingCampaignId?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Изменяет категорию акции.
     
     - parameter offerId: (path) Внутренний идентификатор акции. 
     - parameter offerCategoryId: (query) Внутренний идентификатор новой категории акции. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offersUpdateOfferCategory(offerId: Int, offerCategoryId: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offersUpdateOfferCategoryWithRequestBuilder(offerId: offerId, offerCategoryId: offerCategoryId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Изменяет категорию акции.
     - POST /v1.2/offers/{offerId}/categories
     - parameter offerId: (path) Внутренний идентификатор акции. 
     - parameter offerCategoryId: (query) Внутренний идентификатор новой категории акции. (optional)
     - returns: RequestBuilder<ResultModel> 
     */
    open class func offersUpdateOfferCategoryWithRequestBuilder(offerId: Int, offerCategoryId: Int? = nil) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/offers/{offerId}/categories"
        let offerIdPreEscape = "\(APIHelper.mapValueToPathItem(offerId))"
        let offerIdPostEscape = offerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerId}", with: offerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offerCategoryId": offerCategoryId?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
