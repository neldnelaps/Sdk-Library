//
// CounterAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CounterAPI {

    /**
     Возвращает счетчик по его внутреннему идентификатору.
     
     - parameter id: (path) Внутренний идентификатор счетчика. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func counterGet(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfCounterViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return counterGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает счетчик по его внутреннему идентификатору.
     - GET /v1.2/Counters/{id}
     - parameter id: (path) Внутренний идентификатор счетчика. 
     - returns: RequestBuilder<ResultModelOfCounterViewModel> 
     */
    open class func counterGetWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfCounterViewModel> {
        var localVariablePath = "/v1.2/Counters/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfCounterViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список доступных счетчиков.
     
     - parameter filterEventType: (query) Тип события. (optional)
     - parameter filterNameText: (query) Текст, содержащийся в названии счетчика. (optional)
     - parameter filterCounterType: (query) Тип счетчика. (optional)
     - parameter filterDateFrom: (query) С какой даты искать. (optional)
     - parameter filterDateTo: (query) По какую дату искать. (optional)
     - parameter filterPartners: (query) Список партнеров, по которым будут отфильтрованы счетчики. (optional)
     - parameter filterFrom: (query) Начало выборки. (optional)
     - parameter filterCount: (query) Количество. (optional)
     - parameter filterLoyaltyProgramIds: (query) Список id программ лояльности, для фильтрации счетчиков. (optional)
     - parameter filterRequiredTargets: (query) Обязательные параметры счетчика. (optional)
     - parameter filterSupportedTargets: (query) Поддерживаемые параметры счетчика. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func counterGetAvailableCounters(filterEventType: OfferEventType? = nil, filterNameText: String? = nil, filterCounterType: CounterType? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterPartners: [Int]? = nil, filterFrom: Int? = nil, filterCount: Int? = nil, filterLoyaltyProgramIds: [Int]? = nil, filterRequiredTargets: [CounterTarget]? = nil, filterSupportedTargets: [CounterTarget]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfCounterBaseViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return counterGetAvailableCountersWithRequestBuilder(filterEventType: filterEventType, filterNameText: filterNameText, filterCounterType: filterCounterType, filterDateFrom: filterDateFrom, filterDateTo: filterDateTo, filterPartners: filterPartners, filterFrom: filterFrom, filterCount: filterCount, filterLoyaltyProgramIds: filterLoyaltyProgramIds, filterRequiredTargets: filterRequiredTargets, filterSupportedTargets: filterSupportedTargets).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список доступных счетчиков.
     - GET /v1.2/Counters
     - parameter filterEventType: (query) Тип события. (optional)
     - parameter filterNameText: (query) Текст, содержащийся в названии счетчика. (optional)
     - parameter filterCounterType: (query) Тип счетчика. (optional)
     - parameter filterDateFrom: (query) С какой даты искать. (optional)
     - parameter filterDateTo: (query) По какую дату искать. (optional)
     - parameter filterPartners: (query) Список партнеров, по которым будут отфильтрованы счетчики. (optional)
     - parameter filterFrom: (query) Начало выборки. (optional)
     - parameter filterCount: (query) Количество. (optional)
     - parameter filterLoyaltyProgramIds: (query) Список id программ лояльности, для фильтрации счетчиков. (optional)
     - parameter filterRequiredTargets: (query) Обязательные параметры счетчика. (optional)
     - parameter filterSupportedTargets: (query) Поддерживаемые параметры счетчика. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfCounterBaseViewModel> 
     */
    open class func counterGetAvailableCountersWithRequestBuilder(filterEventType: OfferEventType? = nil, filterNameText: String? = nil, filterCounterType: CounterType? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterPartners: [Int]? = nil, filterFrom: Int? = nil, filterCount: Int? = nil, filterLoyaltyProgramIds: [Int]? = nil, filterRequiredTargets: [CounterTarget]? = nil, filterSupportedTargets: [CounterTarget]? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfCounterBaseViewModel> {
        let localVariablePath = "/v1.2/Counters"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.eventType": filterEventType?.encodeToJSON(),
            "filter.nameText": filterNameText?.encodeToJSON(),
            "filter.counterType": filterCounterType?.encodeToJSON(),
            "filter.dateFrom": filterDateFrom?.encodeToJSON(),
            "filter.dateTo": filterDateTo?.encodeToJSON(),
            "filter.partners": filterPartners?.encodeToJSON(),
            "filter.from": filterFrom?.encodeToJSON(),
            "filter.count": filterCount?.encodeToJSON(),
            "filter.loyaltyProgramIds": filterLoyaltyProgramIds?.encodeToJSON(),
            "filter.requiredTargets": filterRequiredTargets?.encodeToJSON(),
            "filter.supportedTargets": filterSupportedTargets?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfCounterBaseViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список доступных параметров счетчика.
     
     - parameter eventTypes: (query) Список типов событий. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func counterGetTargets(eventTypes: [OfferEventType], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfCounterTargetViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return counterGetTargetsWithRequestBuilder(eventTypes: eventTypes).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список доступных параметров счетчика.
     - GET /v1.2/Counters/Targets
     - parameter eventTypes: (query) Список типов событий. 
     - returns: RequestBuilder<ResultModelOfListOfCounterTargetViewModel> 
     */
    open class func counterGetTargetsWithRequestBuilder(eventTypes: [OfferEventType]) -> RequestBuilder<ResultModelOfListOfCounterTargetViewModel> {
        let localVariablePath = "/v1.2/Counters/Targets"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eventTypes": eventTypes.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfCounterTargetViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
