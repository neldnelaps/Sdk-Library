//
// ConfigurationScriptsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ConfigurationScriptsAPI {

    /**
     Возвращает доступные БД.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func configurationScriptsGetDbNames(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?, _ error: Error?) -> Void)) -> RequestTask {
        return configurationScriptsGetDbNamesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает доступные БД.
     - GET /v1.2/configurationScripts/availableDatabases
     - returns: RequestBuilder<[String]> 
     */
    open class func configurationScriptsGetDbNamesWithRequestBuilder() -> RequestBuilder<[String]> {
        let localVariablePath = "/v1.2/configurationScripts/availableDatabases"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список всех скриптов.
     
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterFromDate: (query) Дата С. (optional)
     - parameter filterToDate: (query) Дата По. (optional)
     - parameter filterIdSubstring: (query) Подстрока для поиска по идентификатору. (optional)
     - parameter filterConfigDeployId: (query) Идентификатор деплоя. (optional)
     - parameter filterName: (query) Наименование БД. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func configurationScriptsGetScripts(from: Int? = nil, count: Int? = nil, filterFromDate: String? = nil, filterToDate: String? = nil, filterIdSubstring: String? = nil, filterConfigDeployId: String? = nil, filterName: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfConfigurationScriptViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return configurationScriptsGetScriptsWithRequestBuilder(from: from, count: count, filterFromDate: filterFromDate, filterToDate: filterToDate, filterIdSubstring: filterIdSubstring, filterConfigDeployId: filterConfigDeployId, filterName: filterName).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список всех скриптов.
     - GET /v1.2/configurationScripts
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterFromDate: (query) Дата С. (optional)
     - parameter filterToDate: (query) Дата По. (optional)
     - parameter filterIdSubstring: (query) Подстрока для поиска по идентификатору. (optional)
     - parameter filterConfigDeployId: (query) Идентификатор деплоя. (optional)
     - parameter filterName: (query) Наименование БД. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfConfigurationScriptViewModel> 
     */
    open class func configurationScriptsGetScriptsWithRequestBuilder(from: Int? = nil, count: Int? = nil, filterFromDate: String? = nil, filterToDate: String? = nil, filterIdSubstring: String? = nil, filterConfigDeployId: String? = nil, filterName: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfConfigurationScriptViewModel> {
        let localVariablePath = "/v1.2/configurationScripts"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.fromDate": filterFromDate?.encodeToJSON(),
            "filter.toDate": filterToDate?.encodeToJSON(),
            "filter.idSubstring": filterIdSubstring?.encodeToJSON(),
            "filter.configDeployId": filterConfigDeployId?.encodeToJSON(),
            "filter.name": filterName?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfConfigurationScriptViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
