//
// DeviceEmulationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DeviceEmulationAPI {

    /**
     Добавление идентификатора пользователя.
     
     - parameter identifierValue: (query) Значение. (optional)
     - parameter identifierLoyaltyProgram: (query) Программа лояльности. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationAddUserIdentifier(identifierValue: String? = nil, identifierLoyaltyProgram: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationAddUserIdentifierWithRequestBuilder(identifierValue: identifierValue, identifierLoyaltyProgram: identifierLoyaltyProgram).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Добавление идентификатора пользователя.
     - PUT /v1.2/deviceEmulation/purchases/current/userIdentifier
     - parameter identifierValue: (query) Значение. (optional)
     - parameter identifierLoyaltyProgram: (query) Программа лояльности. (optional)
     - returns: RequestBuilder<ResultModel> 
     */
    open class func deviceEmulationAddUserIdentifierWithRequestBuilder(identifierValue: String? = nil, identifierLoyaltyProgram: String? = nil) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/deviceEmulation/purchases/current/userIdentifier"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "identifier.value": identifierValue?.encodeToJSON(),
            "identifier.loyaltyProgram": identifierLoyaltyProgram?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Рассчитать прямую скидку.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationCalculate(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfDeviceEmulationCalculateResultStateViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationCalculateWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Рассчитать прямую скидку.
     - POST /v1.2/deviceEmulation/purchases/current/calculate
     - returns: RequestBuilder<ResultModelOfDeviceEmulationCalculateResultStateViewModel> 
     */
    open class func deviceEmulationCalculateWithRequestBuilder() -> RequestBuilder<ResultModelOfDeviceEmulationCalculateResultStateViewModel> {
        let localVariablePath = "/v1.2/deviceEmulation/purchases/current/calculate"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfDeviceEmulationCalculateResultStateViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Отменить покупку.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationCancelPurchase(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfDeviceEmulationResultStateViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationCancelPurchaseWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Отменить покупку.
     - POST /v1.2/deviceEmulation/purchases/current/cancel
     - returns: RequestBuilder<ResultModelOfDeviceEmulationResultStateViewModel> 
     */
    open class func deviceEmulationCancelPurchaseWithRequestBuilder() -> RequestBuilder<ResultModelOfDeviceEmulationResultStateViewModel> {
        let localVariablePath = "/v1.2/deviceEmulation/purchases/current/cancel"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfDeviceEmulationResultStateViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Завершить покупку без подтверждения.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationCompletePurchaseWithCancel(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfDeviceEmulationChequeViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationCompletePurchaseWithCancelWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Завершить покупку без подтверждения.
     - POST /v1.2/deviceEmulation/purchases/current/completeWithCancel
     - returns: RequestBuilder<ResultModelOfDeviceEmulationChequeViewModel> 
     */
    open class func deviceEmulationCompletePurchaseWithCancelWithRequestBuilder() -> RequestBuilder<ResultModelOfDeviceEmulationChequeViewModel> {
        let localVariablePath = "/v1.2/deviceEmulation/purchases/current/completeWithCancel"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfDeviceEmulationChequeViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Завершить покупку c подтверждением.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationCompletePurchaseWithConfirm(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfDeviceEmulationChequeViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationCompletePurchaseWithConfirmWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Завершить покупку c подтверждением.
     - POST /v1.2/deviceEmulation/purchases/current/completeWithConfirm
     - returns: RequestBuilder<ResultModelOfDeviceEmulationChequeViewModel> 
     */
    open class func deviceEmulationCompletePurchaseWithConfirmWithRequestBuilder() -> RequestBuilder<ResultModelOfDeviceEmulationChequeViewModel> {
        let localVariablePath = "/v1.2/deviceEmulation/purchases/current/completeWithConfirm"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfDeviceEmulationChequeViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Добавляет чековые позиции.
     
     - parameter createChequePositionViewModels: (query) Список чековых позиций. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationCreateChequePositions(createChequePositionViewModels: [DeviceEmulationCreateChequePositionModel], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationCreateChequePositionsWithRequestBuilder(createChequePositionViewModels: createChequePositionViewModels).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Добавляет чековые позиции.
     - PUT /v1.2/deviceEmulation/purchases/current/positions
     - parameter createChequePositionViewModels: (query) Список чековых позиций. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func deviceEmulationCreateChequePositionsWithRequestBuilder(createChequePositionViewModels: [DeviceEmulationCreateChequePositionModel]) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/deviceEmulation/purchases/current/positions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "createChequePositionViewModels": createChequePositionViewModels.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Добавляет список купонов.
     
     - parameter model: (query) Входная модель. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationCreateCoupons(model: DeviceEmulationCreateCouponsFromListModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationCreateCouponsWithRequestBuilder(model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Добавляет список купонов.
     - PUT /v1.2/deviceEmulation/purchases/current/coupons
     - parameter model: (query) Входная модель. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func deviceEmulationCreateCouponsWithRequestBuilder(model: DeviceEmulationCreateCouponsFromListModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/deviceEmulation/purchases/current/coupons"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Удаляет купон по номеру.
     
     - parameter number: (path) Номер купона. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationDeleteCouponByNumber(number: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationDeleteCouponByNumberWithRequestBuilder(number: number).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Удаляет купон по номеру.
     - DELETE /v1.2/deviceEmulation/purchases/current/coupons/{number}
     - parameter number: (path) Номер купона. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func deviceEmulationDeleteCouponByNumberWithRequestBuilder(number: String) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/deviceEmulation/purchases/current/coupons/{number}"
        let numberPreEscape = "\(APIHelper.mapValueToPathItem(number))"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Завершить покупку.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationFinishCheque(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationFinishChequeWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Завершить покупку.
     - POST /v1.2/deviceEmulation/purchases/current/finish
     - returns: RequestBuilder<ResultModel> 
     */
    open class func deviceEmulationFinishChequeWithRequestBuilder() -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/deviceEmulation/purchases/current/finish"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает доступные средства по карте.
     
     - parameter identifierValue: (query) Значение. (optional)
     - parameter identifierLoyaltyProgram: (query) Программа лояльности. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationGetAvailableAmount(identifierValue: String? = nil, identifierLoyaltyProgram: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfDeviceEmulationBalanceViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationGetAvailableAmountWithRequestBuilder(identifierValue: identifierValue, identifierLoyaltyProgram: identifierLoyaltyProgram).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает доступные средства по карте.
     - GET /v1.2/deviceEmulation/purchases/current/availableAmount
     - parameter identifierValue: (query) Значение. (optional)
     - parameter identifierLoyaltyProgram: (query) Программа лояльности. (optional)
     - returns: RequestBuilder<ResultModelOfDeviceEmulationBalanceViewModel> 
     */
    open class func deviceEmulationGetAvailableAmountWithRequestBuilder(identifierValue: String? = nil, identifierLoyaltyProgram: String? = nil) -> RequestBuilder<ResultModelOfDeviceEmulationBalanceViewModel> {
        let localVariablePath = "/v1.2/deviceEmulation/purchases/current/availableAmount"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "identifier.value": identifierValue?.encodeToJSON(),
            "identifier.loyaltyProgram": identifierLoyaltyProgram?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfDeviceEmulationBalanceViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает баланс.
     
     - parameter deviceId: (query) Идентификатор кассы. 
     - parameter date: (query) Время запроса. 
     - parameter identifierValue: (query) Значение. (optional)
     - parameter identifierLoyaltyProgram: (query) Программа лояльности. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationGetBalance(deviceId: Int, date: String, identifierValue: String? = nil, identifierLoyaltyProgram: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfDeviceEmulationBalanceViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationGetBalanceWithRequestBuilder(deviceId: deviceId, date: date, identifierValue: identifierValue, identifierLoyaltyProgram: identifierLoyaltyProgram).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает баланс.
     - GET /v1.2/deviceEmulation/balance
     - parameter deviceId: (query) Идентификатор кассы. 
     - parameter date: (query) Время запроса. 
     - parameter identifierValue: (query) Значение. (optional)
     - parameter identifierLoyaltyProgram: (query) Программа лояльности. (optional)
     - returns: RequestBuilder<ResultModelOfDeviceEmulationBalanceViewModel> 
     */
    open class func deviceEmulationGetBalanceWithRequestBuilder(deviceId: Int, date: String, identifierValue: String? = nil, identifierLoyaltyProgram: String? = nil) -> RequestBuilder<ResultModelOfDeviceEmulationBalanceViewModel> {
        let localVariablePath = "/v1.2/deviceEmulation/balance"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "deviceId": deviceId.encodeToJSON(),
            "date": date.encodeToJSON(),
            "identifier.value": identifierValue?.encodeToJSON(),
            "identifier.loyaltyProgram": identifierLoyaltyProgram?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfDeviceEmulationBalanceViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список всех доступных брендов.
     
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter name: (query) Название. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationGetBrands(from: Int? = nil, count: Int? = nil, name: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfBrandLineViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationGetBrandsWithRequestBuilder(from: from, count: count, name: name).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список всех доступных брендов.
     - GET /v1.2/deviceEmulation/brands
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter name: (query) Название. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfBrandLineViewModel> 
     */
    open class func deviceEmulationGetBrandsWithRequestBuilder(from: Int? = nil, count: Int? = nil, name: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfBrandLineViewModel> {
        let localVariablePath = "/v1.2/deviceEmulation/brands"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "name": name?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfBrandLineViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить информацию о кассире.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationGetCashierInfo(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfDeviceEmulationCashierViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationGetCashierInfoWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить информацию о кассире.
     - GET /v1.2/deviceEmulation/purchases/current/cashier
     - returns: RequestBuilder<ResultModelOfDeviceEmulationCashierViewModel> 
     */
    open class func deviceEmulationGetCashierInfoWithRequestBuilder() -> RequestBuilder<ResultModelOfDeviceEmulationCashierViewModel> {
        let localVariablePath = "/v1.2/deviceEmulation/purchases/current/cashier"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfDeviceEmulationCashierViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список параметров чека.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationGetChequeAdditionalParams(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfDeviceEmulationPurchaseParamViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationGetChequeAdditionalParamsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список параметров чека.
     - GET /v1.2/deviceEmulation/purchases/current/params
     - returns: RequestBuilder<ResultModelOfListOfDeviceEmulationPurchaseParamViewModel> 
     */
    open class func deviceEmulationGetChequeAdditionalParamsWithRequestBuilder() -> RequestBuilder<ResultModelOfListOfDeviceEmulationPurchaseParamViewModel> {
        let localVariablePath = "/v1.2/deviceEmulation/purchases/current/params"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfDeviceEmulationPurchaseParamViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список параметров чековой позиции.
     
     - parameter id: (path) Идентификатор позиции. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationGetChequePositionParams(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfDeviceEmulationPurchaseParamViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationGetChequePositionParamsWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список параметров чековой позиции.
     - GET /v1.2/deviceEmulation/purchases/current/positions/{id}/params
     - parameter id: (path) Идентификатор позиции. 
     - returns: RequestBuilder<ResultModelOfListOfDeviceEmulationPurchaseParamViewModel> 
     */
    open class func deviceEmulationGetChequePositionParamsWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfListOfDeviceEmulationPurchaseParamViewModel> {
        var localVariablePath = "/v1.2/deviceEmulation/purchases/current/positions/{id}/params"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfDeviceEmulationPurchaseParamViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает кассу по идентификатору.
     
     - parameter deviceID: (path) Идентификатор кассы. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationGetDeviceByID(deviceID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfTestDeviceViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationGetDeviceByIDWithRequestBuilder(deviceID: deviceID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает кассу по идентификатору.
     - GET /v1.2/deviceEmulation/devices/{deviceID}
     - parameter deviceID: (path) Идентификатор кассы. 
     - returns: RequestBuilder<ResultModelOfTestDeviceViewModel> 
     */
    open class func deviceEmulationGetDeviceByIDWithRequestBuilder(deviceID: Int) -> RequestBuilder<ResultModelOfTestDeviceViewModel> {
        var localVariablePath = "/v1.2/deviceEmulation/devices/{deviceID}"
        let deviceIDPreEscape = "\(APIHelper.mapValueToPathItem(deviceID))"
        let deviceIDPostEscape = deviceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceID}", with: deviceIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfTestDeviceViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список всех доступных юридических лиц.
     
     - parameter merchantId: (query) Магазин. 
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter name: (query) Название. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationGetLegals(merchantId: Int, from: Int? = nil, count: Int? = nil, name: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfLegalViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationGetLegalsWithRequestBuilder(merchantId: merchantId, from: from, count: count, name: name).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список всех доступных юридических лиц.
     - GET /v1.2/deviceEmulation/legals
     - parameter merchantId: (query) Магазин. 
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter name: (query) Название. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfLegalViewModel> 
     */
    open class func deviceEmulationGetLegalsWithRequestBuilder(merchantId: Int, from: Int? = nil, count: Int? = nil, name: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfLegalViewModel> {
        let localVariablePath = "/v1.2/deviceEmulation/legals"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "merchantId": merchantId.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "name": name?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfLegalViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список всех доступных магазинов.
     
     - parameter brandId: (path) Идентификатор бренда. 
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter name: (query) Название. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationGetMerchants(brandId: Int, from: Int? = nil, count: Int? = nil, name: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfMerchantLineViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationGetMerchantsWithRequestBuilder(brandId: brandId, from: from, count: count, name: name).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список всех доступных магазинов.
     - GET /v1.2/deviceEmulation/brands/{brandId}/merchants
     - parameter brandId: (path) Идентификатор бренда. 
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter name: (query) Название. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfMerchantLineViewModel> 
     */
    open class func deviceEmulationGetMerchantsWithRequestBuilder(brandId: Int, from: Int? = nil, count: Int? = nil, name: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfMerchantLineViewModel> {
        var localVariablePath = "/v1.2/deviceEmulation/brands/{brandId}/merchants"
        let brandIdPreEscape = "\(APIHelper.mapValueToPathItem(brandId))"
        let brandIdPostEscape = brandIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{brandId}", with: brandIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "name": name?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfMerchantLineViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает кассу.
     
     - parameter brandId: (path) Идентификатор бренда. 
     - parameter merchantId: (path) Идентификатор мерчанта. 
     - parameter legalId: (query) Идентификатор юридического лица. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationGetOrCreateAvailableDevice(brandId: Int, merchantId: Int, legalId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfTestDeviceViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationGetOrCreateAvailableDeviceWithRequestBuilder(brandId: brandId, merchantId: merchantId, legalId: legalId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает кассу.
     - GET /v1.2/deviceEmulation/brands/{brandId}/merchants/{merchantId}/device
     - parameter brandId: (path) Идентификатор бренда. 
     - parameter merchantId: (path) Идентификатор мерчанта. 
     - parameter legalId: (query) Идентификатор юридического лица. 
     - returns: RequestBuilder<ResultModelOfTestDeviceViewModel> 
     */
    open class func deviceEmulationGetOrCreateAvailableDeviceWithRequestBuilder(brandId: Int, merchantId: Int, legalId: Int) -> RequestBuilder<ResultModelOfTestDeviceViewModel> {
        var localVariablePath = "/v1.2/deviceEmulation/brands/{brandId}/merchants/{merchantId}/device"
        let brandIdPreEscape = "\(APIHelper.mapValueToPathItem(brandId))"
        let brandIdPostEscape = brandIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{brandId}", with: brandIdPostEscape, options: .literal, range: nil)
        let merchantIdPreEscape = "\(APIHelper.mapValueToPathItem(merchantId))"
        let merchantIdPostEscape = merchantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{merchantId}", with: merchantIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "legalId": legalId.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfTestDeviceViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает текущую покупку.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationGetPurchase(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfDeviceEmulationPurchaseCurrentViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationGetPurchaseWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает текущую покупку.
     - GET /v1.2/deviceEmulation/purchases/current
     - returns: RequestBuilder<ResultModelOfDeviceEmulationPurchaseCurrentViewModel> 
     */
    open class func deviceEmulationGetPurchaseWithRequestBuilder() -> RequestBuilder<ResultModelOfDeviceEmulationPurchaseCurrentViewModel> {
        let localVariablePath = "/v1.2/deviceEmulation/purchases/current"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfDeviceEmulationPurchaseCurrentViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить указанное количество покупок с указанной позиции.
     
     - parameter startChequeTime: (query) Нижняя граница времени покупки. (optional)
     - parameter lastChequeTime: (query) Верхняя граница времени покупки. (optional)
     - parameter merchantIds: (query) Идентификатор магазина. (optional)
     - parameter loyaltyPrograms: (query) Идентификатор программ лояльности. (optional)
     - parameter chequeNumber: (query) Номер чека. (optional)
     - parameter count: (query) Количество. (optional)
     - parameter from: (query) Начальная позиция в списке. (optional)
     - parameter cardNumber: (query) Номер карты клиента. (optional)
     - parameter personId: (query) Идентификатор пользователя. (optional)
     - parameter personIdentifier: (query) Номер телефона клиента. (optional)
     - parameter deviceIds: (query) Ids касс. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationGetPurchases(startChequeTime: String? = nil, lastChequeTime: String? = nil, merchantIds: String? = nil, loyaltyPrograms: String? = nil, chequeNumber: String? = nil, count: Int? = nil, from: Int? = nil, cardNumber: String? = nil, personId: Int? = nil, personIdentifier: String? = nil, deviceIds: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfPurchaseViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationGetPurchasesWithRequestBuilder(startChequeTime: startChequeTime, lastChequeTime: lastChequeTime, merchantIds: merchantIds, loyaltyPrograms: loyaltyPrograms, chequeNumber: chequeNumber, count: count, from: from, cardNumber: cardNumber, personId: personId, personIdentifier: personIdentifier, deviceIds: deviceIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить указанное количество покупок с указанной позиции.
     - GET /v1.2/deviceEmulation/purchases
     - parameter startChequeTime: (query) Нижняя граница времени покупки. (optional)
     - parameter lastChequeTime: (query) Верхняя граница времени покупки. (optional)
     - parameter merchantIds: (query) Идентификатор магазина. (optional)
     - parameter loyaltyPrograms: (query) Идентификатор программ лояльности. (optional)
     - parameter chequeNumber: (query) Номер чека. (optional)
     - parameter count: (query) Количество. (optional)
     - parameter from: (query) Начальная позиция в списке. (optional)
     - parameter cardNumber: (query) Номер карты клиента. (optional)
     - parameter personId: (query) Идентификатор пользователя. (optional)
     - parameter personIdentifier: (query) Номер телефона клиента. (optional)
     - parameter deviceIds: (query) Ids касс. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfPurchaseViewModel> 
     */
    open class func deviceEmulationGetPurchasesWithRequestBuilder(startChequeTime: String? = nil, lastChequeTime: String? = nil, merchantIds: String? = nil, loyaltyPrograms: String? = nil, chequeNumber: String? = nil, count: Int? = nil, from: Int? = nil, cardNumber: String? = nil, personId: Int? = nil, personIdentifier: String? = nil, deviceIds: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfPurchaseViewModel> {
        let localVariablePath = "/v1.2/deviceEmulation/purchases"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "startChequeTime": startChequeTime?.encodeToJSON(),
            "lastChequeTime": lastChequeTime?.encodeToJSON(),
            "merchantIds": merchantIds?.encodeToJSON(),
            "loyaltyPrograms": loyaltyPrograms?.encodeToJSON(),
            "chequeNumber": chequeNumber?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "cardNumber": cardNumber?.encodeToJSON(),
            "personId": personId?.encodeToJSON(),
            "personIdentifier": personIdentifier?.encodeToJSON(),
            "deviceIds": deviceIds?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfPurchaseViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Добавить оплату реальными деньгами.
     
     - parameter cashPaymentModel: (query) Модель добавления оплаты. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationSetCashPayment(cashPaymentModel: DeviceEmulationCashPaymentModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationSetCashPaymentWithRequestBuilder(cashPaymentModel: cashPaymentModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Добавить оплату реальными деньгами.
     - PUT /v1.2/deviceEmulation/purchases/current/payments/cash
     - parameter cashPaymentModel: (query) Модель добавления оплаты. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func deviceEmulationSetCashPaymentWithRequestBuilder(cashPaymentModel: DeviceEmulationCashPaymentModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/deviceEmulation/purchases/current/payments/cash"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "cashPaymentModel": cashPaymentModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Добавить оплату бонусами сторонних компаний.
     
     - parameter otherPaymentModel: (query) Модель добавления оплаты. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationSetOtherPayment(otherPaymentModel: DeviceEmulationAddOtherPaymentModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationSetOtherPaymentWithRequestBuilder(otherPaymentModel: otherPaymentModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Добавить оплату бонусами сторонних компаний.
     - PUT /v1.2/deviceEmulation/purchases/current/payments/other
     - parameter otherPaymentModel: (query) Модель добавления оплаты. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func deviceEmulationSetOtherPaymentWithRequestBuilder(otherPaymentModel: DeviceEmulationAddOtherPaymentModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/deviceEmulation/purchases/current/payments/other"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "otherPaymentModel": otherPaymentModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Задать оплаты.
     
     - parameter addPaymentModels: (query) Модели оплат. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationSetPayments(addPaymentModels: [DeviceEmulationAddBonusPaymentModel], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfDeviceEmulationResultStateViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationSetPaymentsWithRequestBuilder(addPaymentModels: addPaymentModels).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Задать оплаты.
     - PUT /v1.2/deviceEmulation/purchases/current/payments
     - parameter addPaymentModels: (query) Модели оплат. 
     - returns: RequestBuilder<ResultModelOfDeviceEmulationResultStateViewModel> 
     */
    open class func deviceEmulationSetPaymentsWithRequestBuilder(addPaymentModels: [DeviceEmulationAddBonusPaymentModel]) -> RequestBuilder<ResultModelOfDeviceEmulationResultStateViewModel> {
        let localVariablePath = "/v1.2/deviceEmulation/purchases/current/payments"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "addPaymentModels": addPaymentModels.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfDeviceEmulationResultStateViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Добавить оплату бонусами сторонних компаний.
     
     - parameter thirdPartyBonusPaymentModel: (query) Модель добавления оплаты. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationSetThirdPartyBonusPayment(thirdPartyBonusPaymentModel: DeviceEmulationThirdPartyBonusPaymentModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationSetThirdPartyBonusPaymentWithRequestBuilder(thirdPartyBonusPaymentModel: thirdPartyBonusPaymentModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Добавить оплату бонусами сторонних компаний.
     - PUT /v1.2/deviceEmulation/purchases/current/payments/thirdPartyBonus
     - parameter thirdPartyBonusPaymentModel: (query) Модель добавления оплаты. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func deviceEmulationSetThirdPartyBonusPaymentWithRequestBuilder(thirdPartyBonusPaymentModel: DeviceEmulationThirdPartyBonusPaymentModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/deviceEmulation/purchases/current/payments/thirdPartyBonus"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "thirdPartyBonusPaymentModel": thirdPartyBonusPaymentModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Меняет местами позиции в чеке.
     
     - parameter positionId: (path) Номер позиции в покупке. 
     - parameter secondPositionId: (query) Номер второй позиции в покупке. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationSwapChequePositions(positionId: Int, secondPositionId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationSwapChequePositionsWithRequestBuilder(positionId: positionId, secondPositionId: secondPositionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Меняет местами позиции в чеке.
     - POST /v1.2/deviceEmulation/purchases/current/positions/{positionId}/swap
     - parameter positionId: (path) Номер позиции в покупке. 
     - parameter secondPositionId: (query) Номер второй позиции в покупке. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func deviceEmulationSwapChequePositionsWithRequestBuilder(positionId: Int, secondPositionId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/deviceEmulation/purchases/current/positions/{positionId}/swap"
        let positionIdPreEscape = "\(APIHelper.mapValueToPathItem(positionId))"
        let positionIdPostEscape = positionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{positionId}", with: positionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "secondPositionId": secondPositionId.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Обновляет чековую позицию.
     
     - parameter positionId: (path) Номер позиции в покупке. 
     - parameter newPosition: (query) Новая чековая позиция. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceEmulationUpdateChequePosition(positionId: Int, newPosition: DeviceEmulationUpdateChequePositionModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceEmulationUpdateChequePositionWithRequestBuilder(positionId: positionId, newPosition: newPosition).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Обновляет чековую позицию.
     - POST /v1.2/deviceEmulation/purchases/current/positions/{positionId}
     - parameter positionId: (path) Номер позиции в покупке. 
     - parameter newPosition: (query) Новая чековая позиция. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func deviceEmulationUpdateChequePositionWithRequestBuilder(positionId: Int, newPosition: DeviceEmulationUpdateChequePositionModel) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/deviceEmulation/purchases/current/positions/{positionId}"
        let positionIdPreEscape = "\(APIHelper.mapValueToPathItem(positionId))"
        let positionIdPostEscape = positionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{positionId}", with: positionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "newPosition": newPosition.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
