//
// MailingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MailingAPI {

    /**
     Возвращает доступные шлюза рассылки.
     
     - parameter mailingId: (path) Идентификатор рассылки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mailingGateways(mailingId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfMailingGatewayViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return mailingGatewaysWithRequestBuilder(mailingId: mailingId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает доступные шлюза рассылки.
     - GET /v1.2/mailings/{mailingId}/gateways
     - parameter mailingId: (path) Идентификатор рассылки. 
     - returns: RequestBuilder<ResultModelOfListOfMailingGatewayViewModel> 
     */
    open class func mailingGatewaysWithRequestBuilder(mailingId: Int) -> RequestBuilder<ResultModelOfListOfMailingGatewayViewModel> {
        var localVariablePath = "/v1.2/mailings/{mailingId}/gateways"
        let mailingIdPreEscape = "\(APIHelper.mapValueToPathItem(mailingId))"
        let mailingIdPostEscape = mailingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mailingId}", with: mailingIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfMailingGatewayViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает модель рассылки.
     
     - parameter mailingId: (path) Идентификатор рассылки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mailingGet(mailingId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfMailingViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return mailingGetWithRequestBuilder(mailingId: mailingId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает модель рассылки.
     - GET /v1.2/mailings/{mailingId}
     - parameter mailingId: (path) Идентификатор рассылки. 
     - returns: RequestBuilder<ResultModelOfMailingViewModel> 
     */
    open class func mailingGetWithRequestBuilder(mailingId: Int) -> RequestBuilder<ResultModelOfMailingViewModel> {
        var localVariablePath = "/v1.2/mailings/{mailingId}"
        let mailingIdPreEscape = "\(APIHelper.mapValueToPathItem(mailingId))"
        let mailingIdPostEscape = mailingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mailingId}", with: mailingIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfMailingViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить список рассылок.
     
     - parameter filterFromDate: (query) Дата С. (optional)
     - parameter filterToDate: (query) Дата По. (optional)
     - parameter filterFrom: (query) С какого элемента брать. (optional)
     - parameter filterCount: (query) Сколько элементов брать. (optional)
     - parameter filterCreatorIds: (query) Список id создателей акций для фильтрации. (optional)
     - parameter filterName: (query) Название. (optional)
     - parameter filterMailingType: (query) Тип рассылки. (optional)
     - parameter filterMarketingCampaignId: (query) ID маркетинговой кампании. (optional)
     - parameter filterSortByAttachDate: (query) Значение, указывающее, нужно ли сортировать рассылки по дате прикрепления. (optional)
     - parameter filterLoyaltyProgramIds: (query) Идентификаторы программ лояльности. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mailingGetMailings(filterFromDate: String? = nil, filterToDate: String? = nil, filterFrom: Int? = nil, filterCount: Int? = nil, filterCreatorIds: [Int]? = nil, filterName: String? = nil, filterMailingType: MailingWaySendType? = nil, filterMarketingCampaignId: Int? = nil, filterSortByAttachDate: Bool? = nil, filterLoyaltyProgramIds: [Int]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfMailingBriefViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return mailingGetMailingsWithRequestBuilder(filterFromDate: filterFromDate, filterToDate: filterToDate, filterFrom: filterFrom, filterCount: filterCount, filterCreatorIds: filterCreatorIds, filterName: filterName, filterMailingType: filterMailingType, filterMarketingCampaignId: filterMarketingCampaignId, filterSortByAttachDate: filterSortByAttachDate, filterLoyaltyProgramIds: filterLoyaltyProgramIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить список рассылок.
     - GET /v1.2/mailings
     - parameter filterFromDate: (query) Дата С. (optional)
     - parameter filterToDate: (query) Дата По. (optional)
     - parameter filterFrom: (query) С какого элемента брать. (optional)
     - parameter filterCount: (query) Сколько элементов брать. (optional)
     - parameter filterCreatorIds: (query) Список id создателей акций для фильтрации. (optional)
     - parameter filterName: (query) Название. (optional)
     - parameter filterMailingType: (query) Тип рассылки. (optional)
     - parameter filterMarketingCampaignId: (query) ID маркетинговой кампании. (optional)
     - parameter filterSortByAttachDate: (query) Значение, указывающее, нужно ли сортировать рассылки по дате прикрепления. (optional)
     - parameter filterLoyaltyProgramIds: (query) Идентификаторы программ лояльности. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfMailingBriefViewModel> 
     */
    open class func mailingGetMailingsWithRequestBuilder(filterFromDate: String? = nil, filterToDate: String? = nil, filterFrom: Int? = nil, filterCount: Int? = nil, filterCreatorIds: [Int]? = nil, filterName: String? = nil, filterMailingType: MailingWaySendType? = nil, filterMarketingCampaignId: Int? = nil, filterSortByAttachDate: Bool? = nil, filterLoyaltyProgramIds: [Int]? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfMailingBriefViewModel> {
        let localVariablePath = "/v1.2/mailings"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.fromDate": filterFromDate?.encodeToJSON(),
            "filter.toDate": filterToDate?.encodeToJSON(),
            "filter.from": filterFrom?.encodeToJSON(),
            "filter.count": filterCount?.encodeToJSON(),
            "filter.creatorIds": filterCreatorIds?.encodeToJSON(),
            "filter.name": filterName?.encodeToJSON(),
            "filter.mailingType": filterMailingType?.encodeToJSON(),
            "filter.marketingCampaignId": filterMarketingCampaignId?.encodeToJSON(),
            "filter.sortByAttachDate": filterSortByAttachDate?.encodeToJSON(),
            "filter.loyaltyProgramIds": filterLoyaltyProgramIds?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfMailingBriefViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает модель загруженных номеров телефонов в рассылку.
     
     - parameter mailingId: (path) Идентификатор рассылки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mailingPhones(mailingId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfMailingPhonesViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return mailingPhonesWithRequestBuilder(mailingId: mailingId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает модель загруженных номеров телефонов в рассылку.
     - GET /v1.2/mailings/{mailingId}/phones
     - parameter mailingId: (path) Идентификатор рассылки. 
     - returns: RequestBuilder<ResultModelOfMailingPhonesViewModel> 
     */
    open class func mailingPhonesWithRequestBuilder(mailingId: Int) -> RequestBuilder<ResultModelOfMailingPhonesViewModel> {
        var localVariablePath = "/v1.2/mailings/{mailingId}/phones"
        let mailingIdPreEscape = "\(APIHelper.mapValueToPathItem(mailingId))"
        let mailingIdPostEscape = mailingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mailingId}", with: mailingIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfMailingPhonesViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Запускает рассылку.
     
     - parameter mailingId: (path) Идентификатор рассылки. 
     - parameter model: (query) Дата и время запуска рассылки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mailingRun(mailingId: Int, model: MailingRunViewModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfMailingViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return mailingRunWithRequestBuilder(mailingId: mailingId, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Запускает рассылку.
     - POST /v1.2/mailings/{mailingId}/run
     - parameter mailingId: (path) Идентификатор рассылки. 
     - parameter model: (query) Дата и время запуска рассылки. 
     - returns: RequestBuilder<ResultModelOfMailingViewModel> 
     */
    open class func mailingRunWithRequestBuilder(mailingId: Int, model: MailingRunViewModel) -> RequestBuilder<ResultModelOfMailingViewModel> {
        var localVariablePath = "/v1.2/mailings/{mailingId}/run"
        let mailingIdPreEscape = "\(APIHelper.mapValueToPathItem(mailingId))"
        let mailingIdPostEscape = mailingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mailingId}", with: mailingIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfMailingViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Отправляет тестовое сообщение.
     
     - parameter mailingId: (path) Идентификатор рассылки. 
     - parameter model: (query) Модель тестовой рассылки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mailingSendTest(mailingId: Int, model: MailingTestsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return mailingSendTestWithRequestBuilder(mailingId: mailingId, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Отправляет тестовое сообщение.
     - POST /v1.2/mailings/{mailingId}/sendTest
     - parameter mailingId: (path) Идентификатор рассылки. 
     - parameter model: (query) Модель тестовой рассылки. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func mailingSendTestWithRequestBuilder(mailingId: Int, model: MailingTestsModel) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/mailings/{mailingId}/sendTest"
        let mailingIdPreEscape = "\(APIHelper.mapValueToPathItem(mailingId))"
        let mailingIdPostEscape = mailingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mailingId}", with: mailingIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
