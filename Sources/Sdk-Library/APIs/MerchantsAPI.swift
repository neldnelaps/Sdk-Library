//
// MerchantsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MerchantsAPI {

    /**
     Возвращает информацию о торговой точке по внутреннему идентификатору.
     
     - parameter id: (path) Внутренний идентификатор торговой точки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func merchantsGetInfo(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfMerchantInfoModel?, _ error: Error?) -> Void)) -> RequestTask {
        return merchantsGetInfoWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о торговой точке по внутреннему идентификатору.
     - GET /v1.2/Merchants/{id}
     - parameter id: (path) Внутренний идентификатор торговой точки. 
     - returns: RequestBuilder<ResultModelOfMerchantInfoModel> 
     */
    open class func merchantsGetInfoWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfMerchantInfoModel> {
        var localVariablePath = "/v1.2/Merchants/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfMerchantInfoModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о торговой точке по внешнему идентификатору.
     
     - parameter uid: (path) Внешний идентификатор торговой точки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func merchantsGetInfoByUid(uid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfMerchantInfoModel?, _ error: Error?) -> Void)) -> RequestTask {
        return merchantsGetInfoByUidWithRequestBuilder(uid: uid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о торговой точке по внешнему идентификатору.
     - GET /v1.2/Merchants/{uid}
     - parameter uid: (path) Внешний идентификатор торговой точки. 
     - returns: RequestBuilder<ResultModelOfMerchantInfoModel> 
     */
    open class func merchantsGetInfoByUidWithRequestBuilder(uid: String) -> RequestBuilder<ResultModelOfMerchantInfoModel> {
        var localVariablePath = "/v1.2/Merchants/{uid}"
        let uidPreEscape = "\(APIHelper.mapValueToPathItem(uid))"
        let uidPostEscape = uidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uid}", with: uidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfMerchantInfoModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о торговых точках (фильтр по внутренним идентификаторам торговых точек).
     
     - parameter brandId: (query) Фильтр по внешнему идентификатору бренда. (optional)
     - parameter merchantsIds: (query) Фильтр по внутренним идентификаторам торговых точек. (optional)
     - parameter cityId: (query) Внутренний идентификатор населенного пункта. (optional)
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func merchantsGetMerchants(brandId: String? = nil, merchantsIds: [Int]? = nil, cityId: Int? = nil, from: Int? = nil, count: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfMerchantInfoModel?, _ error: Error?) -> Void)) -> RequestTask {
        return merchantsGetMerchantsWithRequestBuilder(brandId: brandId, merchantsIds: merchantsIds, cityId: cityId, from: from, count: count).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о торговых точках (фильтр по внутренним идентификаторам торговых точек).
     - GET /v1.2/Merchants
     - parameter brandId: (query) Фильтр по внешнему идентификатору бренда. (optional)
     - parameter merchantsIds: (query) Фильтр по внутренним идентификаторам торговых точек. (optional)
     - parameter cityId: (query) Внутренний идентификатор населенного пункта. (optional)
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfMerchantInfoModel> 
     */
    open class func merchantsGetMerchantsWithRequestBuilder(brandId: String? = nil, merchantsIds: [Int]? = nil, cityId: Int? = nil, from: Int? = nil, count: Int? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfMerchantInfoModel> {
        let localVariablePath = "/v1.2/Merchants"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "brandId": brandId?.encodeToJSON(),
            "merchantsIds": merchantsIds?.encodeToJSON(),
            "cityId": cityId?.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfMerchantInfoModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о торговых точках (фильтр по внешним идентификаторам торговых точек).
     
     - parameter brandId: (query) Фильтр по внешнему идентификатору бренда. (optional)
     - parameter merchantsUids: (query) Фильтр по внешним идентификаторам торговых точек. (optional)
     - parameter cityId: (query) Внутренний идентификатор населенного пункта. (optional)
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func merchantsGetMerchantsByUids(brandId: String? = nil, merchantsUids: [String]? = nil, cityId: Int? = nil, from: Int? = nil, count: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfMerchantInfoModel?, _ error: Error?) -> Void)) -> RequestTask {
        return merchantsGetMerchantsByUidsWithRequestBuilder(brandId: brandId, merchantsUids: merchantsUids, cityId: cityId, from: from, count: count).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о торговых точках (фильтр по внешним идентификаторам торговых точек).
     - GET /v1.2/Merchants/ByUids
     - parameter brandId: (query) Фильтр по внешнему идентификатору бренда. (optional)
     - parameter merchantsUids: (query) Фильтр по внешним идентификаторам торговых точек. (optional)
     - parameter cityId: (query) Внутренний идентификатор населенного пункта. (optional)
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfMerchantInfoModel> 
     */
    open class func merchantsGetMerchantsByUidsWithRequestBuilder(brandId: String? = nil, merchantsUids: [String]? = nil, cityId: Int? = nil, from: Int? = nil, count: Int? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfMerchantInfoModel> {
        let localVariablePath = "/v1.2/Merchants/ByUids"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "brandId": brandId?.encodeToJSON(),
            "merchantsUids": merchantsUids?.encodeToJSON(),
            "cityId": cityId?.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfMerchantInfoModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
