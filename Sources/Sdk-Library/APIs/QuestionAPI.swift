//
// QuestionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class QuestionAPI {

    /**
     Изменяет порядок отображения вопроса в списке вопросов/в группе вопросов.
     
     - parameter id: (path) Внутренний идентификатор вопроса. 
     - parameter order: (query) Новый порядковый номер. 
     - parameter questionGroupId: (query) Внутренний идентификатор группы вопросов. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func questionChangePosition(id: Int, order: Int, questionGroupId: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return questionChangePositionWithRequestBuilder(id: id, order: order, questionGroupId: questionGroupId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Изменяет порядок отображения вопроса в списке вопросов/в группе вопросов.
     - POST /v1.2/Questions/{id}/ChangePosition
     - parameter id: (path) Внутренний идентификатор вопроса. 
     - parameter order: (query) Новый порядковый номер. 
     - parameter questionGroupId: (query) Внутренний идентификатор группы вопросов. (optional)
     - returns: RequestBuilder<ResultModel> 
     */
    open class func questionChangePositionWithRequestBuilder(id: Int, order: Int, questionGroupId: Int? = nil) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/Questions/{id}/ChangePosition"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "order": order.encodeToJSON(),
            "questionGroupId": questionGroupId?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о вопросе.
     
     - parameter id: (path) Внутренний идентификатор вопроса. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func questionGet(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfQuestionViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return questionGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о вопросе.
     - GET /v1.2/Questions/{id}
     - parameter id: (path) Внутренний идентификатор вопроса. 
     - returns: RequestBuilder<ResultModelOfQuestionViewModel> 
     */
    open class func questionGetWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfQuestionViewModel> {
        var localVariablePath = "/v1.2/Questions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfQuestionViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о всех вопросах и всех группах вопросов.
     
     - parameter filterName: (query)  (optional)
     - parameter filterLogicalName: (query)  (optional)
     - parameter filterStateType: (query)  (optional)
     - parameter filterVisibleType: (query)  (optional)
     - parameter filterRequiredType: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func questionGetAll(filterName: String? = nil, filterLogicalName: String? = nil, filterStateType: ArchivedState? = nil, filterVisibleType: VisibilityType? = nil, filterRequiredType: QuestionRequiredType? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfQuestionnaireItemViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return questionGetAllWithRequestBuilder(filterName: filterName, filterLogicalName: filterLogicalName, filterStateType: filterStateType, filterVisibleType: filterVisibleType, filterRequiredType: filterRequiredType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о всех вопросах и всех группах вопросов.
     - GET /v1.2/Questions
     - parameter filterName: (query)  (optional)
     - parameter filterLogicalName: (query)  (optional)
     - parameter filterStateType: (query)  (optional)
     - parameter filterVisibleType: (query)  (optional)
     - parameter filterRequiredType: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfListOfQuestionnaireItemViewModel> 
     */
    open class func questionGetAllWithRequestBuilder(filterName: String? = nil, filterLogicalName: String? = nil, filterStateType: ArchivedState? = nil, filterVisibleType: VisibilityType? = nil, filterRequiredType: QuestionRequiredType? = nil) -> RequestBuilder<ResultModelOfListOfQuestionnaireItemViewModel> {
        let localVariablePath = "/v1.2/Questions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.name": filterName?.encodeToJSON(),
            "filter.logicalName": filterLogicalName?.encodeToJSON(),
            "filter.stateType": filterStateType?.encodeToJSON(),
            "filter.visibleType": filterVisibleType?.encodeToJSON(),
            "filter.requiredType": filterRequiredType?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfQuestionnaireItemViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Восстанавливает вопрос из архива.
     
     - parameter id: (path) Внутренний идентификатор вопроса. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func questionRestore(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return questionRestoreWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Восстанавливает вопрос из архива.
     - POST /v1.2/Questions/{id}/Restore
     - parameter id: (path) Внутренний идентификатор вопроса. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func questionRestoreWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/Questions/{id}/Restore"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
