//
// PartnerMerchantAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PartnerMerchantAPI {

    /**

     - parameter permission: (query)  
     - parameter from: (query)  (optional)
     - parameter count: (query)  (optional)
     - parameter nameSubstring: (query)  (optional)
     - parameter internalNameSubstring: (query)  (optional)
     - parameter brandNameSubstring: (query)  (optional)
     - parameter brandId: (query)  (optional)
     - parameter locationSubstring: (query)  (optional)
     - parameter uids: (query)  (optional)
     - parameter additionalInfoKey: (query)  (optional)
     - parameter additionalInfoValue: (query)  (optional)
     - parameter isOrderedByAscending: (query)  (optional)
     - parameter mode: (query)  (optional)
     - parameter merchantIds: (query)  (optional)
     - parameter sortingIds: (query)  (optional)
     - parameter partnerIds: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerMerchantGetAvailableMerchants(permission: String, from: Int? = nil, count: Int? = nil, nameSubstring: String? = nil, internalNameSubstring: String? = nil, brandNameSubstring: String? = nil, brandId: Int? = nil, locationSubstring: String? = nil, uids: [String]? = nil, additionalInfoKey: String? = nil, additionalInfoValue: String? = nil, isOrderedByAscending: Bool? = nil, mode: ArchivedState? = nil, merchantIds: [Int]? = nil, sortingIds: [Int]? = nil, partnerIds: [Int]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfMerchantLineViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerMerchantGetAvailableMerchantsWithRequestBuilder(permission: permission, from: from, count: count, nameSubstring: nameSubstring, internalNameSubstring: internalNameSubstring, brandNameSubstring: brandNameSubstring, brandId: brandId, locationSubstring: locationSubstring, uids: uids, additionalInfoKey: additionalInfoKey, additionalInfoValue: additionalInfoValue, isOrderedByAscending: isOrderedByAscending, mode: mode, merchantIds: merchantIds, sortingIds: sortingIds, partnerIds: partnerIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1.2/partners/merchants/availableMerchants
     - parameter permission: (query)  
     - parameter from: (query)  (optional)
     - parameter count: (query)  (optional)
     - parameter nameSubstring: (query)  (optional)
     - parameter internalNameSubstring: (query)  (optional)
     - parameter brandNameSubstring: (query)  (optional)
     - parameter brandId: (query)  (optional)
     - parameter locationSubstring: (query)  (optional)
     - parameter uids: (query)  (optional)
     - parameter additionalInfoKey: (query)  (optional)
     - parameter additionalInfoValue: (query)  (optional)
     - parameter isOrderedByAscending: (query)  (optional)
     - parameter mode: (query)  (optional)
     - parameter merchantIds: (query)  (optional)
     - parameter sortingIds: (query)  (optional)
     - parameter partnerIds: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfMerchantLineViewModel> 
     */
    open class func partnerMerchantGetAvailableMerchantsWithRequestBuilder(permission: String, from: Int? = nil, count: Int? = nil, nameSubstring: String? = nil, internalNameSubstring: String? = nil, brandNameSubstring: String? = nil, brandId: Int? = nil, locationSubstring: String? = nil, uids: [String]? = nil, additionalInfoKey: String? = nil, additionalInfoValue: String? = nil, isOrderedByAscending: Bool? = nil, mode: ArchivedState? = nil, merchantIds: [Int]? = nil, sortingIds: [Int]? = nil, partnerIds: [Int]? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfMerchantLineViewModel> {
        let localVariablePath = "/v1.2/partners/merchants/availableMerchants"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "permission": permission.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "nameSubstring": nameSubstring?.encodeToJSON(),
            "internalNameSubstring": internalNameSubstring?.encodeToJSON(),
            "brandNameSubstring": brandNameSubstring?.encodeToJSON(),
            "brandId": brandId?.encodeToJSON(),
            "locationSubstring": locationSubstring?.encodeToJSON(),
            "uids": uids?.encodeToJSON(),
            "additionalInfoKey": additionalInfoKey?.encodeToJSON(),
            "additionalInfoValue": additionalInfoValue?.encodeToJSON(),
            "isOrderedByAscending": isOrderedByAscending?.encodeToJSON(),
            "mode": mode?.encodeToJSON(),
            "merchantIds": merchantIds?.encodeToJSON(),
            "sortingIds": sortingIds?.encodeToJSON(),
            "partnerIds": partnerIds?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfMerchantLineViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter permission: (query)  
     - parameter from: (query)  (optional)
     - parameter count: (query)  (optional)
     - parameter nameSubstring: (query)  (optional)
     - parameter internalNameSubstring: (query)  (optional)
     - parameter brandNameSubstring: (query)  (optional)
     - parameter brandId: (query)  (optional)
     - parameter locationSubstring: (query)  (optional)
     - parameter uids: (query)  (optional)
     - parameter additionalInfoKey: (query)  (optional)
     - parameter additionalInfoValue: (query)  (optional)
     - parameter isOrderedByAscending: (query)  (optional)
     - parameter mode: (query)  (optional)
     - parameter merchantIds: (query)  (optional)
     - parameter sortingIds: (query)  (optional)
     - parameter partnerIds: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerMerchantGetAvailableMerchantsCountByBrand(permission: String, from: Int? = nil, count: Int? = nil, nameSubstring: String? = nil, internalNameSubstring: String? = nil, brandNameSubstring: String? = nil, brandId: Int? = nil, locationSubstring: String? = nil, uids: [String]? = nil, additionalInfoKey: String? = nil, additionalInfoValue: String? = nil, isOrderedByAscending: Bool? = nil, mode: ArchivedState? = nil, merchantIds: [Int]? = nil, sortingIds: [Int]? = nil, partnerIds: [Int]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfBrandLineViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerMerchantGetAvailableMerchantsCountByBrandWithRequestBuilder(permission: permission, from: from, count: count, nameSubstring: nameSubstring, internalNameSubstring: internalNameSubstring, brandNameSubstring: brandNameSubstring, brandId: brandId, locationSubstring: locationSubstring, uids: uids, additionalInfoKey: additionalInfoKey, additionalInfoValue: additionalInfoValue, isOrderedByAscending: isOrderedByAscending, mode: mode, merchantIds: merchantIds, sortingIds: sortingIds, partnerIds: partnerIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1.2/partners/merchants/availableMerchantsCountByBrand
     - parameter permission: (query)  
     - parameter from: (query)  (optional)
     - parameter count: (query)  (optional)
     - parameter nameSubstring: (query)  (optional)
     - parameter internalNameSubstring: (query)  (optional)
     - parameter brandNameSubstring: (query)  (optional)
     - parameter brandId: (query)  (optional)
     - parameter locationSubstring: (query)  (optional)
     - parameter uids: (query)  (optional)
     - parameter additionalInfoKey: (query)  (optional)
     - parameter additionalInfoValue: (query)  (optional)
     - parameter isOrderedByAscending: (query)  (optional)
     - parameter mode: (query)  (optional)
     - parameter merchantIds: (query)  (optional)
     - parameter sortingIds: (query)  (optional)
     - parameter partnerIds: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfBrandLineViewModel> 
     */
    open class func partnerMerchantGetAvailableMerchantsCountByBrandWithRequestBuilder(permission: String, from: Int? = nil, count: Int? = nil, nameSubstring: String? = nil, internalNameSubstring: String? = nil, brandNameSubstring: String? = nil, brandId: Int? = nil, locationSubstring: String? = nil, uids: [String]? = nil, additionalInfoKey: String? = nil, additionalInfoValue: String? = nil, isOrderedByAscending: Bool? = nil, mode: ArchivedState? = nil, merchantIds: [Int]? = nil, sortingIds: [Int]? = nil, partnerIds: [Int]? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfBrandLineViewModel> {
        let localVariablePath = "/v1.2/partners/merchants/availableMerchantsCountByBrand"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "permission": permission.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "nameSubstring": nameSubstring?.encodeToJSON(),
            "internalNameSubstring": internalNameSubstring?.encodeToJSON(),
            "brandNameSubstring": brandNameSubstring?.encodeToJSON(),
            "brandId": brandId?.encodeToJSON(),
            "locationSubstring": locationSubstring?.encodeToJSON(),
            "uids": uids?.encodeToJSON(),
            "additionalInfoKey": additionalInfoKey?.encodeToJSON(),
            "additionalInfoValue": additionalInfoValue?.encodeToJSON(),
            "isOrderedByAscending": isOrderedByAscending?.encodeToJSON(),
            "mode": mode?.encodeToJSON(),
            "merchantIds": merchantIds?.encodeToJSON(),
            "sortingIds": sortingIds?.encodeToJSON(),
            "partnerIds": partnerIds?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfBrandLineViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о торговой точке по внутренним идентификаторам Партнера и торговой точки.
     
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter merchantId: (path) Внутренний идентификатор торговой точки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerMerchantGetMerchant(partnerId: Int, merchantId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfMerchantViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerMerchantGetMerchantWithRequestBuilder(partnerId: partnerId, merchantId: merchantId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о торговой точке по внутренним идентификаторам Партнера и торговой точки.
     - GET /v1.2/partners/{partnerId}/merchants/{merchantId}
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter merchantId: (path) Внутренний идентификатор торговой точки. 
     - returns: RequestBuilder<ResultModelOfMerchantViewModel> 
     */
    open class func partnerMerchantGetMerchantWithRequestBuilder(partnerId: Int, merchantId: Int) -> RequestBuilder<ResultModelOfMerchantViewModel> {
        var localVariablePath = "/v1.2/partners/{partnerId}/merchants/{merchantId}"
        let partnerIdPreEscape = "\(APIHelper.mapValueToPathItem(partnerId))"
        let partnerIdPostEscape = partnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{partnerId}", with: partnerIdPostEscape, options: .literal, range: nil)
        let merchantIdPreEscape = "\(APIHelper.mapValueToPathItem(merchantId))"
        let merchantIdPostEscape = merchantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{merchantId}", with: merchantIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfMerchantViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter permission: (query)  
     - parameter brandIds: (query)  (optional)
     - parameter partnerIds: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerMerchantGetMerchantAdditionalInfoNames(permission: String, brandIds: [Int]? = nil, partnerIds: [Int]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfString?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerMerchantGetMerchantAdditionalInfoNamesWithRequestBuilder(permission: permission, brandIds: brandIds, partnerIds: partnerIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1.2/partners/merchants/AdditionalInfoNames
     - parameter permission: (query)  
     - parameter brandIds: (query)  (optional)
     - parameter partnerIds: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfListOfString> 
     */
    open class func partnerMerchantGetMerchantAdditionalInfoNamesWithRequestBuilder(permission: String, brandIds: [Int]? = nil, partnerIds: [Int]? = nil) -> RequestBuilder<ResultModelOfListOfString> {
        let localVariablePath = "/v1.2/partners/merchants/AdditionalInfoNames"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "permission": permission.encodeToJSON(),
            "brandIds": brandIds?.encodeToJSON(),
            "partnerIds": partnerIds?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter permission: (query)  
     - parameter name: (query)  
     - parameter brandIds: (query)  (optional)
     - parameter partnerIds: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerMerchantGetMerchantAdditionalInfoValues(permission: String, name: String, brandIds: [Int]? = nil, partnerIds: [Int]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfString?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerMerchantGetMerchantAdditionalInfoValuesWithRequestBuilder(permission: permission, name: name, brandIds: brandIds, partnerIds: partnerIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1.2/partners/merchants/AdditionalInfoValues
     - parameter permission: (query)  
     - parameter name: (query)  
     - parameter brandIds: (query)  (optional)
     - parameter partnerIds: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfListOfString> 
     */
    open class func partnerMerchantGetMerchantAdditionalInfoValuesWithRequestBuilder(permission: String, name: String, brandIds: [Int]? = nil, partnerIds: [Int]? = nil) -> RequestBuilder<ResultModelOfListOfString> {
        let localVariablePath = "/v1.2/partners/merchants/AdditionalInfoValues"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "permission": permission.encodeToJSON(),
            "name": name.encodeToJSON(),
            "brandIds": brandIds?.encodeToJSON(),
            "partnerIds": partnerIds?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter partnerId: (path)  
     - parameter from: (query)  (optional)
     - parameter count: (query)  (optional)
     - parameter nameSubstring: (query)  (optional)
     - parameter internalNameSubstring: (query)  (optional)
     - parameter brandNameSubstring: (query)  (optional)
     - parameter brandId: (query)  (optional)
     - parameter locationSubstring: (query)  (optional)
     - parameter uids: (query)  (optional)
     - parameter additionalInfoKey: (query)  (optional)
     - parameter additionalInfoValue: (query)  (optional)
     - parameter isOrderedByAscending: (query)  (optional)
     - parameter mode: (query)  (optional)
     - parameter merchantIds: (query)  (optional)
     - parameter sortingIds: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerMerchantGetMerchants(partnerId: Int, from: Int? = nil, count: Int? = nil, nameSubstring: String? = nil, internalNameSubstring: String? = nil, brandNameSubstring: String? = nil, brandId: Int? = nil, locationSubstring: String? = nil, uids: [String]? = nil, additionalInfoKey: String? = nil, additionalInfoValue: String? = nil, isOrderedByAscending: Bool? = nil, mode: ArchivedState? = nil, merchantIds: [Int]? = nil, sortingIds: [Int]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfMerchantLineViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerMerchantGetMerchantsWithRequestBuilder(partnerId: partnerId, from: from, count: count, nameSubstring: nameSubstring, internalNameSubstring: internalNameSubstring, brandNameSubstring: brandNameSubstring, brandId: brandId, locationSubstring: locationSubstring, uids: uids, additionalInfoKey: additionalInfoKey, additionalInfoValue: additionalInfoValue, isOrderedByAscending: isOrderedByAscending, mode: mode, merchantIds: merchantIds, sortingIds: sortingIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1.2/partners/{partnerId}/merchants
     - parameter partnerId: (path)  
     - parameter from: (query)  (optional)
     - parameter count: (query)  (optional)
     - parameter nameSubstring: (query)  (optional)
     - parameter internalNameSubstring: (query)  (optional)
     - parameter brandNameSubstring: (query)  (optional)
     - parameter brandId: (query)  (optional)
     - parameter locationSubstring: (query)  (optional)
     - parameter uids: (query)  (optional)
     - parameter additionalInfoKey: (query)  (optional)
     - parameter additionalInfoValue: (query)  (optional)
     - parameter isOrderedByAscending: (query)  (optional)
     - parameter mode: (query)  (optional)
     - parameter merchantIds: (query)  (optional)
     - parameter sortingIds: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfMerchantLineViewModel> 
     */
    open class func partnerMerchantGetMerchantsWithRequestBuilder(partnerId: Int, from: Int? = nil, count: Int? = nil, nameSubstring: String? = nil, internalNameSubstring: String? = nil, brandNameSubstring: String? = nil, brandId: Int? = nil, locationSubstring: String? = nil, uids: [String]? = nil, additionalInfoKey: String? = nil, additionalInfoValue: String? = nil, isOrderedByAscending: Bool? = nil, mode: ArchivedState? = nil, merchantIds: [Int]? = nil, sortingIds: [Int]? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfMerchantLineViewModel> {
        var localVariablePath = "/v1.2/partners/{partnerId}/merchants"
        let partnerIdPreEscape = "\(APIHelper.mapValueToPathItem(partnerId))"
        let partnerIdPostEscape = partnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{partnerId}", with: partnerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "nameSubstring": nameSubstring?.encodeToJSON(),
            "internalNameSubstring": internalNameSubstring?.encodeToJSON(),
            "brandNameSubstring": brandNameSubstring?.encodeToJSON(),
            "brandId": brandId?.encodeToJSON(),
            "locationSubstring": locationSubstring?.encodeToJSON(),
            "uids": uids?.encodeToJSON(),
            "additionalInfoKey": additionalInfoKey?.encodeToJSON(),
            "additionalInfoValue": additionalInfoValue?.encodeToJSON(),
            "isOrderedByAscending": isOrderedByAscending?.encodeToJSON(),
            "mode": mode?.encodeToJSON(),
            "merchantIds": merchantIds?.encodeToJSON(),
            "sortingIds": sortingIds?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfMerchantLineViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter partnerId: (path)  
     - parameter from: (query)  (optional)
     - parameter count: (query)  (optional)
     - parameter nameSubstring: (query)  (optional)
     - parameter internalNameSubstring: (query)  (optional)
     - parameter brandNameSubstring: (query)  (optional)
     - parameter brandId: (query)  (optional)
     - parameter locationSubstring: (query)  (optional)
     - parameter uids: (query)  (optional)
     - parameter additionalInfoKey: (query)  (optional)
     - parameter additionalInfoValue: (query)  (optional)
     - parameter isOrderedByAscending: (query)  (optional)
     - parameter mode: (query)  (optional)
     - parameter merchantIds: (query)  (optional)
     - parameter sortingIds: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerMerchantGetMerchantsCountByBrand(partnerId: Int, from: Int? = nil, count: Int? = nil, nameSubstring: String? = nil, internalNameSubstring: String? = nil, brandNameSubstring: String? = nil, brandId: Int? = nil, locationSubstring: String? = nil, uids: [String]? = nil, additionalInfoKey: String? = nil, additionalInfoValue: String? = nil, isOrderedByAscending: Bool? = nil, mode: ArchivedState? = nil, merchantIds: [Int]? = nil, sortingIds: [Int]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfBrandLineViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerMerchantGetMerchantsCountByBrandWithRequestBuilder(partnerId: partnerId, from: from, count: count, nameSubstring: nameSubstring, internalNameSubstring: internalNameSubstring, brandNameSubstring: brandNameSubstring, brandId: brandId, locationSubstring: locationSubstring, uids: uids, additionalInfoKey: additionalInfoKey, additionalInfoValue: additionalInfoValue, isOrderedByAscending: isOrderedByAscending, mode: mode, merchantIds: merchantIds, sortingIds: sortingIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1.2/partners/{partnerId}/merchants/ByBrands
     - parameter partnerId: (path)  
     - parameter from: (query)  (optional)
     - parameter count: (query)  (optional)
     - parameter nameSubstring: (query)  (optional)
     - parameter internalNameSubstring: (query)  (optional)
     - parameter brandNameSubstring: (query)  (optional)
     - parameter brandId: (query)  (optional)
     - parameter locationSubstring: (query)  (optional)
     - parameter uids: (query)  (optional)
     - parameter additionalInfoKey: (query)  (optional)
     - parameter additionalInfoValue: (query)  (optional)
     - parameter isOrderedByAscending: (query)  (optional)
     - parameter mode: (query)  (optional)
     - parameter merchantIds: (query)  (optional)
     - parameter sortingIds: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfBrandLineViewModel> 
     */
    open class func partnerMerchantGetMerchantsCountByBrandWithRequestBuilder(partnerId: Int, from: Int? = nil, count: Int? = nil, nameSubstring: String? = nil, internalNameSubstring: String? = nil, brandNameSubstring: String? = nil, brandId: Int? = nil, locationSubstring: String? = nil, uids: [String]? = nil, additionalInfoKey: String? = nil, additionalInfoValue: String? = nil, isOrderedByAscending: Bool? = nil, mode: ArchivedState? = nil, merchantIds: [Int]? = nil, sortingIds: [Int]? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfBrandLineViewModel> {
        var localVariablePath = "/v1.2/partners/{partnerId}/merchants/ByBrands"
        let partnerIdPreEscape = "\(APIHelper.mapValueToPathItem(partnerId))"
        let partnerIdPostEscape = partnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{partnerId}", with: partnerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "nameSubstring": nameSubstring?.encodeToJSON(),
            "internalNameSubstring": internalNameSubstring?.encodeToJSON(),
            "brandNameSubstring": brandNameSubstring?.encodeToJSON(),
            "brandId": brandId?.encodeToJSON(),
            "locationSubstring": locationSubstring?.encodeToJSON(),
            "uids": uids?.encodeToJSON(),
            "additionalInfoKey": additionalInfoKey?.encodeToJSON(),
            "additionalInfoValue": additionalInfoValue?.encodeToJSON(),
            "isOrderedByAscending": isOrderedByAscending?.encodeToJSON(),
            "mode": mode?.encodeToJSON(),
            "merchantIds": merchantIds?.encodeToJSON(),
            "sortingIds": sortingIds?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfBrandLineViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о торговой точке по внешним идентификаторам Партнера и торговой точки.
     
     - parameter partnerUid: (path) Внешний идентификатор Партнера. 
     - parameter merchantUid: (path) Внешний идентификатор торговой точки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerMerchantGetPartnersByPartnerUidMerchantsByMerchantUid(partnerUid: String, merchantUid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfMerchantViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerMerchantGetPartnersByPartnerUidMerchantsByMerchantUidWithRequestBuilder(partnerUid: partnerUid, merchantUid: merchantUid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о торговой точке по внешним идентификаторам Партнера и торговой точки.
     - GET /v1.2/partners/{partnerUid}/merchants/{merchantUid}
     - parameter partnerUid: (path) Внешний идентификатор Партнера. 
     - parameter merchantUid: (path) Внешний идентификатор торговой точки. 
     - returns: RequestBuilder<ResultModelOfMerchantViewModel> 
     */
    open class func partnerMerchantGetPartnersByPartnerUidMerchantsByMerchantUidWithRequestBuilder(partnerUid: String, merchantUid: String) -> RequestBuilder<ResultModelOfMerchantViewModel> {
        var localVariablePath = "/v1.2/partners/{partnerUid}/merchants/{merchantUid}"
        let partnerUidPreEscape = "\(APIHelper.mapValueToPathItem(partnerUid))"
        let partnerUidPostEscape = partnerUidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{partnerUid}", with: partnerUidPostEscape, options: .literal, range: nil)
        let merchantUidPreEscape = "\(APIHelper.mapValueToPathItem(merchantUid))"
        let merchantUidPostEscape = merchantUidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{merchantUid}", with: merchantUidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfMerchantViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию об ограничениях списания бонусов торговой точки.
     
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter merchantId: (path) Внутренний идентификатор торговой точки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerMerchantGetPaymentLimits(partnerId: Int, merchantId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfPaymentLimitViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerMerchantGetPaymentLimitsWithRequestBuilder(partnerId: partnerId, merchantId: merchantId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию об ограничениях списания бонусов торговой точки.
     - GET /v1.2/partners/{partnerId}/merchants/{merchantId}/paymentLimit
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter merchantId: (path) Внутренний идентификатор торговой точки. 
     - returns: RequestBuilder<ResultModelOfListOfPaymentLimitViewModel> 
     */
    open class func partnerMerchantGetPaymentLimitsWithRequestBuilder(partnerId: Int, merchantId: Int) -> RequestBuilder<ResultModelOfListOfPaymentLimitViewModel> {
        var localVariablePath = "/v1.2/partners/{partnerId}/merchants/{merchantId}/paymentLimit"
        let partnerIdPreEscape = "\(APIHelper.mapValueToPathItem(partnerId))"
        let partnerIdPostEscape = partnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{partnerId}", with: partnerIdPostEscape, options: .literal, range: nil)
        let merchantIdPreEscape = "\(APIHelper.mapValueToPathItem(merchantId))"
        let merchantIdPostEscape = merchantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{merchantId}", with: merchantIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfPaymentLimitViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Восстановливает торговую точку из архива.
     
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter merchantId: (path) Внутренний идентификатор торговой точки. 
     - parameter changeCode: (query) Изменить код (true — изменить, false — не изменять). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerMerchantRestore(partnerId: Int, merchantId: Int, changeCode: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerMerchantRestoreWithRequestBuilder(partnerId: partnerId, merchantId: merchantId, changeCode: changeCode).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Восстановливает торговую точку из архива.
     - POST /v1.2/partners/{partnerId}/merchants/{merchantId}/restore
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter merchantId: (path) Внутренний идентификатор торговой точки. 
     - parameter changeCode: (query) Изменить код (true — изменить, false — не изменять). (optional)
     - returns: RequestBuilder<ResultModel> 
     */
    open class func partnerMerchantRestoreWithRequestBuilder(partnerId: Int, merchantId: Int, changeCode: Bool? = nil) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/partners/{partnerId}/merchants/{merchantId}/restore"
        let partnerIdPreEscape = "\(APIHelper.mapValueToPathItem(partnerId))"
        let partnerIdPostEscape = partnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{partnerId}", with: partnerIdPostEscape, options: .literal, range: nil)
        let merchantIdPreEscape = "\(APIHelper.mapValueToPathItem(merchantId))"
        let merchantIdPostEscape = merchantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{merchantId}", with: merchantIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "changeCode": changeCode?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
