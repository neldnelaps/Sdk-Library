//
// HistoryAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class HistoryAPI {

    /**
     Возвращает список товаров за указанный период времени (OAuth).
     
     - parameter fromDate: (query) Начальная дата периода в формате 0000-00-00T00:00:00Z. 
     - parameter toDate: (query) Конечная дата периода в формате 0000-00-00T00:00:00Z. 
     - parameter brandUid: (query) Внешний идентификатор бренда. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func historyGetGoodsIds(fromDate: String, toDate: String, brandUid: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfString?, _ error: Error?) -> Void)) -> RequestTask {
        return historyGetGoodsIdsWithRequestBuilder(fromDate: fromDate, toDate: toDate, brandUid: brandUid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список товаров за указанный период времени (OAuth).
     - GET /v1.2/History/GoodsIds
     - parameter fromDate: (query) Начальная дата периода в формате 0000-00-00T00:00:00Z. 
     - parameter toDate: (query) Конечная дата периода в формате 0000-00-00T00:00:00Z. 
     - parameter brandUid: (query) Внешний идентификатор бренда. (optional)
     - returns: RequestBuilder<ResultModelOfListOfString> 
     */
    open class func historyGetGoodsIdsWithRequestBuilder(fromDate: String, toDate: String, brandUid: String? = nil) -> RequestBuilder<ResultModelOfListOfString> {
        let localVariablePath = "/v1.2/History/GoodsIds"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fromDate": fromDate.encodeToJSON(),
            "toDate": toDate.encodeToJSON(),
            "brandUid": brandUid?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает историю операций клиента (OAuth).
     
     - parameter filterFromDate: (query) Начальная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterToDate: (query) Конечная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterCardId: (query) Внутренний идентификатор карты. Возвращает историю только по этой карте. (optional)
     - parameter filterFrom: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter filterCount: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterHistoryItemType: (query) Тип события в истории. Возможные значения  All-все события, Purchase-события, связанные с покупкой, RewardData-события, связанные с начислением бонусов без покупки, WithdrawData-события, связанные со списанием бонусов без покупки. {Loymax.Mobile.Contract.Models.History.HistoryFilter.HistoryItemType}. (optional)
     - parameter filterChequeNumber: (query) Номер чека. (optional)
     - parameter filterOperationTypes: (query) Типы операций. (optional)
     - parameter filterCurrentUser: (query) По текущему клиенту (true), по группе клиентов (false). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func historyGetHistory(filterFromDate: String? = nil, filterToDate: String? = nil, filterCardId: Int? = nil, filterFrom: Int? = nil, filterCount: Int? = nil, filterHistoryItemType: HistoryItemType? = nil, filterChequeNumber: String? = nil, filterOperationTypes: [HistoryItemOperationType]? = nil, filterCurrentUser: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfHistoryListModel?, _ error: Error?) -> Void)) -> RequestTask {
        return historyGetHistoryWithRequestBuilder(filterFromDate: filterFromDate, filterToDate: filterToDate, filterCardId: filterCardId, filterFrom: filterFrom, filterCount: filterCount, filterHistoryItemType: filterHistoryItemType, filterChequeNumber: filterChequeNumber, filterOperationTypes: filterOperationTypes, filterCurrentUser: filterCurrentUser).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает историю операций клиента (OAuth).
     - GET /v1.2/History
     - parameter filterFromDate: (query) Начальная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterToDate: (query) Конечная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterCardId: (query) Внутренний идентификатор карты. Возвращает историю только по этой карте. (optional)
     - parameter filterFrom: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter filterCount: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterHistoryItemType: (query) Тип события в истории. Возможные значения  All-все события, Purchase-события, связанные с покупкой, RewardData-события, связанные с начислением бонусов без покупки, WithdrawData-события, связанные со списанием бонусов без покупки. {Loymax.Mobile.Contract.Models.History.HistoryFilter.HistoryItemType}. (optional)
     - parameter filterChequeNumber: (query) Номер чека. (optional)
     - parameter filterOperationTypes: (query) Типы операций. (optional)
     - parameter filterCurrentUser: (query) По текущему клиенту (true), по группе клиентов (false). (optional)
     - returns: RequestBuilder<ResultModelOfHistoryListModel> 
     */
    open class func historyGetHistoryWithRequestBuilder(filterFromDate: String? = nil, filterToDate: String? = nil, filterCardId: Int? = nil, filterFrom: Int? = nil, filterCount: Int? = nil, filterHistoryItemType: HistoryItemType? = nil, filterChequeNumber: String? = nil, filterOperationTypes: [HistoryItemOperationType]? = nil, filterCurrentUser: Bool? = nil) -> RequestBuilder<ResultModelOfHistoryListModel> {
        let localVariablePath = "/v1.2/History"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.fromDate": filterFromDate?.encodeToJSON(),
            "filter.toDate": filterToDate?.encodeToJSON(),
            "filter.cardId": filterCardId?.encodeToJSON(),
            "filter.from": filterFrom?.encodeToJSON(),
            "filter.count": filterCount?.encodeToJSON(),
            "filter.historyItemType": filterHistoryItemType?.encodeToJSON(),
            "filter.chequeNumber": filterChequeNumber?.encodeToJSON(),
            "filter.operationTypes": filterOperationTypes?.encodeToJSON(),
            "filter.currentUser": filterCurrentUser?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfHistoryListModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает сумму покупок, сумму начисленных и списанных бонусов в рамках покупок (OAuth).
     
     - parameter filterFromDate: (query) Начальная дата периода в формате 0000-00-00T00 00 00Z, с которой необходимо вывести историю. (optional)
     - parameter filterToDate: (query) Конечная дата периода в формате 0000-00-00T00 00 00Z, до которой необходимо вывести историю. (optional)
     - parameter filterCardId: (query) Внутренний идентификатор карты (будет получена история только по этой карте). (optional)
     - parameter filterHistoryItemType: (query) Тип события в истории. Возможные значения  All-все события, Purchase-события, связанные с покупкой, RewardData-события, связанные с начислением бонусов без покупки, WithdrawData-события, связанные со списанием бонусов без покупки. {Loymax.Mobile.Contract.Models.History.AggregateHistoryFilter.HistoryItemType}. (optional)
     - parameter filterCurrentUser: (query) По текущему клиенту (true), по группе клиента (false). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func historyGetHistoryAggregateWithdrawRewardPurchase(filterFromDate: String? = nil, filterToDate: String? = nil, filterCardId: Int? = nil, filterHistoryItemType: HistoryItemType? = nil, filterCurrentUser: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfHistoryAggregateWithdrawRewardModel?, _ error: Error?) -> Void)) -> RequestTask {
        return historyGetHistoryAggregateWithdrawRewardPurchaseWithRequestBuilder(filterFromDate: filterFromDate, filterToDate: filterToDate, filterCardId: filterCardId, filterHistoryItemType: filterHistoryItemType, filterCurrentUser: filterCurrentUser).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает сумму покупок, сумму начисленных и списанных бонусов в рамках покупок (OAuth).
     - GET /v1.2/History/AggregateWithdrawRewardPurchase
     - parameter filterFromDate: (query) Начальная дата периода в формате 0000-00-00T00 00 00Z, с которой необходимо вывести историю. (optional)
     - parameter filterToDate: (query) Конечная дата периода в формате 0000-00-00T00 00 00Z, до которой необходимо вывести историю. (optional)
     - parameter filterCardId: (query) Внутренний идентификатор карты (будет получена история только по этой карте). (optional)
     - parameter filterHistoryItemType: (query) Тип события в истории. Возможные значения  All-все события, Purchase-события, связанные с покупкой, RewardData-события, связанные с начислением бонусов без покупки, WithdrawData-события, связанные со списанием бонусов без покупки. {Loymax.Mobile.Contract.Models.History.AggregateHistoryFilter.HistoryItemType}. (optional)
     - parameter filterCurrentUser: (query) По текущему клиенту (true), по группе клиента (false). (optional)
     - returns: RequestBuilder<ResultModelOfHistoryAggregateWithdrawRewardModel> 
     */
    open class func historyGetHistoryAggregateWithdrawRewardPurchaseWithRequestBuilder(filterFromDate: String? = nil, filterToDate: String? = nil, filterCardId: Int? = nil, filterHistoryItemType: HistoryItemType? = nil, filterCurrentUser: Bool? = nil) -> RequestBuilder<ResultModelOfHistoryAggregateWithdrawRewardModel> {
        let localVariablePath = "/v1.2/History/AggregateWithdrawRewardPurchase"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.fromDate": filterFromDate?.encodeToJSON(),
            "filter.toDate": filterToDate?.encodeToJSON(),
            "filter.cardId": filterCardId?.encodeToJSON(),
            "filter.historyItemType": filterHistoryItemType?.encodeToJSON(),
            "filter.currentUser": filterCurrentUser?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfHistoryAggregateWithdrawRewardModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает сумму покупок, сумму начисленных и списанных бонусов в рамках покупок.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter filterFromDate: (query) Начальная дата периода в формате 0000-00-00T00 00 00Z, с которой необходимо вывести историю. (optional)
     - parameter filterToDate: (query) Конечная дата периода в формате 0000-00-00T00 00 00Z, до которой необходимо вывести историю. (optional)
     - parameter filterCardId: (query) Внутренний идентификатор карты (будет получена история только по этой карте). (optional)
     - parameter filterHistoryItemType: (query) Тип события в истории. Возможные значения  All-все события, Purchase-события, связанные с покупкой, RewardData-события, связанные с начислением бонусов без покупки, WithdrawData-события, связанные со списанием бонусов без покупки. {Loymax.Mobile.Contract.Models.History.AggregateHistoryFilter.HistoryItemType}. (optional)
     - parameter filterCurrentUser: (query) По текущему клиенту (true), по группе клиента (false). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func historyGetHistoryAggregateWithdrawRewardPurchaseByPerson(personId: Int, filterFromDate: String? = nil, filterToDate: String? = nil, filterCardId: Int? = nil, filterHistoryItemType: HistoryItemType? = nil, filterCurrentUser: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfHistoryAggregateWithdrawRewardModel?, _ error: Error?) -> Void)) -> RequestTask {
        return historyGetHistoryAggregateWithdrawRewardPurchaseByPersonWithRequestBuilder(personId: personId, filterFromDate: filterFromDate, filterToDate: filterToDate, filterCardId: filterCardId, filterHistoryItemType: filterHistoryItemType, filterCurrentUser: filterCurrentUser).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает сумму покупок, сумму начисленных и списанных бонусов в рамках покупок.
     - GET /v1.2/Users/{personId}/History/AggregateWithdrawRewardPurchase
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter filterFromDate: (query) Начальная дата периода в формате 0000-00-00T00 00 00Z, с которой необходимо вывести историю. (optional)
     - parameter filterToDate: (query) Конечная дата периода в формате 0000-00-00T00 00 00Z, до которой необходимо вывести историю. (optional)
     - parameter filterCardId: (query) Внутренний идентификатор карты (будет получена история только по этой карте). (optional)
     - parameter filterHistoryItemType: (query) Тип события в истории. Возможные значения  All-все события, Purchase-события, связанные с покупкой, RewardData-события, связанные с начислением бонусов без покупки, WithdrawData-события, связанные со списанием бонусов без покупки. {Loymax.Mobile.Contract.Models.History.AggregateHistoryFilter.HistoryItemType}. (optional)
     - parameter filterCurrentUser: (query) По текущему клиенту (true), по группе клиента (false). (optional)
     - returns: RequestBuilder<ResultModelOfHistoryAggregateWithdrawRewardModel> 
     */
    open class func historyGetHistoryAggregateWithdrawRewardPurchaseByPersonWithRequestBuilder(personId: Int, filterFromDate: String? = nil, filterToDate: String? = nil, filterCardId: Int? = nil, filterHistoryItemType: HistoryItemType? = nil, filterCurrentUser: Bool? = nil) -> RequestBuilder<ResultModelOfHistoryAggregateWithdrawRewardModel> {
        var localVariablePath = "/v1.2/Users/{personId}/History/AggregateWithdrawRewardPurchase"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.fromDate": filterFromDate?.encodeToJSON(),
            "filter.toDate": filterToDate?.encodeToJSON(),
            "filter.cardId": filterCardId?.encodeToJSON(),
            "filter.historyItemType": filterHistoryItemType?.encodeToJSON(),
            "filter.currentUser": filterCurrentUser?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfHistoryAggregateWithdrawRewardModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает историю операций клиента.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter filterFromDate: (query) Дата с которой необходимо вывести историю. (optional)
     - parameter filterToDate: (query) Дата до которой необходимо вывести историю. (optional)
     - parameter filterCardId: (query) ID карты. Если указан, то будет получена история только по этой карте. (optional)
     - parameter filterFrom: (query) Начиная с какого элемента необходимо выводить. (optional)
     - parameter filterCount: (query) Кол-во элементов для вывода. (optional)
     - parameter filterHistoryItemType: (query) Тип события в истории {Loymax.Mobile.Contract.Models.History.HistoryFilterV13.HistoryItemType}. (optional)
     - parameter filterChequeNumber: (query) Номер чека. (optional)
     - parameter filterOperationTypes: (query) Типы операций с указанием покупка или возврат. (optional)
     - parameter filterCurrentUser: (query) По текущему пользователю, или по группе пользователя. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func historyGetHistoryByPerson(personId: Int, filterFromDate: String? = nil, filterToDate: String? = nil, filterCardId: Int? = nil, filterFrom: Int? = nil, filterCount: Int? = nil, filterHistoryItemType: HistoryItemType? = nil, filterChequeNumber: String? = nil, filterOperationTypes: [String]? = nil, filterCurrentUser: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfHistoryListModel?, _ error: Error?) -> Void)) -> RequestTask {
        return historyGetHistoryByPersonWithRequestBuilder(personId: personId, filterFromDate: filterFromDate, filterToDate: filterToDate, filterCardId: filterCardId, filterFrom: filterFrom, filterCount: filterCount, filterHistoryItemType: filterHistoryItemType, filterChequeNumber: filterChequeNumber, filterOperationTypes: filterOperationTypes, filterCurrentUser: filterCurrentUser).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает историю операций клиента.
     - GET /v1.2/Users/{personId}/History
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter filterFromDate: (query) Дата с которой необходимо вывести историю. (optional)
     - parameter filterToDate: (query) Дата до которой необходимо вывести историю. (optional)
     - parameter filterCardId: (query) ID карты. Если указан, то будет получена история только по этой карте. (optional)
     - parameter filterFrom: (query) Начиная с какого элемента необходимо выводить. (optional)
     - parameter filterCount: (query) Кол-во элементов для вывода. (optional)
     - parameter filterHistoryItemType: (query) Тип события в истории {Loymax.Mobile.Contract.Models.History.HistoryFilterV13.HistoryItemType}. (optional)
     - parameter filterChequeNumber: (query) Номер чека. (optional)
     - parameter filterOperationTypes: (query) Типы операций с указанием покупка или возврат. (optional)
     - parameter filterCurrentUser: (query) По текущему пользователю, или по группе пользователя. (optional)
     - returns: RequestBuilder<ResultModelOfHistoryListModel> 
     */
    open class func historyGetHistoryByPersonWithRequestBuilder(personId: Int, filterFromDate: String? = nil, filterToDate: String? = nil, filterCardId: Int? = nil, filterFrom: Int? = nil, filterCount: Int? = nil, filterHistoryItemType: HistoryItemType? = nil, filterChequeNumber: String? = nil, filterOperationTypes: [String]? = nil, filterCurrentUser: Bool? = nil) -> RequestBuilder<ResultModelOfHistoryListModel> {
        var localVariablePath = "/v1.2/Users/{personId}/History"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.fromDate": filterFromDate?.encodeToJSON(),
            "filter.toDate": filterToDate?.encodeToJSON(),
            "filter.cardId": filterCardId?.encodeToJSON(),
            "filter.from": filterFrom?.encodeToJSON(),
            "filter.count": filterCount?.encodeToJSON(),
            "filter.historyItemType": filterHistoryItemType?.encodeToJSON(),
            "filter.chequeNumber": filterChequeNumber?.encodeToJSON(),
            "filter.operationTypes": filterOperationTypes?.encodeToJSON(),
            "filter.currentUser": filterCurrentUser?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfHistoryListModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Отправляет историю операций клиенту по email.
     
     - parameter filterFromDate: (query) Начальная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterToDate: (query) Конечная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterCardId: (query) Внутренний идентификатор карты. Возвращает историю только по этой карте. (optional)
     - parameter filterFrom: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter filterCount: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterHistoryItemType: (query) Тип события в истории. Возможные значения  All-все события, Purchase-события, связанные с покупкой, RewardData-события, связанные с начислением бонусов без покупки, WithdrawData-события, связанные со списанием бонусов без покупки. {Loymax.Mobile.Contract.Models.History.HistoryFilter.HistoryItemType}. (optional)
     - parameter filterChequeNumber: (query) Номер чека. (optional)
     - parameter filterOperationTypes: (query) Типы операций. (optional)
     - parameter filterCurrentUser: (query) По текущему клиенту (true), по группе клиентов (false). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func historySendHistoryToEmail(filterFromDate: String? = nil, filterToDate: String? = nil, filterCardId: Int? = nil, filterFrom: Int? = nil, filterCount: Int? = nil, filterHistoryItemType: HistoryItemType? = nil, filterChequeNumber: String? = nil, filterOperationTypes: [HistoryItemOperationType]? = nil, filterCurrentUser: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return historySendHistoryToEmailWithRequestBuilder(filterFromDate: filterFromDate, filterToDate: filterToDate, filterCardId: filterCardId, filterFrom: filterFrom, filterCount: filterCount, filterHistoryItemType: filterHistoryItemType, filterChequeNumber: filterChequeNumber, filterOperationTypes: filterOperationTypes, filterCurrentUser: filterCurrentUser).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Отправляет историю операций клиенту по email.
     - PUT /v1.2/History/SendToEmail
     - parameter filterFromDate: (query) Начальная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterToDate: (query) Конечная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterCardId: (query) Внутренний идентификатор карты. Возвращает историю только по этой карте. (optional)
     - parameter filterFrom: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter filterCount: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterHistoryItemType: (query) Тип события в истории. Возможные значения  All-все события, Purchase-события, связанные с покупкой, RewardData-события, связанные с начислением бонусов без покупки, WithdrawData-события, связанные со списанием бонусов без покупки. {Loymax.Mobile.Contract.Models.History.HistoryFilter.HistoryItemType}. (optional)
     - parameter filterChequeNumber: (query) Номер чека. (optional)
     - parameter filterOperationTypes: (query) Типы операций. (optional)
     - parameter filterCurrentUser: (query) По текущему клиенту (true), по группе клиентов (false). (optional)
     - returns: RequestBuilder<ResultModel> 
     */
    open class func historySendHistoryToEmailWithRequestBuilder(filterFromDate: String? = nil, filterToDate: String? = nil, filterCardId: Int? = nil, filterFrom: Int? = nil, filterCount: Int? = nil, filterHistoryItemType: HistoryItemType? = nil, filterChequeNumber: String? = nil, filterOperationTypes: [HistoryItemOperationType]? = nil, filterCurrentUser: Bool? = nil) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/History/SendToEmail"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.fromDate": filterFromDate?.encodeToJSON(),
            "filter.toDate": filterToDate?.encodeToJSON(),
            "filter.cardId": filterCardId?.encodeToJSON(),
            "filter.from": filterFrom?.encodeToJSON(),
            "filter.count": filterCount?.encodeToJSON(),
            "filter.historyItemType": filterHistoryItemType?.encodeToJSON(),
            "filter.chequeNumber": filterChequeNumber?.encodeToJSON(),
            "filter.operationTypes": filterOperationTypes?.encodeToJSON(),
            "filter.currentUser": filterCurrentUser?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
