//
// GoodsGroupImportExportAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class GoodsGroupImportExportAPI {

    /**
     Экспортировать группу товаров по Id.
     
     - parameter goodsGroupId: (path) Id группы товаров. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func goodsGroupImportExportExportGoodsGroup(goodsGroupId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return goodsGroupImportExportExportGoodsGroupWithRequestBuilder(goodsGroupId: goodsGroupId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Экспортировать группу товаров по Id.
     - GET /v1.2/goodsGroups/{goodsGroupId}/Export
     - parameter goodsGroupId: (path) Id группы товаров. 
     - returns: RequestBuilder<String> 
     */
    open class func goodsGroupImportExportExportGoodsGroupWithRequestBuilder(goodsGroupId: Int) -> RequestBuilder<String> {
        var localVariablePath = "/v1.2/goodsGroups/{goodsGroupId}/Export"
        let goodsGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(goodsGroupId))"
        let goodsGroupIdPostEscape = goodsGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{goodsGroupId}", with: goodsGroupIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Экспортировать группы товаров.
     
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter creatorIds: (query)  (optional)
     - parameter partnerIds: (query)  (optional)
     - parameter archivedShowMode: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter dateFromLastChange: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func goodsGroupImportExportExportGoodsGroups(from: Int? = nil, count: Int? = nil, dateFrom: String? = nil, dateTo: String? = nil, creatorIds: String? = nil, partnerIds: String? = nil, archivedShowMode: ArchivedState? = nil, name: String? = nil, dateFromLastChange: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return goodsGroupImportExportExportGoodsGroupsWithRequestBuilder(from: from, count: count, dateFrom: dateFrom, dateTo: dateTo, creatorIds: creatorIds, partnerIds: partnerIds, archivedShowMode: archivedShowMode, name: name, dateFromLastChange: dateFromLastChange).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Экспортировать группы товаров.
     - GET /v1.2/goodsGroups/Export
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter creatorIds: (query)  (optional)
     - parameter partnerIds: (query)  (optional)
     - parameter archivedShowMode: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter dateFromLastChange: (query)  (optional)
     - returns: RequestBuilder<String> 
     */
    open class func goodsGroupImportExportExportGoodsGroupsWithRequestBuilder(from: Int? = nil, count: Int? = nil, dateFrom: String? = nil, dateTo: String? = nil, creatorIds: String? = nil, partnerIds: String? = nil, archivedShowMode: ArchivedState? = nil, name: String? = nil, dateFromLastChange: String? = nil) -> RequestBuilder<String> {
        let localVariablePath = "/v1.2/goodsGroups/Export"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "dateFrom": dateFrom?.encodeToJSON(),
            "dateTo": dateTo?.encodeToJSON(),
            "creatorIds": creatorIds?.encodeToJSON(),
            "partnerIds": partnerIds?.encodeToJSON(),
            "archivedShowMode": archivedShowMode?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "dateFromLastChange": dateFromLastChange?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Импортировать группы товаров.
     
     - parameter importModel: (query) Модель импортируемых групп товаров. 
     - parameter rewriteExisting: (query) Перезаписать ли существующую ГТ. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func goodsGroupImportExportImportGoodsGroups(importModel: GoodsGroupsImportModel, rewriteExisting: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfGoodsGroupsImportResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return goodsGroupImportExportImportGoodsGroupsWithRequestBuilder(importModel: importModel, rewriteExisting: rewriteExisting).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Импортировать группы товаров.
     - POST /v1.2/goodsGroups/Import
     - parameter importModel: (query) Модель импортируемых групп товаров. 
     - parameter rewriteExisting: (query) Перезаписать ли существующую ГТ. (optional)
     - returns: RequestBuilder<ResultModelOfGoodsGroupsImportResponse> 
     */
    open class func goodsGroupImportExportImportGoodsGroupsWithRequestBuilder(importModel: GoodsGroupsImportModel, rewriteExisting: Bool? = nil) -> RequestBuilder<ResultModelOfGoodsGroupsImportResponse> {
        let localVariablePath = "/v1.2/goodsGroups/Import"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "importModel": importModel.encodeToJSON(),
            "rewriteExisting": rewriteExisting?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfGoodsGroupsImportResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
