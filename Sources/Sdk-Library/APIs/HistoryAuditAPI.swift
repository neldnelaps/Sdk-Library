//
// HistoryAuditAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class HistoryAuditAPI {

    /**
     Получить аудит по идентификатору.
     
     - parameter id: (path) Идентификатор. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func historyAuditGetAuditById(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfHistoryAuditViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return historyAuditGetAuditByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить аудит по идентификатору.
     - GET /v1.2/audits/{id}
     - parameter id: (path) Идентификатор. 
     - returns: RequestBuilder<ResultModelOfHistoryAuditViewModel> 
     */
    open class func historyAuditGetAuditByIdWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfHistoryAuditViewModel> {
        var localVariablePath = "/v1.2/audits/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfHistoryAuditViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить аудиты.
     
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterCardNumber: (query)  (optional)
     - parameter filterAuditTypes: (query)  (optional)
     - parameter filterPersonId: (query)  (optional)
     - parameter filterIsUser: (query)  (optional)
     - parameter filterClientAuditsRequired: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func historyAuditGetAudits(from: Int? = nil, count: Int? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterCardNumber: String? = nil, filterAuditTypes: [String]? = nil, filterPersonId: Int? = nil, filterIsUser: Bool? = nil, filterClientAuditsRequired: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfHistoryAuditViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return historyAuditGetAuditsWithRequestBuilder(from: from, count: count, filterDateFrom: filterDateFrom, filterDateTo: filterDateTo, filterCardNumber: filterCardNumber, filterAuditTypes: filterAuditTypes, filterPersonId: filterPersonId, filterIsUser: filterIsUser, filterClientAuditsRequired: filterClientAuditsRequired).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить аудиты.
     - GET /v1.2/audits
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterCardNumber: (query)  (optional)
     - parameter filterAuditTypes: (query)  (optional)
     - parameter filterPersonId: (query)  (optional)
     - parameter filterIsUser: (query)  (optional)
     - parameter filterClientAuditsRequired: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfHistoryAuditViewModel> 
     */
    open class func historyAuditGetAuditsWithRequestBuilder(from: Int? = nil, count: Int? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterCardNumber: String? = nil, filterAuditTypes: [String]? = nil, filterPersonId: Int? = nil, filterIsUser: Bool? = nil, filterClientAuditsRequired: Bool? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfHistoryAuditViewModel> {
        let localVariablePath = "/v1.2/audits"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.dateFrom": filterDateFrom?.encodeToJSON(),
            "filter.dateTo": filterDateTo?.encodeToJSON(),
            "filter.cardNumber": filterCardNumber?.encodeToJSON(),
            "filter.auditTypes": filterAuditTypes?.encodeToJSON(),
            "filter.personId": filterPersonId?.encodeToJSON(),
            "filter.isUser": filterIsUser?.encodeToJSON(),
            "filter.clientAuditsRequired": filterClientAuditsRequired?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfHistoryAuditViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
