//
// PayTypeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PayTypeAPI {

    /**
     Получить список всех способов оплаты.
     
     - parameter payTypeFilterName: (query) Название типа оплаты. (optional)
     - parameter payTypeFilterCount: (query) Количество элементов в выборке. (optional)
     - parameter payTypeFilterFrom: (query) С какого элемента начать выборку. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func payTypeGetList(payTypeFilterName: String? = nil, payTypeFilterCount: Int? = nil, payTypeFilterFrom: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfPayTypeViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return payTypeGetListWithRequestBuilder(payTypeFilterName: payTypeFilterName, payTypeFilterCount: payTypeFilterCount, payTypeFilterFrom: payTypeFilterFrom).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить список всех способов оплаты.
     - GET /v1.2/payType
     - parameter payTypeFilterName: (query) Название типа оплаты. (optional)
     - parameter payTypeFilterCount: (query) Количество элементов в выборке. (optional)
     - parameter payTypeFilterFrom: (query) С какого элемента начать выборку. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfPayTypeViewModel> 
     */
    open class func payTypeGetListWithRequestBuilder(payTypeFilterName: String? = nil, payTypeFilterCount: Int? = nil, payTypeFilterFrom: Int? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfPayTypeViewModel> {
        let localVariablePath = "/v1.2/payType"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "payTypeFilter.name": payTypeFilterName?.encodeToJSON(),
            "payTypeFilter.count": payTypeFilterCount?.encodeToJSON(),
            "payTypeFilter.from": payTypeFilterFrom?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfPayTypeViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получение информации по типу оплаты.
     
     - parameter id: (path) Идентификатор типа оплаты. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func payTypeGetPayType(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPayTypeViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return payTypeGetPayTypeWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получение информации по типу оплаты.
     - GET /v1.2/payType/{id}
     - parameter id: (path) Идентификатор типа оплаты. 
     - returns: RequestBuilder<ResultModelOfPayTypeViewModel> 
     */
    open class func payTypeGetPayTypeWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfPayTypeViewModel> {
        var localVariablePath = "/v1.2/payType/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPayTypeViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Восстановление способа оплаты.
     
     - parameter id: (path) Id способа оплаты. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func payTypeRecoverPayType(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return payTypeRecoverPayTypeWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Восстановление способа оплаты.
     - POST /v1.2/payType/{id}/recover
     - parameter id: (path) Id способа оплаты. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func payTypeRecoverPayTypeWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/payType/{id}/recover"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
