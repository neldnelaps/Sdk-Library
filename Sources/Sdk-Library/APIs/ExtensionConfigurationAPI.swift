//
// ExtensionConfigurationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ExtensionConfigurationAPI {

    /**
     Получить конфигурацию плагина по его ID.
     
     - parameter extensionId: (path) Id плагина. 
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterSearchedKey: (query) Ключ. (optional)
     - parameter filterSearchedValue: (query) Значение. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func extensionConfigurationGetByExtensionId(extensionId: Int, from: Int? = nil, count: Int? = nil, filterSearchedKey: String? = nil, filterSearchedValue: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfExtensionConfigurationViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return extensionConfigurationGetByExtensionIdWithRequestBuilder(extensionId: extensionId, from: from, count: count, filterSearchedKey: filterSearchedKey, filterSearchedValue: filterSearchedValue).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить конфигурацию плагина по его ID.
     - GET /v1.2/extensions/{extensionId}/configurations
     - parameter extensionId: (path) Id плагина. 
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterSearchedKey: (query) Ключ. (optional)
     - parameter filterSearchedValue: (query) Значение. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfExtensionConfigurationViewModel> 
     */
    open class func extensionConfigurationGetByExtensionIdWithRequestBuilder(extensionId: Int, from: Int? = nil, count: Int? = nil, filterSearchedKey: String? = nil, filterSearchedValue: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfExtensionConfigurationViewModel> {
        var localVariablePath = "/v1.2/extensions/{extensionId}/configurations"
        let extensionIdPreEscape = "\(APIHelper.mapValueToPathItem(extensionId))"
        let extensionIdPostEscape = extensionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{extensionId}", with: extensionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.searchedKey": filterSearchedKey?.encodeToJSON(),
            "filter.searchedValue": filterSearchedValue?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfExtensionConfigurationViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить конфигурацию плагина по ID.
     
     - parameter extensionId: (path) Id плагина. 
     - parameter id: (path) Id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func extensionConfigurationGetByExtensionIdAndKey(extensionId: Int, id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfExtensionConfigurationViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return extensionConfigurationGetByExtensionIdAndKeyWithRequestBuilder(extensionId: extensionId, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить конфигурацию плагина по ID.
     - GET /v1.2/extensions/{extensionId}/configurations/{id}
     - parameter extensionId: (path) Id плагина. 
     - parameter id: (path) Id. 
     - returns: RequestBuilder<ResultModelOfExtensionConfigurationViewModel> 
     */
    open class func extensionConfigurationGetByExtensionIdAndKeyWithRequestBuilder(extensionId: Int, id: Int) -> RequestBuilder<ResultModelOfExtensionConfigurationViewModel> {
        var localVariablePath = "/v1.2/extensions/{extensionId}/configurations/{id}"
        let extensionIdPreEscape = "\(APIHelper.mapValueToPathItem(extensionId))"
        let extensionIdPostEscape = extensionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{extensionId}", with: extensionIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfExtensionConfigurationViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
