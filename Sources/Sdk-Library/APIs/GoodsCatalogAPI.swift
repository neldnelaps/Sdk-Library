//
// GoodsCatalogAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class GoodsCatalogAPI {

    /**
     Получить информацию об элементе в каталоге.
     
     - parameter catalogItemId: (path) Id элемента. 
     - parameter partnerId: (query) Id партнера. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func goodsCatalogGetCatalogItemInfo(catalogItemId: Int, partnerId: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfGoodsCatalogLeafViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return goodsCatalogGetCatalogItemInfoWithRequestBuilder(catalogItemId: catalogItemId, partnerId: partnerId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить информацию об элементе в каталоге.
     - GET /v1.2/goodsCatalog/info/{catalogItemId}
     - parameter catalogItemId: (path) Id элемента. 
     - parameter partnerId: (query) Id партнера. (optional)
     - returns: RequestBuilder<ResultModelOfGoodsCatalogLeafViewModel> 
     */
    open class func goodsCatalogGetCatalogItemInfoWithRequestBuilder(catalogItemId: Int, partnerId: Int? = nil) -> RequestBuilder<ResultModelOfGoodsCatalogLeafViewModel> {
        var localVariablePath = "/v1.2/goodsCatalog/info/{catalogItemId}"
        let catalogItemIdPreEscape = "\(APIHelper.mapValueToPathItem(catalogItemId))"
        let catalogItemIdPostEscape = catalogItemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{catalogItemId}", with: catalogItemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "partnerId": partnerId?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfGoodsCatalogLeafViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить каталог товаров.
     
     - parameter partnerId: (query) Id партнера. 
     - parameter catalogId: (query) Id каtалога. (optional)
     - parameter parentNodeId: (query) Id родительского узла. (optional)
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterSearchedText: (query) Значение параметра товара. (optional)
     - parameter filterSearchParameter: (query) Параметр товара, по которому выполняется поиск (Name - название, ItemID - внутренний идентификатор, BarCode - штрихкод). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func goodsCatalogGetGoodsCatalog(partnerId: Int, catalogId: Int? = nil, parentNodeId: Int? = nil, from: Int? = nil, count: Int? = nil, filterSearchedText: String? = nil, filterSearchParameter: GoodsCatalogSearchParameter? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfGoodsCatalogBaseViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return goodsCatalogGetGoodsCatalogWithRequestBuilder(partnerId: partnerId, catalogId: catalogId, parentNodeId: parentNodeId, from: from, count: count, filterSearchedText: filterSearchedText, filterSearchParameter: filterSearchParameter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить каталог товаров.
     - GET /v1.2/goodsCatalog
     - parameter partnerId: (query) Id партнера. 
     - parameter catalogId: (query) Id каtалога. (optional)
     - parameter parentNodeId: (query) Id родительского узла. (optional)
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterSearchedText: (query) Значение параметра товара. (optional)
     - parameter filterSearchParameter: (query) Параметр товара, по которому выполняется поиск (Name - название, ItemID - внутренний идентификатор, BarCode - штрихкод). (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfGoodsCatalogBaseViewModel> 
     */
    open class func goodsCatalogGetGoodsCatalogWithRequestBuilder(partnerId: Int, catalogId: Int? = nil, parentNodeId: Int? = nil, from: Int? = nil, count: Int? = nil, filterSearchedText: String? = nil, filterSearchParameter: GoodsCatalogSearchParameter? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfGoodsCatalogBaseViewModel> {
        let localVariablePath = "/v1.2/goodsCatalog"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "partnerId": partnerId.encodeToJSON(),
            "catalogId": catalogId?.encodeToJSON(),
            "parentNodeId": parentNodeId?.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.searchedText": filterSearchedText?.encodeToJSON(),
            "filter.searchParameter": filterSearchParameter?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfGoodsCatalogBaseViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
