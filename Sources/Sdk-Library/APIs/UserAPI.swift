//
// UserAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UserAPI {

    /**
     Возвращает информацию о том, куплен ли каждый из товаров (OAuth).
     
     - parameter goodsIds: (query) Список внешних идентификаторов товаров (не более двух, через запятую). 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userCheckBoughtList(goodsIds: CheckBoughtListModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfCheckBoughtListResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userCheckBoughtListWithRequestBuilder(goodsIds: goodsIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о том, куплен ли каждый из товаров (OAuth).
     - POST /v1.2/User/CheckBoughtList
     - parameter goodsIds: (query) Список внешних идентификаторов товаров (не более двух, через запятую). 
     - returns: RequestBuilder<ResultModelOfListOfCheckBoughtListResultModel> 
     */
    open class func userCheckBoughtListWithRequestBuilder(goodsIds: CheckBoughtListModel) -> RequestBuilder<ResultModelOfListOfCheckBoughtListResultModel> {
        let localVariablePath = "/v1.2/User/CheckBoughtList"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "goodsIds": goodsIds.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfCheckBoughtListResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Оформляет выход из Программы лояльности.
     
     - parameter model: (query) Модель с параметрами. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userConfirmDeregistration(model: ConfirmDeregistrationModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userConfirmDeregistrationWithRequestBuilder(model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Оформляет выход из Программы лояльности.
     - POST /v1.2/User/Deregistration/Confirm
     - parameter model: (query) Модель с параметрами. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func userConfirmDeregistrationWithRequestBuilder(model: ConfirmDeregistrationModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/User/Deregistration/Confirm"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Оформляет подписку на все типы подписок при регистрации нового клиента.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userConfirmSubscriptions(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userConfirmSubscriptionsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Оформляет подписку на все типы подписок при регистрации нового клиента.
     - POST /v1.2/User/Subscriptions/Confirm
     - returns: RequestBuilder<ResultModel> 
     */
    open class func userConfirmSubscriptionsWithRequestBuilder() -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/User/Subscriptions/Confirm"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Удаляет все ответы из набора вопросов анкеты.
     
     - parameter tag: (query) Номер набора ответов. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userDeleteAnswer(tag: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userDeleteAnswerWithRequestBuilder(tag: tag).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Удаляет все ответы из набора вопросов анкеты.
     - DELETE /v1.2/User/DeleteAnswerSets
     - parameter tag: (query) Номер набора ответов. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func userDeleteAnswerWithRequestBuilder(tag: Int) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/User/DeleteAnswerSets"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": tag.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию об операциях активации по конкретному счету клиента (OAuth).
     
     - parameter currencyId: (path) Внутренний идентификатор валюты. 
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter fromDate: (query) Начальная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter toDate: (query) Конечная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter orderByDateAscending: (query) Тип сортировки (true-по дате от прошлого к будущему, false-по дате от будущего к прошлому). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userGetActivationOperations(currencyId: Int, from: Int? = nil, count: Int? = nil, fromDate: String? = nil, toDate: String? = nil, orderByDateAscending: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfAccountChangeViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userGetActivationOperationsWithRequestBuilder(currencyId: currencyId, from: from, count: count, fromDate: fromDate, toDate: toDate, orderByDateAscending: orderByDateAscending).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию об операциях активации по конкретному счету клиента (OAuth).
     - GET /v1.2/User/DetailedBalance/{currencyId}/Activations
     - parameter currencyId: (path) Внутренний идентификатор валюты. 
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter fromDate: (query) Начальная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter toDate: (query) Конечная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter orderByDateAscending: (query) Тип сортировки (true-по дате от прошлого к будущему, false-по дате от будущего к прошлому). (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfAccountChangeViewModel> 
     */
    open class func userGetActivationOperationsWithRequestBuilder(currencyId: Int, from: Int? = nil, count: Int? = nil, fromDate: String? = nil, toDate: String? = nil, orderByDateAscending: Bool? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfAccountChangeViewModel> {
        var localVariablePath = "/v1.2/User/DetailedBalance/{currencyId}/Activations"
        let currencyIdPreEscape = "\(APIHelper.mapValueToPathItem(currencyId))"
        let currencyIdPostEscape = currencyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{currencyId}", with: currencyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "fromDate": fromDate?.encodeToJSON(),
            "toDate": toDate?.encodeToJSON(),
            "orderByDateAscending": orderByDateAscending?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfAccountChangeViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список партнерских атрибутов клиента (OAuth).
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userGetAttributes(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfAttributePartnerValueModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userGetAttributesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список партнерских атрибутов клиента (OAuth).
     - GET /v1.2/User/Attributes
     - returns: RequestBuilder<ResultModelOfListOfAttributePartnerValueModel> 
     */
    open class func userGetAttributesWithRequestBuilder() -> RequestBuilder<ResultModelOfListOfAttributePartnerValueModel> {
        let localVariablePath = "/v1.2/User/Attributes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfAttributePartnerValueModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о балансе клиента (OAuth).
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userGetBalances(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfAccountBalanceModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userGetBalancesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о балансе клиента (OAuth).
     - GET /v1.2/User/Balance
     - returns: RequestBuilder<ResultModelOfListOfAccountBalanceModel> 
     */
    open class func userGetBalancesWithRequestBuilder() -> RequestBuilder<ResultModelOfListOfAccountBalanceModel> {
        let localVariablePath = "/v1.2/User/Balance"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfAccountBalanceModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о детализированном балансе клиента (OAuth).
     
     - parameter state: (query) Состояние валюты. (optional)
     - parameter date: (query) Дата (если текущая, то значение null). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userGetDetailedBalance(state: ArchivedState? = nil, date: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfDetailedBalanceInfoViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userGetDetailedBalanceWithRequestBuilder(state: state, date: date).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о детализированном балансе клиента (OAuth).
     - GET /v1.2/User/DetailedBalance
     - parameter state: (query) Состояние валюты. (optional)
     - parameter date: (query) Дата (если текущая, то значение null). (optional)
     - returns: RequestBuilder<ResultModelOfDetailedBalanceInfoViewModel> 
     */
    open class func userGetDetailedBalanceWithRequestBuilder(state: ArchivedState? = nil, date: String? = nil) -> RequestBuilder<ResultModelOfDetailedBalanceInfoViewModel> {
        let localVariablePath = "/v1.2/User/DetailedBalance"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "state": state?.encodeToJSON(),
            "date": date?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfDetailedBalanceInfoViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию обо всех операциях активации и сгораниях по конкретному счету клиента (OAuth).
     
     - parameter currencyId: (path) Внутренний идентификатор валюты. 
     - parameter orderByDateAscending: (query) Тип сортировки (true-по дате от прошлого к будущему, false-по дате от будущего к прошлому). (optional)
     - parameter filterFromDate: (query) Начальная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterToDate: (query) Конечная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterChangeTypes: (query) Фильтр по типу изменения (активации/сгорания). (optional)
     - parameter filterFrom: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter filterCount: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userGetDetailedBalanceItemOperations(currencyId: Int, orderByDateAscending: Bool? = nil, filterFromDate: String? = nil, filterToDate: String? = nil, filterChangeTypes: [AccountChangeType]? = nil, filterFrom: Int? = nil, filterCount: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfAccountChangeViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userGetDetailedBalanceItemOperationsWithRequestBuilder(currencyId: currencyId, orderByDateAscending: orderByDateAscending, filterFromDate: filterFromDate, filterToDate: filterToDate, filterChangeTypes: filterChangeTypes, filterFrom: filterFrom, filterCount: filterCount).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию обо всех операциях активации и сгораниях по конкретному счету клиента (OAuth).
     - GET /v1.2/User/DetailedBalance/{currencyId}/Operations
     - parameter currencyId: (path) Внутренний идентификатор валюты. 
     - parameter orderByDateAscending: (query) Тип сортировки (true-по дате от прошлого к будущему, false-по дате от будущего к прошлому). (optional)
     - parameter filterFromDate: (query) Начальная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterToDate: (query) Конечная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterChangeTypes: (query) Фильтр по типу изменения (активации/сгорания). (optional)
     - parameter filterFrom: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter filterCount: (query) Количество возвращаемых элементов выборки. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfAccountChangeViewModel> 
     */
    open class func userGetDetailedBalanceItemOperationsWithRequestBuilder(currencyId: Int, orderByDateAscending: Bool? = nil, filterFromDate: String? = nil, filterToDate: String? = nil, filterChangeTypes: [AccountChangeType]? = nil, filterFrom: Int? = nil, filterCount: Int? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfAccountChangeViewModel> {
        var localVariablePath = "/v1.2/User/DetailedBalance/{currencyId}/Operations"
        let currencyIdPreEscape = "\(APIHelper.mapValueToPathItem(currencyId))"
        let currencyIdPostEscape = currencyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{currencyId}", with: currencyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "orderByDateAscending": orderByDateAscending?.encodeToJSON(),
            "filter.fromDate": filterFromDate?.encodeToJSON(),
            "filter.toDate": filterToDate?.encodeToJSON(),
            "filter.changeTypes": filterChangeTypes?.encodeToJSON(),
            "filter.from": filterFrom?.encodeToJSON(),
            "filter.count": filterCount?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfAccountChangeViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию об операциях сгорания по конкретному счету пользователя (OAuth).
     
     - parameter currencyId: (path) Внутренний идентификатор валюты. 
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter fromDate: (query) Начальная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter toDate: (query) Конечная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter orderByDateAscending: (query) True-сортировка по дате от прошлого к будущему, false-сортировка по дате от будущего к прошлому. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userGetExpirationOperations(currencyId: Int, from: Int? = nil, count: Int? = nil, fromDate: String? = nil, toDate: String? = nil, orderByDateAscending: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfAccountChangeViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userGetExpirationOperationsWithRequestBuilder(currencyId: currencyId, from: from, count: count, fromDate: fromDate, toDate: toDate, orderByDateAscending: orderByDateAscending).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию об операциях сгорания по конкретному счету пользователя (OAuth).
     - GET /v1.2/User/DetailedBalance/{currencyId}/Expirations
     - parameter currencyId: (path) Внутренний идентификатор валюты. 
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter fromDate: (query) Начальная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter toDate: (query) Конечная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter orderByDateAscending: (query) True-сортировка по дате от прошлого к будущему, false-сортировка по дате от будущего к прошлому. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfAccountChangeViewModel> 
     */
    open class func userGetExpirationOperationsWithRequestBuilder(currencyId: Int, from: Int? = nil, count: Int? = nil, fromDate: String? = nil, toDate: String? = nil, orderByDateAscending: Bool? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfAccountChangeViewModel> {
        var localVariablePath = "/v1.2/User/DetailedBalance/{currencyId}/Expirations"
        let currencyIdPreEscape = "\(APIHelper.mapValueToPathItem(currencyId))"
        let currencyIdPostEscape = currencyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{currencyId}", with: currencyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "fromDate": fromDate?.encodeToJSON(),
            "toDate": toDate?.encodeToJSON(),
            "orderByDateAscending": orderByDateAscending?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfAccountChangeViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список логинов клиента.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userGetLogins(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfUserIdentifiersInfoResult?, _ error: Error?) -> Void)) -> RequestTask {
        return userGetLoginsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список логинов клиента.
     - GET /v1.2/User/Logins
     - returns: RequestBuilder<ResultModelOfUserIdentifiersInfoResult> 
     */
    open class func userGetLoginsWithRequestBuilder() -> RequestBuilder<ResultModelOfUserIdentifiersInfoResult> {
        let localVariablePath = "/v1.2/User/Logins"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfUserIdentifiersInfoResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о вопросах анкеты (OAuth).
     
     - parameter filterOnlyRequired: (query) True-только вопросы с отмеченным чекбоксом \&quot;Видимый при регистрации\&quot;,false-все вопросы. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userGetQuestionnaireItems(filterOnlyRequired: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfQuestionnaireItemModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userGetQuestionnaireItemsWithRequestBuilder(filterOnlyRequired: filterOnlyRequired).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о вопросах анкеты (OAuth).
     - GET /v1.2/User/Questions
     - parameter filterOnlyRequired: (query) True-только вопросы с отмеченным чекбоксом \&quot;Видимый при регистрации\&quot;,false-все вопросы. (optional)
     - returns: RequestBuilder<ResultModelOfListOfQuestionnaireItemModel> 
     */
    open class func userGetQuestionnaireItemsWithRequestBuilder(filterOnlyRequired: Bool? = nil) -> RequestBuilder<ResultModelOfListOfQuestionnaireItemModel> {
        let localVariablePath = "/v1.2/User/Questions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.onlyRequired": filterOnlyRequired?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfQuestionnaireItemModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает номер бонусной карты реферера.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userGetReferrer(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfReferrerInfoViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userGetReferrerWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает номер бонусной карты реферера.
     - GET /v1.2/User/Referrer
     - returns: RequestBuilder<ResultModelOfReferrerInfoViewModel> 
     */
    open class func userGetReferrerWithRequestBuilder() -> RequestBuilder<ResultModelOfReferrerInfoViewModel> {
        let localVariablePath = "/v1.2/User/Referrer"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfReferrerInfoViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список действий, для которых нужны шаги регистрации.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userGetRegistrationActions(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfUserActionsResult?, _ error: Error?) -> Void)) -> RequestTask {
        return userGetRegistrationActionsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список действий, для которых нужны шаги регистрации.
     - GET /v1.2/User/RegistrationActions
     - returns: RequestBuilder<ResultModelOfUserActionsResult> 
     */
    open class func userGetRegistrationActionsWithRequestBuilder() -> RequestBuilder<ResultModelOfUserActionsResult> {
        let localVariablePath = "/v1.2/User/RegistrationActions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfUserActionsResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список подписок клиента.
     
     - parameter subscriptionExternalIds: (query) Внешний идентификатор рассылки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userGetSubscriptions(subscriptionExternalIds: [String], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfSubscriptionViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userGetSubscriptionsWithRequestBuilder(subscriptionExternalIds: subscriptionExternalIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список подписок клиента.
     - GET /v1.2/User/Subscriptions
     - parameter subscriptionExternalIds: (query) Внешний идентификатор рассылки. 
     - returns: RequestBuilder<ResultModelOfListOfSubscriptionViewModel> 
     */
    open class func userGetSubscriptionsWithRequestBuilder(subscriptionExternalIds: [String]) -> RequestBuilder<ResultModelOfListOfSubscriptionViewModel> {
        let localVariablePath = "/v1.2/User/Subscriptions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "subscriptionExternalIds": subscriptionExternalIds.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfSubscriptionViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает историю изменений значений атрибута клиента.
     
     - parameter logicalName: (path) Логическое имя атрибута. 
     - parameter filterCreateDateFrom: (query) Начальная дата периода в формате 0000-00-00T00 00 00Z (Если не задана, то - самая ранняя). (optional)
     - parameter filterCreateDateTo: (query) Конечная дата периода в формате 0000-00-00T00 00 00Z.(Если не задана, то - самая поздняя). (optional)
     - parameter filterSortDescendingByCreateDateTime: (query) Тип сортировки (true-по убыванию, false-по возрастанию). (optional)
     - parameter filterFrom: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter filterCount: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userGetUserAttributeValuesHistory(logicalName: String, filterCreateDateFrom: String? = nil, filterCreateDateTo: String? = nil, filterSortDescendingByCreateDateTime: Bool? = nil, filterFrom: Int? = nil, filterCount: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPersonAttributeValueHistoryModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userGetUserAttributeValuesHistoryWithRequestBuilder(logicalName: logicalName, filterCreateDateFrom: filterCreateDateFrom, filterCreateDateTo: filterCreateDateTo, filterSortDescendingByCreateDateTime: filterSortDescendingByCreateDateTime, filterFrom: filterFrom, filterCount: filterCount).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает историю изменений значений атрибута клиента.
     - GET /v1.2/User/Attributes/{logicalName}/History
     - parameter logicalName: (path) Логическое имя атрибута. 
     - parameter filterCreateDateFrom: (query) Начальная дата периода в формате 0000-00-00T00 00 00Z (Если не задана, то - самая ранняя). (optional)
     - parameter filterCreateDateTo: (query) Конечная дата периода в формате 0000-00-00T00 00 00Z.(Если не задана, то - самая поздняя). (optional)
     - parameter filterSortDescendingByCreateDateTime: (query) Тип сортировки (true-по убыванию, false-по возрастанию). (optional)
     - parameter filterFrom: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter filterCount: (query) Количество возвращаемых элементов выборки. (optional)
     - returns: RequestBuilder<ResultModelOfPersonAttributeValueHistoryModel> 
     */
    open class func userGetUserAttributeValuesHistoryWithRequestBuilder(logicalName: String, filterCreateDateFrom: String? = nil, filterCreateDateTo: String? = nil, filterSortDescendingByCreateDateTime: Bool? = nil, filterFrom: Int? = nil, filterCount: Int? = nil) -> RequestBuilder<ResultModelOfPersonAttributeValueHistoryModel> {
        var localVariablePath = "/v1.2/User/Attributes/{logicalName}/History"
        let logicalNamePreEscape = "\(APIHelper.mapValueToPathItem(logicalName))"
        let logicalNamePostEscape = logicalNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{logicalName}", with: logicalNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.createDateFrom": filterCreateDateFrom?.encodeToJSON(),
            "filter.createDateTo": filterCreateDateTo?.encodeToJSON(),
            "filter.sortDescendingByCreateDateTime": filterSortDescendingByCreateDateTime?.encodeToJSON(),
            "filter.from": filterFrom?.encodeToJSON(),
            "filter.count": filterCount?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPersonAttributeValueHistoryModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о клиенте (OAuth).
     
     - parameter payload: (query) Список логических имен атрибутов клиента  State, Cards, BalanceShortInfo, BalanceDetailedInfo, EmailDetailedInfo, Attributes.{название атрибута} (например Attributes.FirstName). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userGetUserInfo(payload: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfUserInfoResult?, _ error: Error?) -> Void)) -> RequestTask {
        return userGetUserInfoWithRequestBuilder(payload: payload).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о клиенте (OAuth).
     - GET /v1.2/User
     - parameter payload: (query) Список логических имен атрибутов клиента  State, Cards, BalanceShortInfo, BalanceDetailedInfo, EmailDetailedInfo, Attributes.{название атрибута} (например Attributes.FirstName). (optional)
     - returns: RequestBuilder<ResultModelOfUserInfoResult> 
     */
    open class func userGetUserInfoWithRequestBuilder(payload: [String]? = nil) -> RequestBuilder<ResultModelOfUserInfoResult> {
        let localVariablePath = "/v1.2/User"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "payload": payload?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfUserInfoResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Оформляет принятие оферты.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userPostAcceptTenderOffer(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userPostAcceptTenderOfferWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Оформляет принятие оферты.
     - POST /v1.2/User/AcceptTenderOffer
     - returns: RequestBuilder<ResultModel> 
     */
    open class func userPostAcceptTenderOfferWithRequestBuilder() -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/User/AcceptTenderOffer"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Обновляет ответы на вопросы анкеты.
     
     - parameter updateAnswersModel: (query) Ответы. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userPostQuestionnaireAnswers(updateAnswersModel: [QuestionAnswerModel], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfQuestionsErrorsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userPostQuestionnaireAnswersWithRequestBuilder(updateAnswersModel: updateAnswersModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Обновляет ответы на вопросы анкеты.
     - POST /v1.2/User/Answers
     - parameter updateAnswersModel: (query) Ответы. 
     - returns: RequestBuilder<ResultModelOfQuestionsErrorsModel> 
     */
    open class func userPostQuestionnaireAnswersWithRequestBuilder(updateAnswersModel: [QuestionAnswerModel]) -> RequestBuilder<ResultModelOfQuestionsErrorsModel> {
        let localVariablePath = "/v1.2/User/Answers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "updateAnswersModel": updateAnswersModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfQuestionsErrorsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Оформляет отказ от всех типов подписок.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userRejectSubscriptions(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userRejectSubscriptionsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Оформляет отказ от всех типов подписок.
     - POST /v1.2/User/Subscriptions/Reject
     - returns: RequestBuilder<ResultModel> 
     */
    open class func userRejectSubscriptionsWithRequestBuilder() -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/User/Subscriptions/Reject"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Оформляет отправку кода подтверждения для выхода из Программы лояльности.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userSendDeregistrationConfirmCode(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfSendDeregistrationConfirmCodeResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userSendDeregistrationConfirmCodeWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Оформляет отправку кода подтверждения для выхода из Программы лояльности.
     - POST /v1.2/User/Deregistration/SendConfirmCode
     - returns: RequestBuilder<ResultModelOfSendDeregistrationConfirmCodeResultModel> 
     */
    open class func userSendDeregistrationConfirmCodeWithRequestBuilder() -> RequestBuilder<ResultModelOfSendDeregistrationConfirmCodeResultModel> {
        let localVariablePath = "/v1.2/User/Deregistration/SendConfirmCode"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfSendDeregistrationConfirmCodeResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
