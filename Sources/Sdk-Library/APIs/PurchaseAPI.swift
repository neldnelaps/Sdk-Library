//
// PurchaseAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PurchaseAPI {

    /**
     Редактирование состояния покупки.
     
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func purchaseCancelPurchase(purchaseId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return purchaseCancelPurchaseWithRequestBuilder(purchaseId: purchaseId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Редактирование состояния покупки.
     - POST /v1.2/purchases/{purchaseId}/cancel
     - parameter purchaseId: (path) Идентификатор покупки. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func purchaseCancelPurchaseWithRequestBuilder(purchaseId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/purchases/{purchaseId}/cancel"
        let purchaseIdPreEscape = "\(APIHelper.mapValueToPathItem(purchaseId))"
        let purchaseIdPostEscape = purchaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{purchaseId}", with: purchaseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Редактирование состояния покупки.
     
     - parameter deviceCode: (path) Код кассы. 
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func purchaseCancelPurchaseByExternalId(deviceCode: String, purchaseId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return purchaseCancelPurchaseByExternalIdWithRequestBuilder(deviceCode: deviceCode, purchaseId: purchaseId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Редактирование состояния покупки.
     - POST /v1.2/purchases/cancel/{deviceCode}/{purchaseId}
     - parameter deviceCode: (path) Код кассы. 
     - parameter purchaseId: (path) Идентификатор покупки. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func purchaseCancelPurchaseByExternalIdWithRequestBuilder(deviceCode: String, purchaseId: String) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/purchases/cancel/{deviceCode}/{purchaseId}"
        let deviceCodePreEscape = "\(APIHelper.mapValueToPathItem(deviceCode))"
        let deviceCodePostEscape = deviceCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceCode}", with: deviceCodePostEscape, options: .literal, range: nil)
        let purchaseIdPreEscape = "\(APIHelper.mapValueToPathItem(purchaseId))"
        let purchaseIdPostEscape = purchaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{purchaseId}", with: purchaseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Редактирование состояния покупки.
     
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func purchaseConfirmPurchase(purchaseId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return purchaseConfirmPurchaseWithRequestBuilder(purchaseId: purchaseId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Редактирование состояния покупки.
     - POST /v1.2/purchases/{purchaseId}/confirm
     - parameter purchaseId: (path) Идентификатор покупки. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func purchaseConfirmPurchaseWithRequestBuilder(purchaseId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/purchases/{purchaseId}/confirm"
        let purchaseIdPreEscape = "\(APIHelper.mapValueToPathItem(purchaseId))"
        let purchaseIdPostEscape = purchaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{purchaseId}", with: purchaseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Редактирование состояния покупки.
     
     - parameter deviceCode: (path) Код кассы. 
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func purchaseConfirmPurchaseByExternalId(deviceCode: String, purchaseId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return purchaseConfirmPurchaseByExternalIdWithRequestBuilder(deviceCode: deviceCode, purchaseId: purchaseId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Редактирование состояния покупки.
     - POST /v1.2/purchases/confirm/{deviceCode}/{purchaseId}
     - parameter deviceCode: (path) Код кассы. 
     - parameter purchaseId: (path) Идентификатор покупки. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func purchaseConfirmPurchaseByExternalIdWithRequestBuilder(deviceCode: String, purchaseId: String) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/purchases/confirm/{deviceCode}/{purchaseId}"
        let deviceCodePreEscape = "\(APIHelper.mapValueToPathItem(deviceCode))"
        let deviceCodePostEscape = deviceCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceCode}", with: deviceCodePostEscape, options: .literal, range: nil)
        let purchaseIdPreEscape = "\(APIHelper.mapValueToPathItem(purchaseId))"
        let purchaseIdPostEscape = purchaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{purchaseId}", with: purchaseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить указанное количество покупок с указанной позиции.
     
     - parameter filter: (query) Фильтр. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func purchaseGet(filter: PurchasesFilterViewModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfPurchaseViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return purchaseGetWithRequestBuilder(filter: filter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить указанное количество покупок с указанной позиции.
     - POST /v1.2/purchases
     - parameter filter: (query) Фильтр. 
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfPurchaseViewModel> 
     */
    open class func purchaseGetWithRequestBuilder(filter: PurchasesFilterViewModel) -> RequestBuilder<ResultModelOfPagedViewModelOfPurchaseViewModel> {
        let localVariablePath = "/v1.2/purchases"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfPurchaseViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить чековые позиции по покупке.
     
     - parameter purchaseId: (path) Идентификатор. 
     - parameter showCanceledOperations: (query) Отображать отменененные операции. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func purchaseGetChequePositions(purchaseId: Int, showCanceledOperations: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfChequePositionViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return purchaseGetChequePositionsWithRequestBuilder(purchaseId: purchaseId, showCanceledOperations: showCanceledOperations).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить чековые позиции по покупке.
     - GET /v1.2/purchases/{purchaseId}/chequePositions
     - parameter purchaseId: (path) Идентификатор. 
     - parameter showCanceledOperations: (query) Отображать отменененные операции. (optional)
     - returns: RequestBuilder<ResultModelOfListOfChequePositionViewModel> 
     */
    open class func purchaseGetChequePositionsWithRequestBuilder(purchaseId: Int, showCanceledOperations: Bool? = nil) -> RequestBuilder<ResultModelOfListOfChequePositionViewModel> {
        var localVariablePath = "/v1.2/purchases/{purchaseId}/chequePositions"
        let purchaseIdPreEscape = "\(APIHelper.mapValueToPathItem(purchaseId))"
        let purchaseIdPostEscape = purchaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{purchaseId}", with: purchaseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "showCanceledOperations": showCanceledOperations?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfChequePositionViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить список операций по покупке.
     
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func purchaseGetOperations(purchaseId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfOperationsViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return purchaseGetOperationsWithRequestBuilder(purchaseId: purchaseId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить список операций по покупке.
     - GET /v1.2/purchases/{purchaseId}/operations
     - parameter purchaseId: (path) Идентификатор покупки. 
     - returns: RequestBuilder<ResultModelOfListOfOperationsViewModel> 
     */
    open class func purchaseGetOperationsWithRequestBuilder(purchaseId: Int) -> RequestBuilder<ResultModelOfListOfOperationsViewModel> {
        var localVariablePath = "/v1.2/purchases/{purchaseId}/operations"
        let purchaseIdPreEscape = "\(APIHelper.mapValueToPathItem(purchaseId))"
        let purchaseIdPostEscape = purchaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{purchaseId}", with: purchaseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfOperationsViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить покупку по идентификатору.
     
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter withCoupons: (query) Возвращать ли использованные купоны. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func purchaseGetPurchase(purchaseId: Int, withCoupons: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPurchaseViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return purchaseGetPurchaseWithRequestBuilder(purchaseId: purchaseId, withCoupons: withCoupons).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить покупку по идентификатору.
     - GET /v1.2/purchases/{purchaseId}
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter withCoupons: (query) Возвращать ли использованные купоны. (optional)
     - returns: RequestBuilder<ResultModelOfPurchaseViewModel> 
     */
    open class func purchaseGetPurchaseWithRequestBuilder(purchaseId: Int, withCoupons: Bool? = nil) -> RequestBuilder<ResultModelOfPurchaseViewModel> {
        var localVariablePath = "/v1.2/purchases/{purchaseId}"
        let purchaseIdPreEscape = "\(APIHelper.mapValueToPathItem(purchaseId))"
        let purchaseIdPostEscape = purchaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{purchaseId}", with: purchaseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "withCoupons": withCoupons?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPurchaseViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
