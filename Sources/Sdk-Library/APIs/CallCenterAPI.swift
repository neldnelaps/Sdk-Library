//
// CallCenterAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CallCenterAPI {

    /**
     Блокирует счет.
     
     - parameter blockAccountModel: (query) Модель для операции блокировки/разблокировки счета Участника ПЛ. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func callCenterBlockAccount(blockAccountModel: BlockAccountModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return callCenterBlockAccountWithRequestBuilder(blockAccountModel: blockAccountModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Блокирует счет.
     - POST /v1.2/CallCenter/BlockAccount
     - parameter blockAccountModel: (query) Модель для операции блокировки/разблокировки счета Участника ПЛ. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func callCenterBlockAccountWithRequestBuilder(blockAccountModel: BlockAccountModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/CallCenter/BlockAccount"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "blockAccountModel": blockAccountModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Блокирует карту.
     
     - parameter blockCardModel: (query) Модель для блокировки карты Участника ПЛ. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func callCenterBlockCard(blockCardModel: BlockCardModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return callCenterBlockCardWithRequestBuilder(blockCardModel: blockCardModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Блокирует карту.
     - POST /v1.2/CallCenter/BlockCard
     - parameter blockCardModel: (query) Модель для блокировки карты Участника ПЛ. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func callCenterBlockCardWithRequestBuilder(blockCardModel: BlockCardModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/CallCenter/BlockCard"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "blockCardModel": blockCardModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Заменяет категорию карты.
     
     - parameter changeCardCategory: (query) Модель для замены категории карты Участника ПЛ. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func callCenterChangeCardCategory(changeCardCategory: ChangeCardCategoryModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return callCenterChangeCardCategoryWithRequestBuilder(changeCardCategory: changeCardCategory).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Заменяет категорию карты.
     - POST /v1.2/CallCenter/ChangeCardCategory
     - parameter changeCardCategory: (query) Модель для замены категории карты Участника ПЛ. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func callCenterChangeCardCategoryWithRequestBuilder(changeCardCategory: ChangeCardCategoryModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/CallCenter/ChangeCardCategory"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "changeCardCategory": changeCardCategory.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Заменяет Email.
     
     - parameter changeEmailModel: (query) Модель для замены Email Участника ПЛ. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func callCenterChangeEmail(changeEmailModel: ChangeEmailModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return callCenterChangeEmailWithRequestBuilder(changeEmailModel: changeEmailModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Заменяет Email.
     - POST /v1.2/CallCenter/ChangeEmail
     - parameter changeEmailModel: (query) Модель для замены Email Участника ПЛ. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func callCenterChangeEmailWithRequestBuilder(changeEmailModel: ChangeEmailModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/CallCenter/ChangeEmail"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "changeEmailModel": changeEmailModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Заменяет номер телефона.
     
     - parameter changePhoneModel: (query) Модель для замены номера телефона Участника ПЛ. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func callCenterChangePhone(changePhoneModel: ChangePhoneModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return callCenterChangePhoneWithRequestBuilder(changePhoneModel: changePhoneModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Заменяет номер телефона.
     - POST /v1.2/CallCenter/ChangePhone
     - parameter changePhoneModel: (query) Модель для замены номера телефона Участника ПЛ. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func callCenterChangePhoneWithRequestBuilder(changePhoneModel: ChangePhoneModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/CallCenter/ChangePhone"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "changePhoneModel": changePhoneModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Удаляет карту.
     
     - parameter deleteCardModel: (query) Внутренний идентификатор удаляемой карты Участника ПЛ. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func callCenterDeleteCard(deleteCardModel: DeleteCardModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return callCenterDeleteCardWithRequestBuilder(deleteCardModel: deleteCardModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Удаляет карту.
     - POST /v1.2/CallCenter/DeleteCard
     - parameter deleteCardModel: (query) Внутренний идентификатор удаляемой карты Участника ПЛ. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func callCenterDeleteCardWithRequestBuilder(deleteCardModel: DeleteCardModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/CallCenter/DeleteCard"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "deleteCardModel": deleteCardModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Удаляет Участника из ПЛ.
     
     - parameter model: (query) Модель для удаления Участника из ПЛ. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func callCenterDeregisterPerson(model: DeregisterPersonModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return callCenterDeregisterPersonWithRequestBuilder(model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Удаляет Участника из ПЛ.
     - POST /v1.2/CallCenter/DeregisterPerson
     - parameter model: (query) Модель для удаления Участника из ПЛ. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func callCenterDeregisterPersonWithRequestBuilder(model: DeregisterPersonModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/CallCenter/DeregisterPerson"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Восстанавливает карту.
     
     - parameter recoverCardModel: (query) Внутренний идентификатор восстанавливаемой карты Участника ПЛ. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func callCenterRecoverCard(recoverCardModel: DeleteCardModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return callCenterRecoverCardWithRequestBuilder(recoverCardModel: recoverCardModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Восстанавливает карту.
     - POST /v1.2/CallCenter/RecoverCard
     - parameter recoverCardModel: (query) Внутренний идентификатор восстанавливаемой карты Участника ПЛ. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func callCenterRecoverCardWithRequestBuilder(recoverCardModel: DeleteCardModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/CallCenter/RecoverCard"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "recoverCardModel": recoverCardModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Заменяет карту.
     
     - parameter replacePersonCardModel: (query) Модель для замены карты Участника ПЛ. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func callCenterReplacePersonCard(replacePersonCardModel: ReplacePersonCardModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return callCenterReplacePersonCardWithRequestBuilder(replacePersonCardModel: replacePersonCardModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Заменяет карту.
     - POST /v1.2/CallCenter/ReplaceCard
     - parameter replacePersonCardModel: (query) Модель для замены карты Участника ПЛ. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func callCenterReplacePersonCardWithRequestBuilder(replacePersonCardModel: ReplacePersonCardModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/CallCenter/ReplaceCard"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "replacePersonCardModel": replacePersonCardModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Генерирует новый пароль для Участника ПЛ и отправляет по Email.
     
     - parameter sendNewPasswordModel: (query) Модель для отправки нового пароля Участнику ПЛ. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func callCenterSendNewPasswordToEmail(sendNewPasswordModel: SendNewPasswordModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return callCenterSendNewPasswordToEmailWithRequestBuilder(sendNewPasswordModel: sendNewPasswordModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Генерирует новый пароль для Участника ПЛ и отправляет по Email.
     - POST /v1.2/CallCenter/SendNewPasswordToEmail
     - parameter sendNewPasswordModel: (query) Модель для отправки нового пароля Участнику ПЛ. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func callCenterSendNewPasswordToEmailWithRequestBuilder(sendNewPasswordModel: SendNewPasswordModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/CallCenter/SendNewPasswordToEmail"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sendNewPasswordModel": sendNewPasswordModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Генерирует новый пароль для Участника ПЛ и отправляет в SMS-сообщении.
     
     - parameter sendNewPasswordModel: (query) Модель для отправки нового пароля Участнику ПЛ. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func callCenterSendNewPasswordToPhone(sendNewPasswordModel: SendNewPasswordModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return callCenterSendNewPasswordToPhoneWithRequestBuilder(sendNewPasswordModel: sendNewPasswordModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Генерирует новый пароль для Участника ПЛ и отправляет в SMS-сообщении.
     - POST /v1.2/CallCenter/SendNewPasswordToPhone
     - parameter sendNewPasswordModel: (query) Модель для отправки нового пароля Участнику ПЛ. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func callCenterSendNewPasswordToPhoneWithRequestBuilder(sendNewPasswordModel: SendNewPasswordModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/CallCenter/SendNewPasswordToPhone"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sendNewPasswordModel": sendNewPasswordModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Разблокирует счет.
     
     - parameter blockAccountModel: (query) Модель для операции блокировки/разблокировки счета Участника ПЛ. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func callCenterUnBlockAccount(blockAccountModel: BlockAccountModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return callCenterUnBlockAccountWithRequestBuilder(blockAccountModel: blockAccountModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Разблокирует счет.
     - POST /v1.2/CallCenter/UnBlockAccount
     - parameter blockAccountModel: (query) Модель для операции блокировки/разблокировки счета Участника ПЛ. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func callCenterUnBlockAccountWithRequestBuilder(blockAccountModel: BlockAccountModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/CallCenter/UnBlockAccount"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "blockAccountModel": blockAccountModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Разблокирует карту.
     
     - parameter unBlockCardModel: (query) Модель для разблокировки карты Участника ПЛ. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func callCenterUnBlockCard(unBlockCardModel: UnBlockCardModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return callCenterUnBlockCardWithRequestBuilder(unBlockCardModel: unBlockCardModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Разблокирует карту.
     - POST /v1.2/CallCenter/UnBlockCard
     - parameter unBlockCardModel: (query) Модель для разблокировки карты Участника ПЛ. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func callCenterUnBlockCardWithRequestBuilder(unBlockCardModel: UnBlockCardModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/CallCenter/UnBlockCard"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "unBlockCardModel": unBlockCardModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Обновляет подписки.
     
     - parameter updateSubscriptionsModel: (query) Модель для обновления подписок Участника ПЛ. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func callCenterUpdateSubscriptions(updateSubscriptionsModel: UpdateSubscriptionsModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return callCenterUpdateSubscriptionsWithRequestBuilder(updateSubscriptionsModel: updateSubscriptionsModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Обновляет подписки.
     - POST /v1.2/CallCenter/UpdateSubscriptions
     - parameter updateSubscriptionsModel: (query) Модель для обновления подписок Участника ПЛ. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func callCenterUpdateSubscriptionsWithRequestBuilder(updateSubscriptionsModel: UpdateSubscriptionsModel) -> RequestBuilder<ResultModel> {
        let localVariablePath = "/v1.2/CallCenter/UpdateSubscriptions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "updateSubscriptionsModel": updateSubscriptionsModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
