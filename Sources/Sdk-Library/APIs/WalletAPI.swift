//
// WalletAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class WalletAPI {

    /**
     Получаем Wallet-карту для пользователя, или ссылку на AppleWallet карту.
     
     - parameter link: (path) Ссылка для получения Wallet карты. 
     - parameter platform: (query) Платформа для которой возвращаем карту. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func walletGetWalletCard(link: String, platform: PlatformType? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return walletGetWalletCardWithRequestBuilder(link: link, platform: platform).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получаем Wallet-карту для пользователя, или ссылку на AppleWallet карту.
     - GET /v1.2/Cards/Wallet/{link}
     - parameter link: (path) Ссылка для получения Wallet карты. 
     - parameter platform: (query) Платформа для которой возвращаем карту. (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func walletGetWalletCardWithRequestBuilder(link: String, platform: PlatformType? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/v1.2/Cards/Wallet/{link}"
        let linkPreEscape = "\(APIHelper.mapValueToPathItem(link))"
        let linkPostEscape = linkPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{link}", with: linkPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "platform": platform?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получаем ссылку для скачивания карты(если авторизованы).
     
     - parameter cardId: (path) Id карты. 
     - parameter platform: (query) Платформа для которой возвращаем ссылку. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func walletGetWalletCardLink(cardId: Int, platform: PlatformType? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfWalletCardLinkViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return walletGetWalletCardLinkWithRequestBuilder(cardId: cardId, platform: platform).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получаем ссылку для скачивания карты(если авторизованы).
     - GET /v1.2/Cards/{cardId}/Wallet
     - parameter cardId: (path) Id карты. 
     - parameter platform: (query) Платформа для которой возвращаем ссылку. (optional)
     - returns: RequestBuilder<ResultModelOfWalletCardLinkViewModel> 
     */
    open class func walletGetWalletCardLinkWithRequestBuilder(cardId: Int, platform: PlatformType? = nil) -> RequestBuilder<ResultModelOfWalletCardLinkViewModel> {
        var localVariablePath = "/v1.2/Cards/{cardId}/Wallet"
        let cardIdPreEscape = "\(APIHelper.mapValueToPathItem(cardId))"
        let cardIdPostEscape = cardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{cardId}", with: cardIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "platform": platform?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfWalletCardLinkViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
