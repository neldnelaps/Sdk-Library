//
// OfferActionChainFilterAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OfferActionChainFilterAPI {

    /**
     Возвращает список всех состояний карты.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offerActionChainFilterGetCardStates(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfCardState?, _ error: Error?) -> Void)) -> RequestTask {
        return offerActionChainFilterGetCardStatesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список всех состояний карты.
     - GET /v1.2/Filters/AvailableCardStates
     - returns: RequestBuilder<ResultModelOfListOfCardState> 
     */
    open class func offerActionChainFilterGetCardStatesWithRequestBuilder() -> RequestBuilder<ResultModelOfListOfCardState> {
        let localVariablePath = "/v1.2/Filters/AvailableCardStates"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfCardState>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить список всех выпусков карт.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offerActionChainFilterGetEmissions(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfCardEmissionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offerActionChainFilterGetEmissionsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить список всех выпусков карт.
     - GET /v1.2/Filters/AvailableCardEmissions
     - returns: RequestBuilder<ResultModelOfListOfCardEmissionModel> 
     */
    open class func offerActionChainFilterGetEmissionsWithRequestBuilder() -> RequestBuilder<ResultModelOfListOfCardEmissionModel> {
        let localVariablePath = "/v1.2/Filters/AvailableCardEmissions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfCardEmissionModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает информацию о фильтре.
     
     - parameter offerId: (path) Идентификатор акции. 
     - parameter offerChainId: (path) Идентификатор цепочки действий. 
     - parameter filterId: (path) Идентификатор фильтра. 
     - parameter offerVersion: (path) Дескриптор версии акции. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offerActionChainFilterGetFilter(offerId: Int, offerChainId: Int, filterId: Int, offerVersion: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfFilterViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offerActionChainFilterGetFilterWithRequestBuilder(offerId: offerId, offerChainId: offerChainId, filterId: filterId, offerVersion: offerVersion).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает информацию о фильтре.
     - GET /v1.2/Offers/{offerId}/versions/{offerVersion}/offerChains/{offerChainId}/filters/{filterId}
     - parameter offerId: (path) Идентификатор акции. 
     - parameter offerChainId: (path) Идентификатор цепочки действий. 
     - parameter filterId: (path) Идентификатор фильтра. 
     - parameter offerVersion: (path) Дескриптор версии акции. 
     - returns: RequestBuilder<ResultModelOfFilterViewModel> 
     */
    open class func offerActionChainFilterGetFilterWithRequestBuilder(offerId: Int, offerChainId: Int, filterId: Int, offerVersion: String) -> RequestBuilder<ResultModelOfFilterViewModel> {
        var localVariablePath = "/v1.2/Offers/{offerId}/versions/{offerVersion}/offerChains/{offerChainId}/filters/{filterId}"
        let offerIdPreEscape = "\(APIHelper.mapValueToPathItem(offerId))"
        let offerIdPostEscape = offerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerId}", with: offerIdPostEscape, options: .literal, range: nil)
        let offerChainIdPreEscape = "\(APIHelper.mapValueToPathItem(offerChainId))"
        let offerChainIdPostEscape = offerChainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerChainId}", with: offerChainIdPostEscape, options: .literal, range: nil)
        let filterIdPreEscape = "\(APIHelper.mapValueToPathItem(filterId))"
        let filterIdPostEscape = filterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filterId}", with: filterIdPostEscape, options: .literal, range: nil)
        let offerVersionPreEscape = "\(APIHelper.mapValueToPathItem(offerVersion))"
        let offerVersionPostEscape = offerVersionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerVersion}", with: offerVersionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfFilterViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает информацию о фильтрах цепочки действий.
     
     - parameter offerId: (path) Идентификатор акции. 
     - parameter offerChainId: (path) Идентификатор цепочки действий. 
     - parameter offerVersion: (path) Дескриптор версии акции. 
     - parameter filterModelType: (query) Тип информации о фильтре. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offerActionChainFilterGetFilters(offerId: Int, offerChainId: Int, offerVersion: String, filterModelType: FilterModelType? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfFilterViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offerActionChainFilterGetFiltersWithRequestBuilder(offerId: offerId, offerChainId: offerChainId, offerVersion: offerVersion, filterModelType: filterModelType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает информацию о фильтрах цепочки действий.
     - GET /v1.2/Offers/{offerId}/versions/{offerVersion}/offerChains/{offerChainId}/filters
     - parameter offerId: (path) Идентификатор акции. 
     - parameter offerChainId: (path) Идентификатор цепочки действий. 
     - parameter offerVersion: (path) Дескриптор версии акции. 
     - parameter filterModelType: (query) Тип информации о фильтре. (optional)
     - returns: RequestBuilder<ResultModelOfListOfFilterViewModel> 
     */
    open class func offerActionChainFilterGetFiltersWithRequestBuilder(offerId: Int, offerChainId: Int, offerVersion: String, filterModelType: FilterModelType? = nil) -> RequestBuilder<ResultModelOfListOfFilterViewModel> {
        var localVariablePath = "/v1.2/Offers/{offerId}/versions/{offerVersion}/offerChains/{offerChainId}/filters"
        let offerIdPreEscape = "\(APIHelper.mapValueToPathItem(offerId))"
        let offerIdPostEscape = offerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerId}", with: offerIdPostEscape, options: .literal, range: nil)
        let offerChainIdPreEscape = "\(APIHelper.mapValueToPathItem(offerChainId))"
        let offerChainIdPostEscape = offerChainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerChainId}", with: offerChainIdPostEscape, options: .literal, range: nil)
        let offerVersionPreEscape = "\(APIHelper.mapValueToPathItem(offerVersion))"
        let offerVersionPostEscape = offerVersionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerVersion}", with: offerVersionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filterModelType": filterModelType?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfFilterViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить список доступных в фильтрах акций.
     
     - parameter partnerId: (query) Идентификатор партнера. 
     - parameter name: (query) Название акции. (optional)
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offerActionChainFilterGetFiltersOffers(partnerId: Int, name: String? = nil, from: Int? = nil, count: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfOfferInfoShortViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offerActionChainFilterGetFiltersOffersWithRequestBuilder(partnerId: partnerId, name: name, from: from, count: count).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить список доступных в фильтрах акций.
     - GET /v1.2/Filters/AvailableOffers
     - parameter partnerId: (query) Идентификатор партнера. 
     - parameter name: (query) Название акции. (optional)
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfOfferInfoShortViewModel> 
     */
    open class func offerActionChainFilterGetFiltersOffersWithRequestBuilder(partnerId: Int, name: String? = nil, from: Int? = nil, count: Int? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfOfferInfoShortViewModel> {
        let localVariablePath = "/v1.2/Filters/AvailableOffers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "partnerId": partnerId.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfOfferInfoShortViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список всех состояний пользователя.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offerActionChainFilterGetPersonStates(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfPersonState?, _ error: Error?) -> Void)) -> RequestTask {
        return offerActionChainFilterGetPersonStatesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список всех состояний пользователя.
     - GET /v1.2/Filters/AvailablePersonStates
     - returns: RequestBuilder<ResultModelOfListOfPersonState> 
     */
    open class func offerActionChainFilterGetPersonStatesWithRequestBuilder() -> RequestBuilder<ResultModelOfListOfPersonState> {
        let localVariablePath = "/v1.2/Filters/AvailablePersonStates"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfPersonState>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить вопросы для фильтра.
     
     - parameter id: (path) Id фильтра. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offerActionChainFilterGetQuestions(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfAnketaQuestionViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return offerActionChainFilterGetQuestionsWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить вопросы для фильтра.
     - GET /v1.2/Filters/{id}/questions
     - parameter id: (path) Id фильтра. 
     - returns: RequestBuilder<ResultModelOfListOfAnketaQuestionViewModel> 
     */
    open class func offerActionChainFilterGetQuestionsWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfListOfAnketaQuestionViewModel> {
        var localVariablePath = "/v1.2/Filters/{id}/questions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfAnketaQuestionViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список всех дней недели.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offerActionChainFilterGetWeekDays(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfDayOfWeek?, _ error: Error?) -> Void)) -> RequestTask {
        return offerActionChainFilterGetWeekDaysWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список всех дней недели.
     - GET /v1.2/Filters/AvailableWeekDays
     - returns: RequestBuilder<ResultModelOfListOfDayOfWeek> 
     */
    open class func offerActionChainFilterGetWeekDaysWithRequestBuilder() -> RequestBuilder<ResultModelOfListOfDayOfWeek> {
        let localVariablePath = "/v1.2/Filters/AvailableWeekDays"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfDayOfWeek>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
