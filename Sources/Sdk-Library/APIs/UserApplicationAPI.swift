//
// UserApplicationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UserApplicationAPI {

    /**
     Возвращает список OAuth-приложений клиента.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userApplicationGetApplications(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfUserApplicationViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userApplicationGetApplicationsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список OAuth-приложений клиента.
     - GET /v1.2/Applications
     - returns: RequestBuilder<ResultModelOfListOfUserApplicationViewModel> 
     */
    open class func userApplicationGetApplicationsWithRequestBuilder() -> RequestBuilder<ResultModelOfListOfUserApplicationViewModel> {
        let localVariablePath = "/v1.2/Applications"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfUserApplicationViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Удаляет OAuth-приложение клиента.
     
     - parameter userApplicationId: (path) Внутренний идентификатор OAuth-приложения. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userApplicationRemove(userApplicationId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userApplicationRemoveWithRequestBuilder(userApplicationId: userApplicationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Удаляет OAuth-приложение клиента.
     - DELETE /v1.2/Applications/{userApplicationId}
     - parameter userApplicationId: (path) Внутренний идентификатор OAuth-приложения. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func userApplicationRemoveWithRequestBuilder(userApplicationId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/Applications/{userApplicationId}"
        let userApplicationIdPreEscape = "\(APIHelper.mapValueToPathItem(userApplicationId))"
        let userApplicationIdPostEscape = userApplicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userApplicationId}", with: userApplicationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
