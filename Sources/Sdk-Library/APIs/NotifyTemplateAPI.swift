//
// NotifyTemplateAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class NotifyTemplateAPI {

    /**
     Возвращает список доступных типов подписки.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func notifyTemplateGetAvailableSubscriptionTypes(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfMailingSubscriptionType?, _ error: Error?) -> Void)) -> RequestTask {
        return notifyTemplateGetAvailableSubscriptionTypesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список доступных типов подписки.
     - GET /v1.2/notifyTemplates/availableSubscriptionTypes
     - returns: RequestBuilder<ResultModelOfListOfMailingSubscriptionType> 
     */
    open class func notifyTemplateGetAvailableSubscriptionTypesWithRequestBuilder() -> RequestBuilder<ResultModelOfListOfMailingSubscriptionType> {
        let localVariablePath = "/v1.2/notifyTemplates/availableSubscriptionTypes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfMailingSubscriptionType>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает шаблон уведомлений по его ID.
     
     - parameter id: (path) ID шаблона уведомлений. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func notifyTemplateGetNotifyTemplate(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfNotifyTemplateViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return notifyTemplateGetNotifyTemplateWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает шаблон уведомлений по его ID.
     - GET /v1.2/notifyTemplates/{id}
     - parameter id: (path) ID шаблона уведомлений. 
     - returns: RequestBuilder<ResultModelOfNotifyTemplateViewModel> 
     */
    open class func notifyTemplateGetNotifyTemplateWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfNotifyTemplateViewModel> {
        var localVariablePath = "/v1.2/notifyTemplates/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfNotifyTemplateViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список шаблонов уведомлений.
     
     - parameter requestModelFrom: (query) С какого. (optional)
     - parameter requestModelCount: (query) Сколько. (optional)
     - parameter requestModelTemplateType: (query) Тип шаблона уведомлений. (optional)
     - parameter requestModelLogicalNameSubStr: (query) Подстрока логического имени шаблона. (optional)
     - parameter requestModelTextSubStr: (query) Подстрока текстового описания шаблона. (optional)
     - parameter requestModelSubscriptionType: (query) Тип подписки. (optional)
     - parameter requestModelShowMode: (query) Режим отображения архивных шаблонов. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func notifyTemplateGetNotifyTemplates(requestModelFrom: Int? = nil, requestModelCount: Int? = nil, requestModelTemplateType: TemplateType? = nil, requestModelLogicalNameSubStr: String? = nil, requestModelTextSubStr: String? = nil, requestModelSubscriptionType: MailingSubscriptionType? = nil, requestModelShowMode: ArchivedState? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfNotifyTemplateViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return notifyTemplateGetNotifyTemplatesWithRequestBuilder(requestModelFrom: requestModelFrom, requestModelCount: requestModelCount, requestModelTemplateType: requestModelTemplateType, requestModelLogicalNameSubStr: requestModelLogicalNameSubStr, requestModelTextSubStr: requestModelTextSubStr, requestModelSubscriptionType: requestModelSubscriptionType, requestModelShowMode: requestModelShowMode).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список шаблонов уведомлений.
     - GET /v1.2/notifyTemplates
     - parameter requestModelFrom: (query) С какого. (optional)
     - parameter requestModelCount: (query) Сколько. (optional)
     - parameter requestModelTemplateType: (query) Тип шаблона уведомлений. (optional)
     - parameter requestModelLogicalNameSubStr: (query) Подстрока логического имени шаблона. (optional)
     - parameter requestModelTextSubStr: (query) Подстрока текстового описания шаблона. (optional)
     - parameter requestModelSubscriptionType: (query) Тип подписки. (optional)
     - parameter requestModelShowMode: (query) Режим отображения архивных шаблонов. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfNotifyTemplateViewModel> 
     */
    open class func notifyTemplateGetNotifyTemplatesWithRequestBuilder(requestModelFrom: Int? = nil, requestModelCount: Int? = nil, requestModelTemplateType: TemplateType? = nil, requestModelLogicalNameSubStr: String? = nil, requestModelTextSubStr: String? = nil, requestModelSubscriptionType: MailingSubscriptionType? = nil, requestModelShowMode: ArchivedState? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfNotifyTemplateViewModel> {
        let localVariablePath = "/v1.2/notifyTemplates"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "requestModel.from": requestModelFrom?.encodeToJSON(),
            "requestModel.count": requestModelCount?.encodeToJSON(),
            "requestModel.templateType": requestModelTemplateType?.encodeToJSON(),
            "requestModel.logicalNameSubStr": requestModelLogicalNameSubStr?.encodeToJSON(),
            "requestModel.textSubStr": requestModelTextSubStr?.encodeToJSON(),
            "requestModel.subscriptionType": requestModelSubscriptionType?.encodeToJSON(),
            "requestModel.showMode": requestModelShowMode?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfNotifyTemplateViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Восстановление удаленного шаблона уведомлений.
     
     - parameter id: (path) ID шаблона уведомлений. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func notifyTemplateRestoreNotifyTemplate(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return notifyTemplateRestoreNotifyTemplateWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Восстановление удаленного шаблона уведомлений.
     - POST /v1.2/notifyTemplates/{id}/restore
     - parameter id: (path) ID шаблона уведомлений. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func notifyTemplateRestoreNotifyTemplateWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/notifyTemplates/{id}/restore"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
