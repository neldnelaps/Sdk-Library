//
// SubscriptionTypeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SubscriptionTypeAPI {

    /**
     Возвращает тип подписки.
     
     - parameter id: (path) Индификатор типа подписки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func subscriptionTypeGet(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfSystemApiSubscriptionTypeViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return subscriptionTypeGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает тип подписки.
     - GET /v1.2/SubscriptionTypes/{id}
     - parameter id: (path) Индификатор типа подписки. 
     - returns: RequestBuilder<ResultModelOfSystemApiSubscriptionTypeViewModel> 
     */
    open class func subscriptionTypeGetWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfSystemApiSubscriptionTypeViewModel> {
        var localVariablePath = "/v1.2/SubscriptionTypes/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfSystemApiSubscriptionTypeViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список всех типов подписок.
     
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterSearchedText: (query) Текст поиска. (optional)
     - parameter filterSubscriptionType: (query) Тип подписки. (optional)
     - parameter filterNotificationGatewayType: (query) Тип канала. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func subscriptionTypeGetAll(from: Int? = nil, count: Int? = nil, filterSearchedText: String? = nil, filterSubscriptionType: MailingSubscriptionType? = nil, filterNotificationGatewayType: NotificationGatewayType? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfSystemApiSubscriptionTypeViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return subscriptionTypeGetAllWithRequestBuilder(from: from, count: count, filterSearchedText: filterSearchedText, filterSubscriptionType: filterSubscriptionType, filterNotificationGatewayType: filterNotificationGatewayType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список всех типов подписок.
     - GET /v1.2/SubscriptionTypes
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterSearchedText: (query) Текст поиска. (optional)
     - parameter filterSubscriptionType: (query) Тип подписки. (optional)
     - parameter filterNotificationGatewayType: (query) Тип канала. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfSystemApiSubscriptionTypeViewModel> 
     */
    open class func subscriptionTypeGetAllWithRequestBuilder(from: Int? = nil, count: Int? = nil, filterSearchedText: String? = nil, filterSubscriptionType: MailingSubscriptionType? = nil, filterNotificationGatewayType: NotificationGatewayType? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfSystemApiSubscriptionTypeViewModel> {
        let localVariablePath = "/v1.2/SubscriptionTypes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.searchedText": filterSearchedText?.encodeToJSON(),
            "filter.subscriptionType": filterSubscriptionType?.encodeToJSON(),
            "filter.notificationGatewayType": filterNotificationGatewayType?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfSystemApiSubscriptionTypeViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список доступных типов подписки.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func subscriptionTypeGetAvailableSubscriptionTypes(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfMailingSubscriptionType?, _ error: Error?) -> Void)) -> RequestTask {
        return subscriptionTypeGetAvailableSubscriptionTypesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список доступных типов подписки.
     - GET /v1.2/SubscriptionTypes/availableSubscriptionTypes
     - returns: RequestBuilder<ResultModelOfListOfMailingSubscriptionType> 
     */
    open class func subscriptionTypeGetAvailableSubscriptionTypesWithRequestBuilder() -> RequestBuilder<ResultModelOfListOfMailingSubscriptionType> {
        let localVariablePath = "/v1.2/SubscriptionTypes/availableSubscriptionTypes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfMailingSubscriptionType>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
