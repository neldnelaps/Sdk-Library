//
// OfferImportExportAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OfferImportExportAPI {

    /**
     Копировать акцию по Id.
     
     - parameter offerId: (path) Id акции. 
     - parameter createOfferModel: (query) Модель для создания акции. 
     - parameter versionId: (query) Id версии. Если пусто, то последняя подтверждённая. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offerImportExportCopyOffer(offerId: Int, createOfferModel: CreateOfferModel, versionId: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfInt32?, _ error: Error?) -> Void)) -> RequestTask {
        return offerImportExportCopyOfferWithRequestBuilder(offerId: offerId, createOfferModel: createOfferModel, versionId: versionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Копировать акцию по Id.
     - POST /v1.2/Offers/{offerId}/Copy
     - parameter offerId: (path) Id акции. 
     - parameter createOfferModel: (query) Модель для создания акции. 
     - parameter versionId: (query) Id версии. Если пусто, то последняя подтверждённая. (optional)
     - returns: RequestBuilder<ResultModelOfInt32> 
     */
    open class func offerImportExportCopyOfferWithRequestBuilder(offerId: Int, createOfferModel: CreateOfferModel, versionId: Int? = nil) -> RequestBuilder<ResultModelOfInt32> {
        var localVariablePath = "/v1.2/Offers/{offerId}/Copy"
        let offerIdPreEscape = "\(APIHelper.mapValueToPathItem(offerId))"
        let offerIdPostEscape = offerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerId}", with: offerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "createOfferModel": createOfferModel.encodeToJSON(),
            "versionId": versionId?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfInt32>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Экспортировать акцию по Id в формате json.
     
     - parameter offerId: (path) Id акции. 
     - parameter versionId: (query) Id версии. Если пусто, то последняя подтверждённая. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offerImportExportExportOfferAsJson(offerId: Int, versionId: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return offerImportExportExportOfferAsJsonWithRequestBuilder(offerId: offerId, versionId: versionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Экспортировать акцию по Id в формате json.
     - GET /v1.2/Offers/{offerId}/Export/Json
     - parameter offerId: (path) Id акции. 
     - parameter versionId: (query) Id версии. Если пусто, то последняя подтверждённая. (optional)
     - returns: RequestBuilder<String> 
     */
    open class func offerImportExportExportOfferAsJsonWithRequestBuilder(offerId: Int, versionId: Int? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/v1.2/Offers/{offerId}/Export/Json"
        let offerIdPreEscape = "\(APIHelper.mapValueToPathItem(offerId))"
        let offerIdPostEscape = offerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerId}", with: offerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "versionId": versionId?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Экспортировать акцию по Id в формате xml.
     
     - parameter offerId: (path) Id акции. 
     - parameter versionId: (query) Id версии. Если пусто, то последняя подтверждённая. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offerImportExportExportOfferAsXml(offerId: Int, versionId: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return offerImportExportExportOfferAsXmlWithRequestBuilder(offerId: offerId, versionId: versionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Экспортировать акцию по Id в формате xml.
     - GET /v1.2/Offers/{offerId}/Export/Xml
     - parameter offerId: (path) Id акции. 
     - parameter versionId: (query) Id версии. Если пусто, то последняя подтверждённая. (optional)
     - returns: RequestBuilder<String> 
     */
    open class func offerImportExportExportOfferAsXmlWithRequestBuilder(offerId: Int, versionId: Int? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/v1.2/Offers/{offerId}/Export/Xml"
        let offerIdPreEscape = "\(APIHelper.mapValueToPathItem(offerId))"
        let offerIdPostEscape = offerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerId}", with: offerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "versionId": versionId?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Экспортировать все акции в формате json.
     
     - parameter fromDate: (query) Начальная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter toDate: (query) Конечная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter name: (query) Подстрока для поиска по названию акции. (optional)
     - parameter merchantIds: (query) Внутренние идентификаторы торговых точек через запятую, для которых созданы акции. (optional)
     - parameter creatorIds: (query) Внутренние идентификаторы пользователей через запятую, создавших акции. (optional)
     - parameter viewStates: (query) Состояния акций по времени действия (Future — будущие, Present — действуют, Past — прошедшие). (optional)
     - parameter sortColumn: (query) Тип сортировки акций в списке (Priority — по приоритету, Name — по названию, BeginTime — по времени начала, EndTime — по времени завершения, State — по статусу, AttachDate — по дате прикрепления к маркетинговой кампании, CreationDate — по дате создания, Changedate — по дате редактирования. (optional)
     - parameter direction: (query) Направление сортировки (true - по возрастанию, false - по убыванию). (optional)
     - parameter states: (query) Состояние акции (Run — запущена, Stop — остановлена, Archived — в архиве). (optional)
     - parameter partnerIds: (query) Внутренние идентификаторы Партнеров через запятую, для которых созданы акции. (optional)
     - parameter categoryIds: (query) Внутренние идентификаторы категорий акций через запятую. (optional)
     - parameter priorityLowerBound: (query) Нижняя граница приоритета акций. (optional)
     - parameter priorityUpperBound: (query) Верхняя граница приоритета акций. (optional)
     - parameter marketingCampaignId: (query) Внутренний идентификатор маркетинговой кампании, в рамках которой созданы акции. (optional)
     - parameter includeMarketingCampaignId: (query) Признак включения в список акций, входящих в указанную маркетинговую кампанию (true — включать, false — исключать). (optional)
     - parameter loyaltyProgramIds: (query) Внутренние идентификаторы Программ лояльности через запятую. (optional)
     - parameter excludeMarketingCampaign: (query) Признак исключения из списка всех акций, входящих в какую-либо маркетинговую кампанию (true — исключить, false — не исключать). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offerImportExportGetOffersAsJson(fromDate: String? = nil, toDate: String? = nil, from: Int? = nil, count: Int? = nil, name: String? = nil, merchantIds: String? = nil, creatorIds: String? = nil, viewStates: [OfferViewState]? = nil, sortColumn: OfferSortColumn? = nil, direction: Bool? = nil, states: [OfferState]? = nil, partnerIds: String? = nil, categoryIds: String? = nil, priorityLowerBound: Int? = nil, priorityUpperBound: Int? = nil, marketingCampaignId: Int? = nil, includeMarketingCampaignId: Bool? = nil, loyaltyProgramIds: String? = nil, excludeMarketingCampaign: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return offerImportExportGetOffersAsJsonWithRequestBuilder(fromDate: fromDate, toDate: toDate, from: from, count: count, name: name, merchantIds: merchantIds, creatorIds: creatorIds, viewStates: viewStates, sortColumn: sortColumn, direction: direction, states: states, partnerIds: partnerIds, categoryIds: categoryIds, priorityLowerBound: priorityLowerBound, priorityUpperBound: priorityUpperBound, marketingCampaignId: marketingCampaignId, includeMarketingCampaignId: includeMarketingCampaignId, loyaltyProgramIds: loyaltyProgramIds, excludeMarketingCampaign: excludeMarketingCampaign).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Экспортировать все акции в формате json.
     - GET /v1.2/Offers/Export/Json
     - parameter fromDate: (query) Начальная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter toDate: (query) Конечная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter name: (query) Подстрока для поиска по названию акции. (optional)
     - parameter merchantIds: (query) Внутренние идентификаторы торговых точек через запятую, для которых созданы акции. (optional)
     - parameter creatorIds: (query) Внутренние идентификаторы пользователей через запятую, создавших акции. (optional)
     - parameter viewStates: (query) Состояния акций по времени действия (Future — будущие, Present — действуют, Past — прошедшие). (optional)
     - parameter sortColumn: (query) Тип сортировки акций в списке (Priority — по приоритету, Name — по названию, BeginTime — по времени начала, EndTime — по времени завершения, State — по статусу, AttachDate — по дате прикрепления к маркетинговой кампании, CreationDate — по дате создания, Changedate — по дате редактирования. (optional)
     - parameter direction: (query) Направление сортировки (true - по возрастанию, false - по убыванию). (optional)
     - parameter states: (query) Состояние акции (Run — запущена, Stop — остановлена, Archived — в архиве). (optional)
     - parameter partnerIds: (query) Внутренние идентификаторы Партнеров через запятую, для которых созданы акции. (optional)
     - parameter categoryIds: (query) Внутренние идентификаторы категорий акций через запятую. (optional)
     - parameter priorityLowerBound: (query) Нижняя граница приоритета акций. (optional)
     - parameter priorityUpperBound: (query) Верхняя граница приоритета акций. (optional)
     - parameter marketingCampaignId: (query) Внутренний идентификатор маркетинговой кампании, в рамках которой созданы акции. (optional)
     - parameter includeMarketingCampaignId: (query) Признак включения в список акций, входящих в указанную маркетинговую кампанию (true — включать, false — исключать). (optional)
     - parameter loyaltyProgramIds: (query) Внутренние идентификаторы Программ лояльности через запятую. (optional)
     - parameter excludeMarketingCampaign: (query) Признак исключения из списка всех акций, входящих в какую-либо маркетинговую кампанию (true — исключить, false — не исключать). (optional)
     - returns: RequestBuilder<String> 
     */
    open class func offerImportExportGetOffersAsJsonWithRequestBuilder(fromDate: String? = nil, toDate: String? = nil, from: Int? = nil, count: Int? = nil, name: String? = nil, merchantIds: String? = nil, creatorIds: String? = nil, viewStates: [OfferViewState]? = nil, sortColumn: OfferSortColumn? = nil, direction: Bool? = nil, states: [OfferState]? = nil, partnerIds: String? = nil, categoryIds: String? = nil, priorityLowerBound: Int? = nil, priorityUpperBound: Int? = nil, marketingCampaignId: Int? = nil, includeMarketingCampaignId: Bool? = nil, loyaltyProgramIds: String? = nil, excludeMarketingCampaign: Bool? = nil) -> RequestBuilder<String> {
        let localVariablePath = "/v1.2/Offers/Export/Json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fromDate": fromDate?.encodeToJSON(),
            "toDate": toDate?.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "merchantIds": merchantIds?.encodeToJSON(),
            "creatorIds": creatorIds?.encodeToJSON(),
            "viewStates": viewStates?.encodeToJSON(),
            "sortColumn": sortColumn?.encodeToJSON(),
            "direction": direction?.encodeToJSON(),
            "states": states?.encodeToJSON(),
            "partnerIds": partnerIds?.encodeToJSON(),
            "categoryIds": categoryIds?.encodeToJSON(),
            "priority.lowerBound": priorityLowerBound?.encodeToJSON(),
            "priority.upperBound": priorityUpperBound?.encodeToJSON(),
            "marketingCampaignId": marketingCampaignId?.encodeToJSON(),
            "includeMarketingCampaignId": includeMarketingCampaignId?.encodeToJSON(),
            "loyaltyProgramIds": loyaltyProgramIds?.encodeToJSON(),
            "excludeMarketingCampaign": excludeMarketingCampaign?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Экспортировать все акции в формате xml.
     
     - parameter fromDate: (query) Начальная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter toDate: (query) Конечная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter name: (query) Подстрока для поиска по названию акции. (optional)
     - parameter merchantIds: (query) Внутренние идентификаторы торговых точек через запятую, для которых созданы акции. (optional)
     - parameter creatorIds: (query) Внутренние идентификаторы пользователей через запятую, создавших акции. (optional)
     - parameter viewStates: (query) Состояния акций по времени действия (Future — будущие, Present — действуют, Past — прошедшие). (optional)
     - parameter sortColumn: (query) Тип сортировки акций в списке (Priority — по приоритету, Name — по названию, BeginTime — по времени начала, EndTime — по времени завершения, State — по статусу, AttachDate — по дате прикрепления к маркетинговой кампании, CreationDate — по дате создания, Changedate — по дате редактирования. (optional)
     - parameter direction: (query) Направление сортировки (true - по возрастанию, false - по убыванию). (optional)
     - parameter states: (query) Состояние акции (Run — запущена, Stop — остановлена, Archived — в архиве). (optional)
     - parameter partnerIds: (query) Внутренние идентификаторы Партнеров через запятую, для которых созданы акции. (optional)
     - parameter categoryIds: (query) Внутренние идентификаторы категорий акций через запятую. (optional)
     - parameter priorityLowerBound: (query) Нижняя граница приоритета акций. (optional)
     - parameter priorityUpperBound: (query) Верхняя граница приоритета акций. (optional)
     - parameter marketingCampaignId: (query) Внутренний идентификатор маркетинговой кампании, в рамках которой созданы акции. (optional)
     - parameter includeMarketingCampaignId: (query) Признак включения в список акций, входящих в указанную маркетинговую кампанию (true — включать, false — исключать). (optional)
     - parameter loyaltyProgramIds: (query) Внутренние идентификаторы Программ лояльности через запятую. (optional)
     - parameter excludeMarketingCampaign: (query) Признак исключения из списка всех акций, входящих в какую-либо маркетинговую кампанию (true — исключить, false — не исключать). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offerImportExportGetOffersAsXml(fromDate: String? = nil, toDate: String? = nil, from: Int? = nil, count: Int? = nil, name: String? = nil, merchantIds: String? = nil, creatorIds: String? = nil, viewStates: [OfferViewState]? = nil, sortColumn: OfferSortColumn? = nil, direction: Bool? = nil, states: [OfferState]? = nil, partnerIds: String? = nil, categoryIds: String? = nil, priorityLowerBound: Int? = nil, priorityUpperBound: Int? = nil, marketingCampaignId: Int? = nil, includeMarketingCampaignId: Bool? = nil, loyaltyProgramIds: String? = nil, excludeMarketingCampaign: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return offerImportExportGetOffersAsXmlWithRequestBuilder(fromDate: fromDate, toDate: toDate, from: from, count: count, name: name, merchantIds: merchantIds, creatorIds: creatorIds, viewStates: viewStates, sortColumn: sortColumn, direction: direction, states: states, partnerIds: partnerIds, categoryIds: categoryIds, priorityLowerBound: priorityLowerBound, priorityUpperBound: priorityUpperBound, marketingCampaignId: marketingCampaignId, includeMarketingCampaignId: includeMarketingCampaignId, loyaltyProgramIds: loyaltyProgramIds, excludeMarketingCampaign: excludeMarketingCampaign).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Экспортировать все акции в формате xml.
     - GET /v1.2/Offers/Export/Xml
     - parameter fromDate: (query) Начальная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter toDate: (query) Конечная дата периода в формате 0000-00-00T00:00:00Z. (optional)
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter name: (query) Подстрока для поиска по названию акции. (optional)
     - parameter merchantIds: (query) Внутренние идентификаторы торговых точек через запятую, для которых созданы акции. (optional)
     - parameter creatorIds: (query) Внутренние идентификаторы пользователей через запятую, создавших акции. (optional)
     - parameter viewStates: (query) Состояния акций по времени действия (Future — будущие, Present — действуют, Past — прошедшие). (optional)
     - parameter sortColumn: (query) Тип сортировки акций в списке (Priority — по приоритету, Name — по названию, BeginTime — по времени начала, EndTime — по времени завершения, State — по статусу, AttachDate — по дате прикрепления к маркетинговой кампании, CreationDate — по дате создания, Changedate — по дате редактирования. (optional)
     - parameter direction: (query) Направление сортировки (true - по возрастанию, false - по убыванию). (optional)
     - parameter states: (query) Состояние акции (Run — запущена, Stop — остановлена, Archived — в архиве). (optional)
     - parameter partnerIds: (query) Внутренние идентификаторы Партнеров через запятую, для которых созданы акции. (optional)
     - parameter categoryIds: (query) Внутренние идентификаторы категорий акций через запятую. (optional)
     - parameter priorityLowerBound: (query) Нижняя граница приоритета акций. (optional)
     - parameter priorityUpperBound: (query) Верхняя граница приоритета акций. (optional)
     - parameter marketingCampaignId: (query) Внутренний идентификатор маркетинговой кампании, в рамках которой созданы акции. (optional)
     - parameter includeMarketingCampaignId: (query) Признак включения в список акций, входящих в указанную маркетинговую кампанию (true — включать, false — исключать). (optional)
     - parameter loyaltyProgramIds: (query) Внутренние идентификаторы Программ лояльности через запятую. (optional)
     - parameter excludeMarketingCampaign: (query) Признак исключения из списка всех акций, входящих в какую-либо маркетинговую кампанию (true — исключить, false — не исключать). (optional)
     - returns: RequestBuilder<String> 
     */
    open class func offerImportExportGetOffersAsXmlWithRequestBuilder(fromDate: String? = nil, toDate: String? = nil, from: Int? = nil, count: Int? = nil, name: String? = nil, merchantIds: String? = nil, creatorIds: String? = nil, viewStates: [OfferViewState]? = nil, sortColumn: OfferSortColumn? = nil, direction: Bool? = nil, states: [OfferState]? = nil, partnerIds: String? = nil, categoryIds: String? = nil, priorityLowerBound: Int? = nil, priorityUpperBound: Int? = nil, marketingCampaignId: Int? = nil, includeMarketingCampaignId: Bool? = nil, loyaltyProgramIds: String? = nil, excludeMarketingCampaign: Bool? = nil) -> RequestBuilder<String> {
        let localVariablePath = "/v1.2/Offers/Export/Xml"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fromDate": fromDate?.encodeToJSON(),
            "toDate": toDate?.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "merchantIds": merchantIds?.encodeToJSON(),
            "creatorIds": creatorIds?.encodeToJSON(),
            "viewStates": viewStates?.encodeToJSON(),
            "sortColumn": sortColumn?.encodeToJSON(),
            "direction": direction?.encodeToJSON(),
            "states": states?.encodeToJSON(),
            "partnerIds": partnerIds?.encodeToJSON(),
            "categoryIds": categoryIds?.encodeToJSON(),
            "priority.lowerBound": priorityLowerBound?.encodeToJSON(),
            "priority.upperBound": priorityUpperBound?.encodeToJSON(),
            "marketingCampaignId": marketingCampaignId?.encodeToJSON(),
            "includeMarketingCampaignId": includeMarketingCampaignId?.encodeToJSON(),
            "loyaltyProgramIds": loyaltyProgramIds?.encodeToJSON(),
            "excludeMarketingCampaign": excludeMarketingCampaign?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Импортировать акции.
     
     - parameter importModel: (query) Модель импортируемых акций. 
     - parameter cancelDrafts: (query) Отклонять ли черновики при импорте существующих акций. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func offerImportExportPostOffers(importModel: OffersImportModel, cancelDrafts: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfOffersImportResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return offerImportExportPostOffersWithRequestBuilder(importModel: importModel, cancelDrafts: cancelDrafts).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Импортировать акции.
     - POST /v1.2/Offers/Import
     - parameter importModel: (query) Модель импортируемых акций. 
     - parameter cancelDrafts: (query) Отклонять ли черновики при импорте существующих акций. (optional)
     - returns: RequestBuilder<ResultModelOfOffersImportResponse> 
     */
    open class func offerImportExportPostOffersWithRequestBuilder(importModel: OffersImportModel, cancelDrafts: Bool? = nil) -> RequestBuilder<ResultModelOfOffersImportResponse> {
        let localVariablePath = "/v1.2/Offers/Import"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "importModel": importModel.encodeToJSON(),
            "cancelDrafts": cancelDrafts?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfOffersImportResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
