//
// CustomerIdentifiersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CustomerIdentifiersAPI {

    /**
     Блокирование идентификатора.
     
     - parameter personId: (path) Id пользователя. 
     - parameter id: (path) Id идентификатора. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerIdentifiersBlockIdentifier(personId: Int, id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return customerIdentifiersBlockIdentifierWithRequestBuilder(personId: personId, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Блокирование идентификатора.
     - POST /v1.2/users/{personId}/identifiers/{id}/block
     - parameter personId: (path) Id пользователя. 
     - parameter id: (path) Id идентификатора. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func customerIdentifiersBlockIdentifierWithRequestBuilder(personId: Int, id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/identifiers/{id}/block"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить идентификатор по ID.
     
     - parameter personId: (path) Id пользователя. 
     - parameter id: (path) Id идентификатор. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerIdentifiersGetIdentifier(personId: Int, id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfIdentifierModel?, _ error: Error?) -> Void)) -> RequestTask {
        return customerIdentifiersGetIdentifierWithRequestBuilder(personId: personId, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить идентификатор по ID.
     - GET /v1.2/users/{personId}/identifiers/{id}
     - parameter personId: (path) Id пользователя. 
     - parameter id: (path) Id идентификатор. 
     - returns: RequestBuilder<ResultModelOfIdentifierModel> 
     */
    open class func customerIdentifiersGetIdentifierWithRequestBuilder(personId: Int, id: Int) -> RequestBuilder<ResultModelOfIdentifierModel> {
        var localVariablePath = "/v1.2/users/{personId}/identifiers/{id}"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfIdentifierModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить список идентификаторов пользователя.
     
     - parameter personId: (path) Id пользователя. 
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerIdentifiersGetIdentifiers(personId: Int, from: Int? = nil, count: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfIdentifierModel?, _ error: Error?) -> Void)) -> RequestTask {
        return customerIdentifiersGetIdentifiersWithRequestBuilder(personId: personId, from: from, count: count).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить список идентификаторов пользователя.
     - GET /v1.2/users/{personId}/identifiers
     - parameter personId: (path) Id пользователя. 
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfIdentifierModel> 
     */
    open class func customerIdentifiersGetIdentifiersWithRequestBuilder(personId: Int, from: Int? = nil, count: Int? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfIdentifierModel> {
        var localVariablePath = "/v1.2/users/{personId}/identifiers"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfIdentifierModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Разблокирование идентификатора.
     
     - parameter personId: (path) Id пользователя. 
     - parameter id: (path) Id идентификатора. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerIdentifiersUnblockIdentifier(personId: Int, id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return customerIdentifiersUnblockIdentifierWithRequestBuilder(personId: personId, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Разблокирование идентификатора.
     - POST /v1.2/users/{personId}/identifiers/{id}/unblock
     - parameter personId: (path) Id пользователя. 
     - parameter id: (path) Id идентификатора. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func customerIdentifiersUnblockIdentifierWithRequestBuilder(personId: Int, id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/identifiers/{id}/unblock"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
