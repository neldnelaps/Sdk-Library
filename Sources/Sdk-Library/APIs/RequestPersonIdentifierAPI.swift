//
// RequestPersonIdentifierAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class RequestPersonIdentifierAPI {

    /**
     Возвращает идентификацию пользователя в запросах от кассы по id.
     
     - parameter id: (path) Id запроса. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func requestPersonIdentifierGet(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfRequestPersonIdentifierViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return requestPersonIdentifierGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает идентификацию пользователя в запросах от кассы по id.
     - GET /v1.2/RequestPersonIdentifiers/{id}
     - parameter id: (path) Id запроса. 
     - returns: RequestBuilder<ResultModelOfRequestPersonIdentifierViewModel> 
     */
    open class func requestPersonIdentifierGetWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfRequestPersonIdentifierViewModel> {
        var localVariablePath = "/v1.2/RequestPersonIdentifiers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfRequestPersonIdentifierViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает список всех идентификаций пользователей в запросах от кассы.
     
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter loyaltyProgramId: (query) Идентификатор программы лояльности. (optional)
     - parameter modeView: (query) Перечисление режимов отображения. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func requestPersonIdentifierGetList(from: Int? = nil, count: Int? = nil, loyaltyProgramId: Int? = nil, modeView: ArchivedState? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfRequestPersonIdentifierViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return requestPersonIdentifierGetListWithRequestBuilder(from: from, count: count, loyaltyProgramId: loyaltyProgramId, modeView: modeView).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает список всех идентификаций пользователей в запросах от кассы.
     - GET /v1.2/RequestPersonIdentifiers
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter loyaltyProgramId: (query) Идентификатор программы лояльности. (optional)
     - parameter modeView: (query) Перечисление режимов отображения. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfRequestPersonIdentifierViewModel> 
     */
    open class func requestPersonIdentifierGetListWithRequestBuilder(from: Int? = nil, count: Int? = nil, loyaltyProgramId: Int? = nil, modeView: ArchivedState? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfRequestPersonIdentifierViewModel> {
        let localVariablePath = "/v1.2/RequestPersonIdentifiers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "loyaltyProgramId": loyaltyProgramId?.encodeToJSON(),
            "modeView": modeView?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfRequestPersonIdentifierViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Восстановление идентификации пользователя в запросах от кассы.
     
     - parameter id: (path) Id запроса. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func requestPersonIdentifierRestore(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return requestPersonIdentifierRestoreWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Восстановление идентификации пользователя в запросах от кассы.
     - POST /v1.2/RequestPersonIdentifiers/{id}/restore
     - parameter id: (path) Id запроса. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func requestPersonIdentifierRestoreWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/RequestPersonIdentifiers/{id}/restore"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
