//
// UserCardsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UserCardsAPI {

    /**
     Отменяет начатый процесс объединения карт.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userCardsAttachCardCancel(personId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userCardsAttachCardCancelWithRequestBuilder(personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Отменяет начатый процесс объединения карт.
     - POST /v1.2/users/{personId}/cards/Attach/Cancel
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func userCardsAttachCardCancelWithRequestBuilder(personId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/cards/Attach/Cancel"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Завершает начатый процесс объединения карт.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter confirmCodeModel: (query) Модель кода подтверждения. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userCardsAttachCardConfirm(personId: Int, confirmCodeModel: ConfirmCodeModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userCardsAttachCardConfirmWithRequestBuilder(personId: personId, confirmCodeModel: confirmCodeModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Завершает начатый процесс объединения карт.
     - POST /v1.2/users/{personId}/cards/Attach/Confirm
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter confirmCodeModel: (query) Модель кода подтверждения. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func userCardsAttachCardConfirmWithRequestBuilder(personId: Int, confirmCodeModel: ConfirmCodeModel) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/cards/Attach/Confirm"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "confirmCodeModel": confirmCodeModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Оформляет повторную отправку кода подтверждения при процессе объединения карт.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userCardsAttachCardSendConfirmCode(personId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userCardsAttachCardSendConfirmCodeWithRequestBuilder(personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Оформляет повторную отправку кода подтверждения при процессе объединения карт.
     - POST /v1.2/users/{personId}/cards/Attach/SendConfirmCode
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func userCardsAttachCardSendConfirmCodeWithRequestBuilder(personId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/cards/Attach/SendConfirmCode"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает текущее состояние процесса присоединения карты.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userCardsAttachCardState(personId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfAttachCardState?, _ error: Error?) -> Void)) -> RequestTask {
        return userCardsAttachCardStateWithRequestBuilder(personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает текущее состояние процесса присоединения карты.
     - GET /v1.2/users/{personId}/cards/Attach
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - returns: RequestBuilder<ResultModelOfAttachCardState> 
     */
    open class func userCardsAttachCardStateWithRequestBuilder(personId: Int) -> RequestBuilder<ResultModelOfAttachCardState> {
        var localVariablePath = "/v1.2/users/{personId}/cards/Attach"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfAttachCardState>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список карт клиента.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter cardShowMode: (query) Фильтр карт клиента. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userCardsGetCardsInfo(personId: Int, cardShowMode: CardShowMode? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfSystemApiCardInfoModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userCardsGetCardsInfoWithRequestBuilder(personId: personId, cardShowMode: cardShowMode).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список карт клиента.
     - GET /v1.2/users/{personId}/cards
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter cardShowMode: (query) Фильтр карт клиента. (optional)
     - returns: RequestBuilder<ResultModelOfListOfSystemApiCardInfoModel> 
     */
    open class func userCardsGetCardsInfoWithRequestBuilder(personId: Int, cardShowMode: CardShowMode? = nil) -> RequestBuilder<ResultModelOfListOfSystemApiCardInfoModel> {
        var localVariablePath = "/v1.2/users/{personId}/cards"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "cardShowMode": cardShowMode?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfSystemApiCardInfoModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о возможности прикрепления физической карты.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userCardsSetCardInfo(personId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfSetCardActionInfoModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userCardsSetCardInfoWithRequestBuilder(personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о возможности прикрепления физической карты.
     - GET /v1.2/users/{personId}/cards/Set
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - returns: RequestBuilder<ResultModelOfSetCardActionInfoModel> 
     */
    open class func userCardsSetCardInfoWithRequestBuilder(personId: Int) -> RequestBuilder<ResultModelOfSetCardActionInfoModel> {
        var localVariablePath = "/v1.2/users/{personId}/cards/Set"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfSetCardActionInfoModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
