//
// CardEmissionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CardEmissionAPI {

    /**
     Создать выпуск карт из csv файла.
     
     - parameter emission: (query) Модель выпуска. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cardEmissionCreateCardEmissionFromCsv(emission: CardEmissionViewModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfInt32?, _ error: Error?) -> Void)) -> RequestTask {
        return cardEmissionCreateCardEmissionFromCsvWithRequestBuilder(emission: emission).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Создать выпуск карт из csv файла.
     - PUT /v1.2/emissions/cards/import
     - parameter emission: (query) Модель выпуска. 
     - returns: RequestBuilder<ResultModelOfInt32> 
     */
    open class func cardEmissionCreateCardEmissionFromCsvWithRequestBuilder(emission: CardEmissionViewModel) -> RequestBuilder<ResultModelOfInt32> {
        let localVariablePath = "/v1.2/emissions/cards/import"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "emission": emission.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfInt32>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о пакете загрузки.
     
     - parameter id: (path) Ид. пакета загрузки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cardEmissionGetBatch(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BatchUploadModel?, _ error: Error?) -> Void)) -> RequestTask {
        return cardEmissionGetBatchWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о пакете загрузки.
     - GET /v1.2/emissions/cards/import/{id}
     - parameter id: (path) Ид. пакета загрузки. 
     - returns: RequestBuilder<BatchUploadModel> 
     */
    open class func cardEmissionGetBatchWithRequestBuilder(id: Int) -> RequestBuilder<BatchUploadModel> {
        var localVariablePath = "/v1.2/emissions/cards/import/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BatchUploadModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить выпуск карт по id.
     
     - parameter id: (path) Id выпуска. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cardEmissionGetCardEmission(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfCardEmissionViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return cardEmissionGetCardEmissionWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить выпуск карт по id.
     - GET /v1.2/emissions/cards/{id}
     - parameter id: (path) Id выпуска. 
     - returns: RequestBuilder<ResultModelOfCardEmissionViewModel> 
     */
    open class func cardEmissionGetCardEmissionWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfCardEmissionViewModel> {
        var localVariablePath = "/v1.2/emissions/cards/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfCardEmissionViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить выпуск в виде CSV файла.
     
     - parameter id: (path) Id выпуска карт. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cardEmissionGetCardEmissionCsv(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return cardEmissionGetCardEmissionCsvWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить выпуск в виде CSV файла.
     - GET /v1.2/emissions/cards/{id}/export
     - parameter id: (path) Id выпуска карт. 
     - returns: RequestBuilder<String> 
     */
    open class func cardEmissionGetCardEmissionCsvWithRequestBuilder(id: Int) -> RequestBuilder<String> {
        var localVariablePath = "/v1.2/emissions/cards/{id}/export"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить информацию по фоновой фасовке карт для указанной очереди.
     
     - parameter id: (path) Id выпуска карт. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cardEmissionGetCardEmissionPackingQueueProgress(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfCardsPackingQueueInfo?, _ error: Error?) -> Void)) -> RequestTask {
        return cardEmissionGetCardEmissionPackingQueueProgressWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить информацию по фоновой фасовке карт для указанной очереди.
     - GET /v1.2/emissions/cards/{id}/progress
     - parameter id: (path) Id выпуска карт. 
     - returns: RequestBuilder<ResultModelOfCardsPackingQueueInfo> 
     */
    open class func cardEmissionGetCardEmissionPackingQueueProgressWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfCardsPackingQueueInfo> {
        var localVariablePath = "/v1.2/emissions/cards/{id}/progress"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfCardsPackingQueueInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить список выпусков карт.
     
     - parameter filterFrom: (query) Начало выборки. (optional)
     - parameter filterCount: (query) Количество. (optional)
     - parameter filterLoyaltyPrograms: (query) Список ПЛ для фильтра по ПЛ. (optional)
     - parameter filterNameText: (query) Текст содержащийся в описании. (optional)
     - parameter filterPackingState: (query) Состояние упаковки. (optional)
     - parameter filterActivationType: (query) Тип активации. (optional)
     - parameter filterCardEmissionType: (query) Тип эмиссии карты. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cardEmissionGetCardEmissions(filterFrom: Int? = nil, filterCount: Int? = nil, filterLoyaltyPrograms: [Int]? = nil, filterNameText: String? = nil, filterPackingState: CardEmissionPackingState? = nil, filterActivationType: Bool? = nil, filterCardEmissionType: CardEmissionType? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfCardEmissionViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return cardEmissionGetCardEmissionsWithRequestBuilder(filterFrom: filterFrom, filterCount: filterCount, filterLoyaltyPrograms: filterLoyaltyPrograms, filterNameText: filterNameText, filterPackingState: filterPackingState, filterActivationType: filterActivationType, filterCardEmissionType: filterCardEmissionType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить список выпусков карт.
     - GET /v1.2/emissions/cards
     - parameter filterFrom: (query) Начало выборки. (optional)
     - parameter filterCount: (query) Количество. (optional)
     - parameter filterLoyaltyPrograms: (query) Список ПЛ для фильтра по ПЛ. (optional)
     - parameter filterNameText: (query) Текст содержащийся в описании. (optional)
     - parameter filterPackingState: (query) Состояние упаковки. (optional)
     - parameter filterActivationType: (query) Тип активации. (optional)
     - parameter filterCardEmissionType: (query) Тип эмиссии карты. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfCardEmissionViewModel> 
     */
    open class func cardEmissionGetCardEmissionsWithRequestBuilder(filterFrom: Int? = nil, filterCount: Int? = nil, filterLoyaltyPrograms: [Int]? = nil, filterNameText: String? = nil, filterPackingState: CardEmissionPackingState? = nil, filterActivationType: Bool? = nil, filterCardEmissionType: CardEmissionType? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfCardEmissionViewModel> {
        let localVariablePath = "/v1.2/emissions/cards"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.from": filterFrom?.encodeToJSON(),
            "filter.count": filterCount?.encodeToJSON(),
            "filter.loyaltyPrograms": filterLoyaltyPrograms?.encodeToJSON(),
            "filter.nameText": filterNameText?.encodeToJSON(),
            "filter.packingState": filterPackingState?.encodeToJSON(),
            "filter.activationType": filterActivationType?.encodeToJSON(),
            "filter.cardEmissionType": filterCardEmissionType?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfCardEmissionViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Расфасовать выпуск карт.
     
     - parameter id: (path) Id выпуска карт. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cardEmissionPackCardEmission(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return cardEmissionPackCardEmissionWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Расфасовать выпуск карт.
     - POST /v1.2/emissions/cards/{id}/pack
     - parameter id: (path) Id выпуска карт. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func cardEmissionPackCardEmissionWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/emissions/cards/{id}/pack"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
