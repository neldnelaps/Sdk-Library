//
// PartnerLegalAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PartnerLegalAPI {

    /**
     Возвращает информацию о дебетовых счетах, принадлежащих юридическому лицу.
     
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter legalId: (path) Внутренний идентификатор юридического лица. 
     - parameter loyaltyProgramId: (query) Внутренний идентификатор Программы лояльности. 
     - parameter name: (query) Подстрока для поиска по названию валюты. (optional)
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerLegalGetAccounts(partnerId: Int, legalId: Int, loyaltyProgramId: Int, name: String? = nil, from: Int? = nil, count: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfAccountViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerLegalGetAccountsWithRequestBuilder(partnerId: partnerId, legalId: legalId, loyaltyProgramId: loyaltyProgramId, name: name, from: from, count: count).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о дебетовых счетах, принадлежащих юридическому лицу.
     - GET /v1.2/partners/{partnerId}/legals/{legalId}/accounts
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter legalId: (path) Внутренний идентификатор юридического лица. 
     - parameter loyaltyProgramId: (query) Внутренний идентификатор Программы лояльности. 
     - parameter name: (query) Подстрока для поиска по названию валюты. (optional)
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfAccountViewModel> 
     */
    open class func partnerLegalGetAccountsWithRequestBuilder(partnerId: Int, legalId: Int, loyaltyProgramId: Int, name: String? = nil, from: Int? = nil, count: Int? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfAccountViewModel> {
        var localVariablePath = "/v1.2/partners/{partnerId}/legals/{legalId}/accounts"
        let partnerIdPreEscape = "\(APIHelper.mapValueToPathItem(partnerId))"
        let partnerIdPostEscape = partnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{partnerId}", with: partnerIdPostEscape, options: .literal, range: nil)
        let legalIdPreEscape = "\(APIHelper.mapValueToPathItem(legalId))"
        let legalIdPostEscape = legalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{legalId}", with: legalIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "loyaltyProgramId": loyaltyProgramId.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfAccountViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о юридическом лице Партнера.
     
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter legalId: (path) Внутренний идентификатор юридического лица. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerLegalGetLegal(partnerId: Int, legalId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfLegalViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerLegalGetLegalWithRequestBuilder(partnerId: partnerId, legalId: legalId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о юридическом лице Партнера.
     - GET /v1.2/partners/{partnerId}/legals/{legalId}
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter legalId: (path) Внутренний идентификатор юридического лица. 
     - returns: RequestBuilder<ResultModelOfLegalViewModel> 
     */
    open class func partnerLegalGetLegalWithRequestBuilder(partnerId: Int, legalId: Int) -> RequestBuilder<ResultModelOfLegalViewModel> {
        var localVariablePath = "/v1.2/partners/{partnerId}/legals/{legalId}"
        let partnerIdPreEscape = "\(APIHelper.mapValueToPathItem(partnerId))"
        let partnerIdPostEscape = partnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{partnerId}", with: partnerIdPostEscape, options: .literal, range: nil)
        let legalIdPreEscape = "\(APIHelper.mapValueToPathItem(legalId))"
        let legalIdPostEscape = legalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{legalId}", with: legalIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfLegalViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о балансах юридического лица.
     
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter legalId: (path) Внутренний идентификатор юридического лица. 
     - parameter loyaltyProgramId: (query) Внутренний идентификатор Программы лояльности. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerLegalGetLegalBalances(partnerId: Int, legalId: Int, loyaltyProgramId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfMoneyViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerLegalGetLegalBalancesWithRequestBuilder(partnerId: partnerId, legalId: legalId, loyaltyProgramId: loyaltyProgramId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о балансах юридического лица.
     - GET /v1.2/partners/{partnerId}/legals/{legalId}/balances
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter legalId: (path) Внутренний идентификатор юридического лица. 
     - parameter loyaltyProgramId: (query) Внутренний идентификатор Программы лояльности. 
     - returns: RequestBuilder<ResultModelOfListOfMoneyViewModel> 
     */
    open class func partnerLegalGetLegalBalancesWithRequestBuilder(partnerId: Int, legalId: Int, loyaltyProgramId: Int) -> RequestBuilder<ResultModelOfListOfMoneyViewModel> {
        var localVariablePath = "/v1.2/partners/{partnerId}/legals/{legalId}/balances"
        let partnerIdPreEscape = "\(APIHelper.mapValueToPathItem(partnerId))"
        let partnerIdPostEscape = partnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{partnerId}", with: partnerIdPostEscape, options: .literal, range: nil)
        let legalIdPreEscape = "\(APIHelper.mapValueToPathItem(legalId))"
        let legalIdPostEscape = legalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{legalId}", with: legalIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "loyaltyProgramId": loyaltyProgramId.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfMoneyViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter partnerId: (path)  
     - parameter from: (query)  (optional)
     - parameter count: (query)  (optional)
     - parameter nameSubstring: (query)  (optional)
     - parameter logicalNameSubstring: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter sortingIds: (query)  (optional)
     - parameter code: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerLegalGetLegals(partnerId: Int, from: Int? = nil, count: Int? = nil, nameSubstring: String? = nil, logicalNameSubstring: String? = nil, status: ArchivedState? = nil, sortingIds: [Int]? = nil, code: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfLegalViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerLegalGetLegalsWithRequestBuilder(partnerId: partnerId, from: from, count: count, nameSubstring: nameSubstring, logicalNameSubstring: logicalNameSubstring, status: status, sortingIds: sortingIds, code: code).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1.2/partners/{partnerId}/legals
     - parameter partnerId: (path)  
     - parameter from: (query)  (optional)
     - parameter count: (query)  (optional)
     - parameter nameSubstring: (query)  (optional)
     - parameter logicalNameSubstring: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter sortingIds: (query)  (optional)
     - parameter code: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfLegalViewModel> 
     */
    open class func partnerLegalGetLegalsWithRequestBuilder(partnerId: Int, from: Int? = nil, count: Int? = nil, nameSubstring: String? = nil, logicalNameSubstring: String? = nil, status: ArchivedState? = nil, sortingIds: [Int]? = nil, code: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfLegalViewModel> {
        var localVariablePath = "/v1.2/partners/{partnerId}/legals"
        let partnerIdPreEscape = "\(APIHelper.mapValueToPathItem(partnerId))"
        let partnerIdPostEscape = partnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{partnerId}", with: partnerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "nameSubstring": nameSubstring?.encodeToJSON(),
            "logicalNameSubstring": logicalNameSubstring?.encodeToJSON(),
            "status": status?.encodeToJSON(),
            "sortingIds": sortingIds?.encodeToJSON(),
            "code": code?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfLegalViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Восстанавливает из архива юридическое лицо Партнера.
     
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter legalId: (path) Внутренний идентификатор юридического лица. 
     - parameter changeCode: (query) Необходимость изменения кода юридического лица (true — да, false — нет). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerLegalRestoreLegal(partnerId: Int, legalId: Int, changeCode: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerLegalRestoreLegalWithRequestBuilder(partnerId: partnerId, legalId: legalId, changeCode: changeCode).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Восстанавливает из архива юридическое лицо Партнера.
     - POST /v1.2/partners/{partnerId}/legals/{legalId}/restore
     - parameter partnerId: (path) Внутренний идентификатор Партнера. 
     - parameter legalId: (path) Внутренний идентификатор юридического лица. 
     - parameter changeCode: (query) Необходимость изменения кода юридического лица (true — да, false — нет). (optional)
     - returns: RequestBuilder<ResultModel> 
     */
    open class func partnerLegalRestoreLegalWithRequestBuilder(partnerId: Int, legalId: Int, changeCode: Bool? = nil) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/partners/{partnerId}/legals/{legalId}/restore"
        let partnerIdPreEscape = "\(APIHelper.mapValueToPathItem(partnerId))"
        let partnerIdPostEscape = partnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{partnerId}", with: partnerIdPostEscape, options: .literal, range: nil)
        let legalIdPreEscape = "\(APIHelper.mapValueToPathItem(legalId))"
        let legalIdPostEscape = legalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{legalId}", with: legalIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "changeCode": changeCode?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
