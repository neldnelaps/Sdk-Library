//
// PartnerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PartnerAPI {

    /**
     Возвращает информацию о партнерской карте.
     
     - parameter id: (path) Внутренний идентификатор Партнера. 
     - parameter number: (path) Номер партнерской карты. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerGetExternalCardInfo(id: Int, number: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfExternalCardInfoModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerGetExternalCardInfoWithRequestBuilder(id: id, number: number).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о партнерской карте.
     - GET /v1.2/partners/{id}/Cards/{number}
     - parameter id: (path) Внутренний идентификатор Партнера. 
     - parameter number: (path) Номер партнерской карты. 
     - returns: RequestBuilder<ResultModelOfExternalCardInfoModel> 
     */
    open class func partnerGetExternalCardInfoWithRequestBuilder(id: Int, number: String) -> RequestBuilder<ResultModelOfExternalCardInfoModel> {
        var localVariablePath = "/v1.2/partners/{id}/Cards/{number}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(APIHelper.mapValueToPathItem(number))"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfExternalCardInfoModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о Партнере по его внутреннему идентификатору.
     
     - parameter id: (path) Внутренний идентификатор Партнера. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerGetPartnerByID(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPartnerModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerGetPartnerByIDWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о Партнере по его внутреннему идентификатору.
     - GET /v1.2/partners/{id}
     - parameter id: (path) Внутренний идентификатор Партнера. 
     - returns: RequestBuilder<ResultModelOfPartnerModel> 
     */
    open class func partnerGetPartnerByIDWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfPartnerModel> {
        var localVariablePath = "/v1.2/partners/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPartnerModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список Партнеров.
     
     - parameter filterFrom: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter filterCount: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterName: (query) Подстрока для поиска по названию Партнера. (optional)
     - parameter filterPermission: (query) Выбираются партнеры, на которые текущий пользователь имеет указанное право. (optional)
     - parameter filterOrderByDesc: (query) Сортировка в обратном порядке (true — да, false — нет). (optional)
     - parameter filterSortingIds: (query) Список идентификаторов для первоочередного выбора. (optional)
     - parameter filterLoyaltyPrograms: (query) Список внутренних идентификаторов Программ лояльности. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerGetPartnersByName(filterFrom: Int? = nil, filterCount: Int? = nil, filterName: String? = nil, filterPermission: String? = nil, filterOrderByDesc: Bool? = nil, filterSortingIds: [Int]? = nil, filterLoyaltyPrograms: [Int]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfPartnerModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerGetPartnersByNameWithRequestBuilder(filterFrom: filterFrom, filterCount: filterCount, filterName: filterName, filterPermission: filterPermission, filterOrderByDesc: filterOrderByDesc, filterSortingIds: filterSortingIds, filterLoyaltyPrograms: filterLoyaltyPrograms).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список Партнеров.
     - GET /v1.2/partners
     - parameter filterFrom: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter filterCount: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterName: (query) Подстрока для поиска по названию Партнера. (optional)
     - parameter filterPermission: (query) Выбираются партнеры, на которые текущий пользователь имеет указанное право. (optional)
     - parameter filterOrderByDesc: (query) Сортировка в обратном порядке (true — да, false — нет). (optional)
     - parameter filterSortingIds: (query) Список идентификаторов для первоочередного выбора. (optional)
     - parameter filterLoyaltyPrograms: (query) Список внутренних идентификаторов Программ лояльности. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfPartnerModel> 
     */
    open class func partnerGetPartnersByNameWithRequestBuilder(filterFrom: Int? = nil, filterCount: Int? = nil, filterName: String? = nil, filterPermission: String? = nil, filterOrderByDesc: Bool? = nil, filterSortingIds: [Int]? = nil, filterLoyaltyPrograms: [Int]? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfPartnerModel> {
        let localVariablePath = "/v1.2/partners"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.from": filterFrom?.encodeToJSON(),
            "filter.count": filterCount?.encodeToJSON(),
            "filter.name": filterName?.encodeToJSON(),
            "filter.permission": filterPermission?.encodeToJSON(),
            "filter.orderByDesc": filterOrderByDesc?.encodeToJSON(),
            "filter.sortingIds": filterSortingIds?.encodeToJSON(),
            "filter.loyaltyPrograms": filterLoyaltyPrograms?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfPartnerModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию об ограничении списания бонусов.
     
     - parameter id: (path) Внутренний идентификатор Партнера. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerGetPaymentLimits(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfPaymentLimitViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerGetPaymentLimitsWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию об ограничении списания бонусов.
     - GET /v1.2/partners/{id}/paymentLimit
     - parameter id: (path) Внутренний идентификатор Партнера. 
     - returns: RequestBuilder<ResultModelOfListOfPaymentLimitViewModel> 
     */
    open class func partnerGetPaymentLimitsWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfListOfPaymentLimitViewModel> {
        var localVariablePath = "/v1.2/partners/{id}/paymentLimit"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfPaymentLimitViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Заменяет партнерскую карту на карту системы Loymax.
     
     - parameter id: (path) Внутренний идентификатор Партнера. 
     - parameter number: (path) Номер партнерской карты. 
     - parameter loymaxCardId: (query) Внутренний идентификатор карты системы Loymax. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partnerReplaceExternalCard(id: Int, number: String, loymaxCardId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return partnerReplaceExternalCardWithRequestBuilder(id: id, number: number, loymaxCardId: loymaxCardId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Заменяет партнерскую карту на карту системы Loymax.
     - POST /v1.2/partners/{id}/Cards/{number}/Replace
     - parameter id: (path) Внутренний идентификатор Партнера. 
     - parameter number: (path) Номер партнерской карты. 
     - parameter loymaxCardId: (query) Внутренний идентификатор карты системы Loymax. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func partnerReplaceExternalCardWithRequestBuilder(id: Int, number: String, loymaxCardId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/partners/{id}/Cards/{number}/Replace"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(APIHelper.mapValueToPathItem(number))"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "loymaxCardId": loymaxCardId.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
