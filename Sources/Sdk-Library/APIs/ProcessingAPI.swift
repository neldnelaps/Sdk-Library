//
// ProcessingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ProcessingAPI {

    /**
     Возвращает информацию о количестве средств на счете держателя карты.
     
     - parameter model: (query) Модель запроса на получение информации о количестве средств на счете держателя карты. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func processingBalance(model: BalanceRequestModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfBalanceResponseModel?, _ error: Error?) -> Void)) -> RequestTask {
        return processingBalanceWithRequestBuilder(model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о количестве средств на счете держателя карты.
     - POST /v1.2/Processing/Balance
     - parameter model: (query) Модель запроса на получение информации о количестве средств на счете держателя карты. 
     - returns: RequestBuilder<ResultModelOfBalanceResponseModel> 
     */
    open class func processingBalanceWithRequestBuilder(model: BalanceRequestModel) -> RequestBuilder<ResultModelOfBalanceResponseModel> {
        let localVariablePath = "/v1.2/Processing/Balance"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfBalanceResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Отменяет списание бонусов для неподтвержденной покупки.
     
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter operationId: (path) Идентификатор операции на списание бонусов. 
     - parameter model: (query) Модель запроса на отмену списания бонусов. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func processingCancelOperation(purchaseId: String, operationId: String, model: CancelOperationRequestModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfCancelOperationResponseModel?, _ error: Error?) -> Void)) -> RequestTask {
        return processingCancelOperationWithRequestBuilder(purchaseId: purchaseId, operationId: operationId, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Отменяет списание бонусов для неподтвержденной покупки.
     - POST /v1.2/Processing/Purchases/{purchaseId}/Operations/{operationId}/Cancel
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter operationId: (path) Идентификатор операции на списание бонусов. 
     - parameter model: (query) Модель запроса на отмену списания бонусов. 
     - returns: RequestBuilder<ResultModelOfCancelOperationResponseModel> 
     */
    open class func processingCancelOperationWithRequestBuilder(purchaseId: String, operationId: String, model: CancelOperationRequestModel) -> RequestBuilder<ResultModelOfCancelOperationResponseModel> {
        var localVariablePath = "/v1.2/Processing/Purchases/{purchaseId}/Operations/{operationId}/Cancel"
        let purchaseIdPreEscape = "\(APIHelper.mapValueToPathItem(purchaseId))"
        let purchaseIdPostEscape = purchaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{purchaseId}", with: purchaseIdPostEscape, options: .literal, range: nil)
        let operationIdPreEscape = "\(APIHelper.mapValueToPathItem(operationId))"
        let operationIdPostEscape = operationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{operationId}", with: operationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfCancelOperationResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Отменяет неподтвержденную покупку.
     
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter model: (query) Модель запроса на отмену неподтвержденной покупки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func processingCancelPurchase(purchaseId: String, model: CancelPurchaseRequestModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfCancelPurchaseResponseModel?, _ error: Error?) -> Void)) -> RequestTask {
        return processingCancelPurchaseWithRequestBuilder(purchaseId: purchaseId, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Отменяет неподтвержденную покупку.
     - POST /v1.2/Processing/Purchases/{purchaseId}/Cancel
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter model: (query) Модель запроса на отмену неподтвержденной покупки. 
     - returns: RequestBuilder<ResultModelOfCancelPurchaseResponseModel> 
     */
    open class func processingCancelPurchaseWithRequestBuilder(purchaseId: String, model: CancelPurchaseRequestModel) -> RequestBuilder<ResultModelOfCancelPurchaseResponseModel> {
        var localVariablePath = "/v1.2/Processing/Purchases/{purchaseId}/Cancel"
        let purchaseIdPreEscape = "\(APIHelper.mapValueToPathItem(purchaseId))"
        let purchaseIdPostEscape = purchaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{purchaseId}", with: purchaseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfCancelPurchaseResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Подтверждает покупку.
     
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter model: (query) Модель запроса на подтверждение покупки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func processingConfirmPurchase(purchaseId: String, model: ConfirmPurchaseRequestModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfConfirmPurchaseResponseModel?, _ error: Error?) -> Void)) -> RequestTask {
        return processingConfirmPurchaseWithRequestBuilder(purchaseId: purchaseId, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Подтверждает покупку.
     - POST /v1.2/Processing/Purchases/{purchaseId}/Confirm
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter model: (query) Модель запроса на подтверждение покупки. 
     - returns: RequestBuilder<ResultModelOfConfirmPurchaseResponseModel> 
     */
    open class func processingConfirmPurchaseWithRequestBuilder(purchaseId: String, model: ConfirmPurchaseRequestModel) -> RequestBuilder<ResultModelOfConfirmPurchaseResponseModel> {
        var localVariablePath = "/v1.2/Processing/Purchases/{purchaseId}/Confirm"
        let purchaseIdPreEscape = "\(APIHelper.mapValueToPathItem(purchaseId))"
        let purchaseIdPostEscape = purchaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{purchaseId}", with: purchaseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfConfirmPurchaseResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Рассчитывает максимальную сумму списания бонусов.
     
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter model: (query) Модель запроса на получение максимальной суммы списания бонусов. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func processingExecuteAvailableAmount(purchaseId: String, model: AvailableAmountRequestModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfAvailableAmountResponseModel?, _ error: Error?) -> Void)) -> RequestTask {
        return processingExecuteAvailableAmountWithRequestBuilder(purchaseId: purchaseId, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Рассчитывает максимальную сумму списания бонусов.
     - POST /v1.2/Processing/Purchases/{purchaseId}/Bonus/Available
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter model: (query) Модель запроса на получение максимальной суммы списания бонусов. 
     - returns: RequestBuilder<ResultModelOfAvailableAmountResponseModel> 
     */
    open class func processingExecuteAvailableAmountWithRequestBuilder(purchaseId: String, model: AvailableAmountRequestModel) -> RequestBuilder<ResultModelOfAvailableAmountResponseModel> {
        var localVariablePath = "/v1.2/Processing/Purchases/{purchaseId}/Bonus/Available"
        let purchaseIdPreEscape = "\(APIHelper.mapValueToPathItem(purchaseId))"
        let purchaseIdPostEscape = purchaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{purchaseId}", with: purchaseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfAvailableAmountResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Рассчитывает прямую скидку и доступную сумму списания бонусов.
     
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter model: (query) Модель запроса на расчет прямой скидки и доступной суммы списания бонусов. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func processingExecuteCalculate(purchaseId: String, model: CalculateRequestModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfCalculateResponseModel?, _ error: Error?) -> Void)) -> RequestTask {
        return processingExecuteCalculateWithRequestBuilder(purchaseId: purchaseId, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Рассчитывает прямую скидку и доступную сумму списания бонусов.
     - POST /v1.2/Processing/Purchases/{purchaseId}/Calculate
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter model: (query) Модель запроса на расчет прямой скидки и доступной суммы списания бонусов. 
     - returns: RequestBuilder<ResultModelOfCalculateResponseModel> 
     */
    open class func processingExecuteCalculateWithRequestBuilder(purchaseId: String, model: CalculateRequestModel) -> RequestBuilder<ResultModelOfCalculateResponseModel> {
        var localVariablePath = "/v1.2/Processing/Purchases/{purchaseId}/Calculate"
        let purchaseIdPreEscape = "\(APIHelper.mapValueToPathItem(purchaseId))"
        let purchaseIdPostEscape = purchaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{purchaseId}", with: purchaseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfCalculateResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Рассчитывает бонусы.
     
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter model: (query) Модель запроса на расчет бонусов. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func processingExecuteDiscount(purchaseId: String, model: DiscountRequestModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfDiscountResponseModel?, _ error: Error?) -> Void)) -> RequestTask {
        return processingExecuteDiscountWithRequestBuilder(purchaseId: purchaseId, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Рассчитывает бонусы.
     - POST /v1.2/Processing/Purchases/{purchaseId}/Bonus
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter model: (query) Модель запроса на расчет бонусов. 
     - returns: RequestBuilder<ResultModelOfDiscountResponseModel> 
     */
    open class func processingExecuteDiscountWithRequestBuilder(purchaseId: String, model: DiscountRequestModel) -> RequestBuilder<ResultModelOfDiscountResponseModel> {
        var localVariablePath = "/v1.2/Processing/Purchases/{purchaseId}/Bonus"
        let purchaseIdPreEscape = "\(APIHelper.mapValueToPathItem(purchaseId))"
        let purchaseIdPostEscape = purchaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{purchaseId}", with: purchaseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfDiscountResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Рассчитывает возможные преференции (предполагаемые цены) на товары из товарного каталога.
     
     - parameter model: (query) Модель запроса на расчет возможных преференций. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func processingExecuteGoods(model: GoodsRequestModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfGoodsResponseModel?, _ error: Error?) -> Void)) -> RequestTask {
        return processingExecuteGoodsWithRequestBuilder(model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Рассчитывает возможные преференции (предполагаемые цены) на товары из товарного каталога.
     - POST /v1.2/Processing/Goods
     - parameter model: (query) Модель запроса на расчет возможных преференций. 
     - returns: RequestBuilder<ResultModelOfGoodsResponseModel> 
     */
    open class func processingExecuteGoodsWithRequestBuilder(model: GoodsRequestModel) -> RequestBuilder<ResultModelOfGoodsResponseModel> {
        let localVariablePath = "/v1.2/Processing/Goods"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfGoodsResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Проводит списание бонусов.
     
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter model: (query) Модель запроса на проведение списания бонусов. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func processingExecutePayment(purchaseId: String, model: PaymentRequestModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPaymentResponseModel?, _ error: Error?) -> Void)) -> RequestTask {
        return processingExecutePaymentWithRequestBuilder(purchaseId: purchaseId, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Проводит списание бонусов.
     - POST /v1.2/Processing/Purchases/{purchaseId}/Bonus/Payment
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter model: (query) Модель запроса на проведение списания бонусов. 
     - returns: RequestBuilder<ResultModelOfPaymentResponseModel> 
     */
    open class func processingExecutePaymentWithRequestBuilder(purchaseId: String, model: PaymentRequestModel) -> RequestBuilder<ResultModelOfPaymentResponseModel> {
        var localVariablePath = "/v1.2/Processing/Purchases/{purchaseId}/Bonus/Payment"
        let purchaseIdPreEscape = "\(APIHelper.mapValueToPathItem(purchaseId))"
        let purchaseIdPostEscape = purchaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{purchaseId}", with: purchaseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPaymentResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Проводит возврат покупки.
     
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter model: (query) Модель запроса на возврат покупки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func processingRefund(purchaseId: String, model: RefundRequestModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfRefundResponseModel?, _ error: Error?) -> Void)) -> RequestTask {
        return processingRefundWithRequestBuilder(purchaseId: purchaseId, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Проводит возврат покупки.
     - POST /v1.2/Processing/Purchases/{purchaseId}/Refund
     - parameter purchaseId: (path) Идентификатор покупки. 
     - parameter model: (query) Модель запроса на возврат покупки. 
     - returns: RequestBuilder<ResultModelOfRefundResponseModel> 
     */
    open class func processingRefundWithRequestBuilder(purchaseId: String, model: RefundRequestModel) -> RequestBuilder<ResultModelOfRefundResponseModel> {
        var localVariablePath = "/v1.2/Processing/Purchases/{purchaseId}/Refund"
        let purchaseIdPreEscape = "\(APIHelper.mapValueToPathItem(purchaseId))"
        let purchaseIdPostEscape = purchaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{purchaseId}", with: purchaseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfRefundResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
