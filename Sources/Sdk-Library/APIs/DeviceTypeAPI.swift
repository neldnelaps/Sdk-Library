//
// DeviceTypeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DeviceTypeAPI {

    /**
     Возвращает информацию о типе кассы.
     
     - parameter id: (path) Внутренний идентификатор типа кассы. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceTypeGet(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfDeviceTypeViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceTypeGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о типе кассы.
     - GET /v1.2/DeviceTypes/{id}
     - parameter id: (path) Внутренний идентификатор типа кассы. 
     - returns: RequestBuilder<ResultModelOfDeviceTypeViewModel> 
     */
    open class func deviceTypeGetWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfDeviceTypeViewModel> {
        var localVariablePath = "/v1.2/DeviceTypes/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfDeviceTypeViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список всех типов касс.
     
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterSearchedText: (query) Текст поиска. (optional)
     - parameter filterVersion: (query) Версия поиска. (optional)
     - parameter filterCondition: (query) Состояние. (optional)
     - parameter filterEncodingType: (query) Тип кодировки. (optional)
     - parameter filterSortingIds: (query) Идентификаторы типов касс, выводимых в начале списка. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceTypeGetAll(from: Int? = nil, count: Int? = nil, filterSearchedText: String? = nil, filterVersion: XmlVersion? = nil, filterCondition: ArchivedState? = nil, filterEncodingType: DeviceTypeValidEncodingType? = nil, filterSortingIds: [Int]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfDeviceTypeViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceTypeGetAllWithRequestBuilder(from: from, count: count, filterSearchedText: filterSearchedText, filterVersion: filterVersion, filterCondition: filterCondition, filterEncodingType: filterEncodingType, filterSortingIds: filterSortingIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список всех типов касс.
     - GET /v1.2/DeviceTypes
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterSearchedText: (query) Текст поиска. (optional)
     - parameter filterVersion: (query) Версия поиска. (optional)
     - parameter filterCondition: (query) Состояние. (optional)
     - parameter filterEncodingType: (query) Тип кодировки. (optional)
     - parameter filterSortingIds: (query) Идентификаторы типов касс, выводимых в начале списка. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfDeviceTypeViewModel> 
     */
    open class func deviceTypeGetAllWithRequestBuilder(from: Int? = nil, count: Int? = nil, filterSearchedText: String? = nil, filterVersion: XmlVersion? = nil, filterCondition: ArchivedState? = nil, filterEncodingType: DeviceTypeValidEncodingType? = nil, filterSortingIds: [Int]? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfDeviceTypeViewModel> {
        let localVariablePath = "/v1.2/DeviceTypes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.searchedText": filterSearchedText?.encodeToJSON(),
            "filter.version": filterVersion?.encodeToJSON(),
            "filter.condition": filterCondition?.encodeToJSON(),
            "filter.encodingType": filterEncodingType?.encodeToJSON(),
            "filter.sortingIds": filterSortingIds?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfDeviceTypeViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Восстанавливает из архива тип кассы.
     
     - parameter id: (path) Внутренний идентификатор типа кассы. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deviceTypeRestoreDeviceType(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return deviceTypeRestoreDeviceTypeWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Восстанавливает из архива тип кассы.
     - POST /v1.2/DeviceTypes/{id}/restore
     - parameter id: (path) Внутренний идентификатор типа кассы. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func deviceTypeRestoreDeviceTypeWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/DeviceTypes/{id}/restore"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
