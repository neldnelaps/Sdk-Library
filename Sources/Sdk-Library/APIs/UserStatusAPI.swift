//
// UserStatusAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UserStatusAPI {

    /**
     Возвращает информацию о статусной системе и статусе клиента.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userStatusGetStatusInfo(personId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfSystemApiPersonStatusViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userStatusGetStatusInfoWithRequestBuilder(personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о статусной системе и статусе клиента.
     - GET /v1.2/users/{personId}/status
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - returns: RequestBuilder<ResultModelOfListOfSystemApiPersonStatusViewModel> 
     */
    open class func userStatusGetStatusInfoWithRequestBuilder(personId: Int) -> RequestBuilder<ResultModelOfListOfSystemApiPersonStatusViewModel> {
        var localVariablePath = "/v1.2/users/{personId}/status"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfSystemApiPersonStatusViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает клиенту подробную информацию о его статусах в статусных системах.
     
     - parameter from: (query) Порядковый номер начального элемента выборки (где 0–последняя созданная статусная система). Если не заполнять, возвращает все статусные системы. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. Если не заполнять, возвращает все статусные системы. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userStatusGetStatusesInfo(from: Int? = nil, count: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfPersonStatusViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userStatusGetStatusesInfoWithRequestBuilder(from: from, count: count).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает клиенту подробную информацию о его статусах в статусных системах.
     - GET /v1.2/user/status
     - parameter from: (query) Порядковый номер начального элемента выборки (где 0–последняя созданная статусная система). Если не заполнять, возвращает все статусные системы. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. Если не заполнять, возвращает все статусные системы. (optional)
     - returns: RequestBuilder<ResultModelOfListOfPersonStatusViewModel> 
     */
    open class func userStatusGetStatusesInfoWithRequestBuilder(from: Int? = nil, count: Int? = nil) -> RequestBuilder<ResultModelOfListOfPersonStatusViewModel> {
        let localVariablePath = "/v1.2/user/status"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfPersonStatusViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает клиенту информацию о статусе по логическому имени статусной системы.
     
     - parameter logicalName: (path) Логическое имя статусной системы. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userStatusGetUsersStatusByLogicalName(logicalName: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPersonStatusViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userStatusGetUsersStatusByLogicalNameWithRequestBuilder(logicalName: logicalName).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает клиенту информацию о статусе по логическому имени статусной системы.
     - GET /v1.2/users/status/{logicalName}
     - parameter logicalName: (path) Логическое имя статусной системы. 
     - returns: RequestBuilder<ResultModelOfPersonStatusViewModel> 
     */
    open class func userStatusGetUsersStatusByLogicalNameWithRequestBuilder(logicalName: String) -> RequestBuilder<ResultModelOfPersonStatusViewModel> {
        var localVariablePath = "/v1.2/users/status/{logicalName}"
        let logicalNamePreEscape = "\(APIHelper.mapValueToPathItem(logicalName))"
        let logicalNamePostEscape = logicalNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{logicalName}", with: logicalNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPersonStatusViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
