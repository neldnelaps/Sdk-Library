//
// BatchCountersUpdateAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BatchCountersUpdateAPI {

    /**
     Возвращает список операций пакетной загрузки значений счетчиков.
     
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter batchUploadFilterModelState: (query)  (optional)
     - parameter batchUploadFilterModelIncludeDeleted: (query)  (optional)
     - parameter batchUploadFilterModelFromDate: (query)  (optional)
     - parameter batchUploadFilterModelToDate: (query)  (optional)
     - parameter batchUploadFilterModelAuthorId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func batchCountersUpdateGet(from: Int? = nil, count: Int? = nil, batchUploadFilterModelState: BatchState? = nil, batchUploadFilterModelIncludeDeleted: Bool? = nil, batchUploadFilterModelFromDate: String? = nil, batchUploadFilterModelToDate: String? = nil, batchUploadFilterModelAuthorId: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfBatchUploadModel?, _ error: Error?) -> Void)) -> RequestTask {
        return batchCountersUpdateGetWithRequestBuilder(from: from, count: count, batchUploadFilterModelState: batchUploadFilterModelState, batchUploadFilterModelIncludeDeleted: batchUploadFilterModelIncludeDeleted, batchUploadFilterModelFromDate: batchUploadFilterModelFromDate, batchUploadFilterModelToDate: batchUploadFilterModelToDate, batchUploadFilterModelAuthorId: batchUploadFilterModelAuthorId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список операций пакетной загрузки значений счетчиков.
     - GET /v1.2/countersUpdate
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter batchUploadFilterModelState: (query)  (optional)
     - parameter batchUploadFilterModelIncludeDeleted: (query)  (optional)
     - parameter batchUploadFilterModelFromDate: (query)  (optional)
     - parameter batchUploadFilterModelToDate: (query)  (optional)
     - parameter batchUploadFilterModelAuthorId: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfBatchUploadModel> 
     */
    open class func batchCountersUpdateGetWithRequestBuilder(from: Int? = nil, count: Int? = nil, batchUploadFilterModelState: BatchState? = nil, batchUploadFilterModelIncludeDeleted: Bool? = nil, batchUploadFilterModelFromDate: String? = nil, batchUploadFilterModelToDate: String? = nil, batchUploadFilterModelAuthorId: Int? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfBatchUploadModel> {
        let localVariablePath = "/v1.2/countersUpdate"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "batchUploadFilterModel.state": batchUploadFilterModelState?.encodeToJSON(),
            "batchUploadFilterModel.includeDeleted": batchUploadFilterModelIncludeDeleted?.encodeToJSON(),
            "batchUploadFilterModel.fromDate": batchUploadFilterModelFromDate?.encodeToJSON(),
            "batchUploadFilterModel.toDate": batchUploadFilterModelToDate?.encodeToJSON(),
            "batchUploadFilterModel.authorId": batchUploadFilterModelAuthorId?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfBatchUploadModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о пакете загрузки.
     
     - parameter id: (path) Ид. пакета загрузки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func batchCountersUpdateGetBatch(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BatchUploadModel?, _ error: Error?) -> Void)) -> RequestTask {
        return batchCountersUpdateGetBatchWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о пакете загрузки.
     - GET /v1.2/countersUpdate/{id}
     - parameter id: (path) Ид. пакета загрузки. 
     - returns: RequestBuilder<BatchUploadModel> 
     */
    open class func batchCountersUpdateGetBatchWithRequestBuilder(id: Int) -> RequestBuilder<BatchUploadModel> {
        var localVariablePath = "/v1.2/countersUpdate/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BatchUploadModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Операции.
     
     - parameter id: (path) Пакет. 
     - parameter state: (query) The {Loymax.Domain.Contract.DeferredOperationState}. (optional)
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func batchCountersUpdateGetOperations(id: Int, state: DeferredOperationState? = nil, from: Int? = nil, count: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfBatchUploadDataModel?, _ error: Error?) -> Void)) -> RequestTask {
        return batchCountersUpdateGetOperationsWithRequestBuilder(id: id, state: state, from: from, count: count).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Операции.
     - GET /v1.2/countersUpdate/{id}/operations
     - parameter id: (path) Пакет. 
     - parameter state: (query) The {Loymax.Domain.Contract.DeferredOperationState}. (optional)
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfBatchUploadDataModel> 
     */
    open class func batchCountersUpdateGetOperationsWithRequestBuilder(id: Int, state: DeferredOperationState? = nil, from: Int? = nil, count: Int? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfBatchUploadDataModel> {
        var localVariablePath = "/v1.2/countersUpdate/{id}/operations"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "state": state?.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfBatchUploadDataModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
