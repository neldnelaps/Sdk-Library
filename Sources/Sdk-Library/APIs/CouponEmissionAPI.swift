//
// CouponEmissionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CouponEmissionAPI {

    /**
     Возвращает информацию о выпуске купонов по внешнему идентификатору.
     
     - parameter emissionUid: (path) Внешний идентификатор выпуска. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func couponEmissionGetCouponEmission(emissionUid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfBaseCouponEmissionViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return couponEmissionGetCouponEmissionWithRequestBuilder(emissionUid: emissionUid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о выпуске купонов по внешнему идентификатору.
     - GET /v1.2/emissions/coupons/{emissionUid}
     - parameter emissionUid: (path) Внешний идентификатор выпуска. 
     - returns: RequestBuilder<ResultModelOfBaseCouponEmissionViewModel> 
     */
    open class func couponEmissionGetCouponEmissionWithRequestBuilder(emissionUid: String) -> RequestBuilder<ResultModelOfBaseCouponEmissionViewModel> {
        var localVariablePath = "/v1.2/emissions/coupons/{emissionUid}"
        let emissionUidPreEscape = "\(APIHelper.mapValueToPathItem(emissionUid))"
        let emissionUidPostEscape = emissionUidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emissionUid}", with: emissionUidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfBaseCouponEmissionViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о выпуске купонов по внутреннему идентификатору.
     
     - parameter emissionId: (path) Внутренний идентификатор выпуска. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func couponEmissionGetCouponEmissionById(emissionId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfBaseCouponEmissionViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return couponEmissionGetCouponEmissionByIdWithRequestBuilder(emissionId: emissionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о выпуске купонов по внутреннему идентификатору.
     - GET /v1.2/emissions/coupons/{emissionId}
     - parameter emissionId: (path) Внутренний идентификатор выпуска. 
     - returns: RequestBuilder<ResultModelOfBaseCouponEmissionViewModel> 
     */
    open class func couponEmissionGetCouponEmissionByIdWithRequestBuilder(emissionId: Int) -> RequestBuilder<ResultModelOfBaseCouponEmissionViewModel> {
        var localVariablePath = "/v1.2/emissions/coupons/{emissionId}"
        let emissionIdPreEscape = "\(APIHelper.mapValueToPathItem(emissionId))"
        let emissionIdPostEscape = emissionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emissionId}", with: emissionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfBaseCouponEmissionViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о выпуске купонов по внутреннему идентификатору (OAuth).
     
     - parameter id: (path) Внутренний идентификатор выпуска купонов. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func couponEmissionGetCouponEmissions(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfCouponEmissionViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return couponEmissionGetCouponEmissionsWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о выпуске купонов по внутреннему идентификатору (OAuth).
     - GET /v1.2/CouponsEmissions/{id}
     - parameter id: (path) Внутренний идентификатор выпуска купонов. 
     - returns: RequestBuilder<ResultModelOfCouponEmissionViewModel> 
     */
    open class func couponEmissionGetCouponEmissionsWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfCouponEmissionViewModel> {
        var localVariablePath = "/v1.2/CouponsEmissions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfCouponEmissionViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список купонов из выпуска.
     
     - parameter emissionId: (path) Внутренний идентификатор выпуска купонов. 
     - parameter state: (query) Состояние. (optional)
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func couponEmissionGetCouponsByEmissionByEmissionId(emissionId: Int, state: CouponState? = nil, from: Int? = nil, count: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfCouponViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return couponEmissionGetCouponsByEmissionByEmissionIdWithRequestBuilder(emissionId: emissionId, state: state, from: from, count: count).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список купонов из выпуска.
     - GET /v1.2/coupons/byEmission/{emissionId}
     - parameter emissionId: (path) Внутренний идентификатор выпуска купонов. 
     - parameter state: (query) Состояние. (optional)
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfCouponViewModel> 
     */
    open class func couponEmissionGetCouponsByEmissionByEmissionIdWithRequestBuilder(emissionId: Int, state: CouponState? = nil, from: Int? = nil, count: Int? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfCouponViewModel> {
        var localVariablePath = "/v1.2/coupons/byEmission/{emissionId}"
        let emissionIdPreEscape = "\(APIHelper.mapValueToPathItem(emissionId))"
        let emissionIdPostEscape = emissionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emissionId}", with: emissionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "state": state?.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfCouponViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список существующих выпусков купонов (OAuth).
     
     - parameter offset: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter limit: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func couponEmissionGetCouponsEmissions(offset: Int? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfCouponEmissionViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return couponEmissionGetCouponsEmissionsWithRequestBuilder(offset: offset, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список существующих выпусков купонов (OAuth).
     - GET /v1.2/CouponsEmissions
     - parameter offset: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter limit: (query) Количество возвращаемых элементов выборки. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfCouponEmissionViewModel> 
     */
    open class func couponEmissionGetCouponsEmissionsWithRequestBuilder(offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfCouponEmissionViewModel> {
        let localVariablePath = "/v1.2/CouponsEmissions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfCouponEmissionViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает выпуск купонов в виде CSV-файла.
     
     - parameter emissionId: (path) Внутренний идентификатор выпуска купонов. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func couponEmissionGetEmissionCsv(emissionId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return couponEmissionGetEmissionCsvWithRequestBuilder(emissionId: emissionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает выпуск купонов в виде CSV-файла.
     - GET /v1.2/emissions/coupons/{emissionId}/csv
     - parameter emissionId: (path) Внутренний идентификатор выпуска купонов. 
     - returns: RequestBuilder<String> 
     */
    open class func couponEmissionGetEmissionCsvWithRequestBuilder(emissionId: Int) -> RequestBuilder<String> {
        var localVariablePath = "/v1.2/emissions/coupons/{emissionId}/csv"
        let emissionIdPreEscape = "\(APIHelper.mapValueToPathItem(emissionId))"
        let emissionIdPostEscape = emissionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emissionId}", with: emissionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список существующих выпусков купонов.
     
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter properties: (query) Свойства модели ответа. Принимает следующие значения  CreatedByPerson, LastEditByPerson, Counts. Если не указывать, то будут возвращены все. (optional)
     - parameter filterChangeDateFrom: (query)  (optional)
     - parameter filterChangeDateTo: (query)  (optional)
     - parameter filterTypes: (query)  (optional)
     - parameter filterPartnerIds: (query)  (optional)
     - parameter filterLoyaltyProgramIds: (query)  (optional)
     - parameter filterTitle: (query)  (optional)
     - parameter filterPersonId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func couponEmissionGetEmissionsCoupons(from: Int? = nil, count: Int? = nil, properties: [String]? = nil, filterChangeDateFrom: String? = nil, filterChangeDateTo: String? = nil, filterTypes: [CouponEmissionType]? = nil, filterPartnerIds: [Int]? = nil, filterLoyaltyProgramIds: [Int]? = nil, filterTitle: String? = nil, filterPersonId: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfBaseCouponEmissionViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return couponEmissionGetEmissionsCouponsWithRequestBuilder(from: from, count: count, properties: properties, filterChangeDateFrom: filterChangeDateFrom, filterChangeDateTo: filterChangeDateTo, filterTypes: filterTypes, filterPartnerIds: filterPartnerIds, filterLoyaltyProgramIds: filterLoyaltyProgramIds, filterTitle: filterTitle, filterPersonId: filterPersonId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список существующих выпусков купонов.
     - GET /v1.2/emissions/coupons
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter properties: (query) Свойства модели ответа. Принимает следующие значения  CreatedByPerson, LastEditByPerson, Counts. Если не указывать, то будут возвращены все. (optional)
     - parameter filterChangeDateFrom: (query)  (optional)
     - parameter filterChangeDateTo: (query)  (optional)
     - parameter filterTypes: (query)  (optional)
     - parameter filterPartnerIds: (query)  (optional)
     - parameter filterLoyaltyProgramIds: (query)  (optional)
     - parameter filterTitle: (query)  (optional)
     - parameter filterPersonId: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfBaseCouponEmissionViewModel> 
     */
    open class func couponEmissionGetEmissionsCouponsWithRequestBuilder(from: Int? = nil, count: Int? = nil, properties: [String]? = nil, filterChangeDateFrom: String? = nil, filterChangeDateTo: String? = nil, filterTypes: [CouponEmissionType]? = nil, filterPartnerIds: [Int]? = nil, filterLoyaltyProgramIds: [Int]? = nil, filterTitle: String? = nil, filterPersonId: Int? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfBaseCouponEmissionViewModel> {
        let localVariablePath = "/v1.2/emissions/coupons"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "properties": properties?.encodeToJSON(),
            "filter.changeDateFrom": filterChangeDateFrom?.encodeToJSON(),
            "filter.changeDateTo": filterChangeDateTo?.encodeToJSON(),
            "filter.types": filterTypes?.encodeToJSON(),
            "filter.partnerIds": filterPartnerIds?.encodeToJSON(),
            "filter.loyaltyProgramIds": filterLoyaltyProgramIds?.encodeToJSON(),
            "filter.title": filterTitle?.encodeToJSON(),
            "filter.personId": filterPersonId?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfBaseCouponEmissionViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Выдает все купоны из выпуска.
     
     - parameter emissionId: (path) Внутренний идентификатор выпуска купонов. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func couponEmissionIssueCoupons(emissionId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return couponEmissionIssueCouponsWithRequestBuilder(emissionId: emissionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Выдает все купоны из выпуска.
     - POST /v1.2/emissions/coupons/{emissionId}/issue
     - parameter emissionId: (path) Внутренний идентификатор выпуска купонов. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func couponEmissionIssueCouponsWithRequestBuilder(emissionId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/emissions/coupons/{emissionId}/issue"
        let emissionIdPreEscape = "\(APIHelper.mapValueToPathItem(emissionId))"
        let emissionIdPostEscape = emissionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emissionId}", with: emissionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
