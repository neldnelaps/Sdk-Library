//
// MarketingCampaignAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MarketingCampaignAPI {

    /**
     Добавляет операцию начисления/списания к кампании.
     
     - parameter id: (path) Идентификатор кампании. 
     - parameter batchOperationId: (query) Идентификатор операции начисления/списания. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func marketingCampaignAddBatchOperations(id: Int, batchOperationId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return marketingCampaignAddBatchOperationsWithRequestBuilder(id: id, batchOperationId: batchOperationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Добавляет операцию начисления/списания к кампании.
     - PUT /v1.2/campaigns/{id}/batchOperations
     - parameter id: (path) Идентификатор кампании. 
     - parameter batchOperationId: (query) Идентификатор операции начисления/списания. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func marketingCampaignAddBatchOperationsWithRequestBuilder(id: Int, batchOperationId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/campaigns/{id}/batchOperations"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "batchOperationId": batchOperationId.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Добавить рекламный материал для маркетинговой кампании.
     
     - parameter id: (path) Идентификатор маркетинговой кампании. 
     - parameter communicationOfferId: (query) Идентификатор рекламных материалов. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func marketingCampaignAddCommunicationOffer(id: Int, communicationOfferId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return marketingCampaignAddCommunicationOfferWithRequestBuilder(id: id, communicationOfferId: communicationOfferId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Добавить рекламный материал для маркетинговой кампании.
     - PUT /v1.2/campaigns/{id}/communicationOffers
     - parameter id: (path) Идентификатор маркетинговой кампании. 
     - parameter communicationOfferId: (query) Идентификатор рекламных материалов. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func marketingCampaignAddCommunicationOfferWithRequestBuilder(id: Int, communicationOfferId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/campaigns/{id}/communicationOffers"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "communicationOfferId": communicationOfferId.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Добавляет рассылку к кампании.
     
     - parameter id: (path) Идентификатор кампании. 
     - parameter mailingId: (query) Идентификатор рассылки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func marketingCampaignAddMailing(id: Int, mailingId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return marketingCampaignAddMailingWithRequestBuilder(id: id, mailingId: mailingId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Добавляет рассылку к кампании.
     - PUT /v1.2/campaigns/{id}/mailings
     - parameter id: (path) Идентификатор кампании. 
     - parameter mailingId: (query) Идентификатор рассылки. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func marketingCampaignAddMailingWithRequestBuilder(id: Int, mailingId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/campaigns/{id}/mailings"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "mailingId": mailingId.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Удалить акцию из маркетинговой кампании.
     
     - parameter id: (path) Идентификатор маркетинговой кампании. 
     - parameter offerId: (path) Идентификатор акции. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func marketingCampaignDeleteOffer(id: Int, offerId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return marketingCampaignDeleteOfferWithRequestBuilder(id: id, offerId: offerId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Удалить акцию из маркетинговой кампании.
     - DELETE /v1.2/campaigns/{id}/offers/{offerId}
     - parameter id: (path) Идентификатор маркетинговой кампании. 
     - parameter offerId: (path) Идентификатор акции. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func marketingCampaignDeleteOfferWithRequestBuilder(id: Int, offerId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/campaigns/{id}/offers/{offerId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let offerIdPreEscape = "\(APIHelper.mapValueToPathItem(offerId))"
        let offerIdPostEscape = offerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerId}", with: offerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает доступные для прикрепления операции начисления/списания.
     
     - parameter id: (path) Идентификатор кампании. 
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter name: (query) Подстрока системного описания начисления/списания . (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func marketingCampaignGetAvailableBatchOperations(id: Int, from: Int? = nil, count: Int? = nil, name: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfBatchOperationsBriefViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return marketingCampaignGetAvailableBatchOperationsWithRequestBuilder(id: id, from: from, count: count, name: name).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает доступные для прикрепления операции начисления/списания.
     - GET /v1.2/campaigns/{id}/availableBatchOperations
     - parameter id: (path) Идентификатор кампании. 
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter name: (query) Подстрока системного описания начисления/списания . (optional)
     - returns: RequestBuilder<ResultModelOfListOfBatchOperationsBriefViewModel> 
     */
    open class func marketingCampaignGetAvailableBatchOperationsWithRequestBuilder(id: Int, from: Int? = nil, count: Int? = nil, name: String? = nil) -> RequestBuilder<ResultModelOfListOfBatchOperationsBriefViewModel> {
        var localVariablePath = "/v1.2/campaigns/{id}/availableBatchOperations"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "name": name?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfBatchOperationsBriefViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает доступные для прикрепления рассылки.
     
     - parameter id: (path) Идентификатор кампании. 
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter name: (query) Подстрока названия рассылок. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func marketingCampaignGetAvailableMailings(id: Int, from: Int? = nil, count: Int? = nil, name: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfMailingBriefViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return marketingCampaignGetAvailableMailingsWithRequestBuilder(id: id, from: from, count: count, name: name).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает доступные для прикрепления рассылки.
     - GET /v1.2/campaigns/{id}/availableMailings
     - parameter id: (path) Идентификатор кампании. 
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter name: (query) Подстрока названия рассылок. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfMailingBriefViewModel> 
     */
    open class func marketingCampaignGetAvailableMailingsWithRequestBuilder(id: Int, from: Int? = nil, count: Int? = nil, name: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfMailingBriefViewModel> {
        var localVariablePath = "/v1.2/campaigns/{id}/availableMailings"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "name": name?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfMailingBriefViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список кампаний с фильтрацией по указанным параметрам.
     
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter name: (query) Подстрока названия. (optional)
     - parameter filterFromDate: (query) Начало периода. (optional)
     - parameter filterToDate: (query) Конец периода. (optional)
     - parameter filterMode: (query) Режим выбора архивных объектов. (optional)
     - parameter filterPartnerIds: (query) Идентификаторы партнеров. (optional)
     - parameter filterLoyaltyProgramIds: (query) Идентификаторы программ лояльности. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func marketingCampaignGetList(from: Int? = nil, count: Int? = nil, name: String? = nil, filterFromDate: String? = nil, filterToDate: String? = nil, filterMode: ArchivedState? = nil, filterPartnerIds: [Int]? = nil, filterLoyaltyProgramIds: [Int]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfMarketingCampaignViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return marketingCampaignGetListWithRequestBuilder(from: from, count: count, name: name, filterFromDate: filterFromDate, filterToDate: filterToDate, filterMode: filterMode, filterPartnerIds: filterPartnerIds, filterLoyaltyProgramIds: filterLoyaltyProgramIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список кампаний с фильтрацией по указанным параметрам.
     - GET /v1.2/campaigns
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter name: (query) Подстрока названия. (optional)
     - parameter filterFromDate: (query) Начало периода. (optional)
     - parameter filterToDate: (query) Конец периода. (optional)
     - parameter filterMode: (query) Режим выбора архивных объектов. (optional)
     - parameter filterPartnerIds: (query) Идентификаторы партнеров. (optional)
     - parameter filterLoyaltyProgramIds: (query) Идентификаторы программ лояльности. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfMarketingCampaignViewModel> 
     */
    open class func marketingCampaignGetListWithRequestBuilder(from: Int? = nil, count: Int? = nil, name: String? = nil, filterFromDate: String? = nil, filterToDate: String? = nil, filterMode: ArchivedState? = nil, filterPartnerIds: [Int]? = nil, filterLoyaltyProgramIds: [Int]? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfMarketingCampaignViewModel> {
        let localVariablePath = "/v1.2/campaigns"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "filter.fromDate": filterFromDate?.encodeToJSON(),
            "filter.toDate": filterToDate?.encodeToJSON(),
            "filter.mode": filterMode?.encodeToJSON(),
            "filter.partnerIds": filterPartnerIds?.encodeToJSON(),
            "filter.loyaltyProgramIds": filterLoyaltyProgramIds?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfMarketingCampaignViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает показатели кампании.
     
     - parameter id: (path) Идентификатор кампании. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func marketingCampaignGetMetrics(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfCampaignMetricsViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return marketingCampaignGetMetricsWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает показатели кампании.
     - GET /v1.2/campaigns/{id}/metrics
     - parameter id: (path) Идентификатор кампании. 
     - returns: RequestBuilder<ResultModelOfCampaignMetricsViewModel> 
     */
    open class func marketingCampaignGetMetricsWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfCampaignMetricsViewModel> {
        var localVariablePath = "/v1.2/campaigns/{id}/metrics"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfCampaignMetricsViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить список акций для маркетинговой кампании.
     
     - parameter id: (path) Идентификатор маркетинговой кампании. 
     - parameter from: (query) From. 
     - parameter count: (query) Count. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func marketingCampaignGetOffers(id: Int, from: Int, count: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfOffersBriefModel?, _ error: Error?) -> Void)) -> RequestTask {
        return marketingCampaignGetOffersWithRequestBuilder(id: id, from: from, count: count).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить список акций для маркетинговой кампании.
     - GET /v1.2/campaigns/{id}/offers
     - parameter id: (path) Идентификатор маркетинговой кампании. 
     - parameter from: (query) From. 
     - parameter count: (query) Count. 
     - returns: RequestBuilder<ResultModelOfOffersBriefModel> 
     */
    open class func marketingCampaignGetOffersWithRequestBuilder(id: Int, from: Int, count: Int) -> RequestBuilder<ResultModelOfOffersBriefModel> {
        var localVariablePath = "/v1.2/campaigns/{id}/offers"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from.encodeToJSON(),
            "count": count.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfOffersBriefModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает кампанию по идентификатору.
     
     - parameter id: (path) Идентификатор кампании. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func marketingCampaignGetOne(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfMarketingCampaignViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return marketingCampaignGetOneWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает кампанию по идентификатору.
     - GET /v1.2/campaigns/{id}
     - parameter id: (path) Идентификатор кампании. 
     - returns: RequestBuilder<ResultModelOfMarketingCampaignViewModel> 
     */
    open class func marketingCampaignGetOneWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfMarketingCampaignViewModel> {
        var localVariablePath = "/v1.2/campaigns/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfMarketingCampaignViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Удаляет рекламный материал из кампании.
     
     - parameter id: (path) Идентификатор кампании. 
     - parameter communicationOfferId: (path) Идентификатор рекламных материалов. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func marketingCampaignRemoveCommunicationOffer(id: Int, communicationOfferId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return marketingCampaignRemoveCommunicationOfferWithRequestBuilder(id: id, communicationOfferId: communicationOfferId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Удаляет рекламный материал из кампании.
     - DELETE /v1.2/campaigns/{id}/communicationOffers/{communicationOfferId}
     - parameter id: (path) Идентификатор кампании. 
     - parameter communicationOfferId: (path) Идентификатор рекламных материалов. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func marketingCampaignRemoveCommunicationOfferWithRequestBuilder(id: Int, communicationOfferId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/campaigns/{id}/communicationOffers/{communicationOfferId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let communicationOfferIdPreEscape = "\(APIHelper.mapValueToPathItem(communicationOfferId))"
        let communicationOfferIdPostEscape = communicationOfferIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{communicationOfferId}", with: communicationOfferIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Удаляет рассылку из кампании.
     
     - parameter id: (path) Идентификатор кампании. 
     - parameter mailingId: (path) Идентификатор рассылки. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func marketingCampaignRemoveMailing(id: Int, mailingId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return marketingCampaignRemoveMailingWithRequestBuilder(id: id, mailingId: mailingId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Удаляет рассылку из кампании.
     - DELETE /v1.2/campaigns/{id}/mailings/{mailingId}
     - parameter id: (path) Идентификатор кампании. 
     - parameter mailingId: (path) Идентификатор рассылки. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func marketingCampaignRemoveMailingWithRequestBuilder(id: Int, mailingId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/campaigns/{id}/mailings/{mailingId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let mailingIdPreEscape = "\(APIHelper.mapValueToPathItem(mailingId))"
        let mailingIdPostEscape = mailingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mailingId}", with: mailingIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Восстанавливает кампанию из архива.
     
     - parameter id: (path) Идентификатор кампании. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func marketingCampaignRestore(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return marketingCampaignRestoreWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Восстанавливает кампанию из архива.
     - POST /v1.2/campaigns/{id}/restore
     - parameter id: (path) Идентификатор кампании. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func marketingCampaignRestoreWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/campaigns/{id}/restore"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
