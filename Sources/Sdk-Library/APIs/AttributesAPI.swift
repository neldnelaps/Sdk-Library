//
// AttributesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AttributesAPI {

    /**
     Возвращает информацию о сущностях, к которым привязан атрибут с указанным ключом.
     
     - parameter key: (path) Ключ атрибута. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func attributesGetAttributeEntities(key: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfEntityInfoModel?, _ error: Error?) -> Void)) -> RequestTask {
        return attributesGetAttributeEntitiesWithRequestBuilder(key: key).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о сущностях, к которым привязан атрибут с указанным ключом.
     - GET /v1.2/attribute/{key}/entities
     - parameter key: (path) Ключ атрибута. 
     - returns: RequestBuilder<ResultModelOfListOfEntityInfoModel> 
     */
    open class func attributesGetAttributeEntitiesWithRequestBuilder(key: String) -> RequestBuilder<ResultModelOfListOfEntityInfoModel> {
        var localVariablePath = "/v1.2/attribute/{key}/entities"
        let keyPreEscape = "\(APIHelper.mapValueToPathItem(key))"
        let keyPostEscape = keyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{key}", with: keyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfEntityInfoModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает все атрибуты типа сущности.
     
     - parameter entityType: (path) Тип сущности, для которой предназначен атрибут (Offers — акции, Mailings — рассылки, TargetGroups — целевые аудитории, GoodsGroups — группы товаров, MarketingCampaigns — маркетинговые кампании). 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func attributesGetAttributes(entityType: EntityType, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfEntityAttributeModel?, _ error: Error?) -> Void)) -> RequestTask {
        return attributesGetAttributesWithRequestBuilder(entityType: entityType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает все атрибуты типа сущности.
     - GET /v1.2/{entityType}/attributes
     - parameter entityType: (path) Тип сущности, для которой предназначен атрибут (Offers — акции, Mailings — рассылки, TargetGroups — целевые аудитории, GoodsGroups — группы товаров, MarketingCampaigns — маркетинговые кампании). 
     - returns: RequestBuilder<ResultModelOfListOfEntityAttributeModel> 
     */
    open class func attributesGetAttributesWithRequestBuilder(entityType: EntityType) -> RequestBuilder<ResultModelOfListOfEntityAttributeModel> {
        var localVariablePath = "/v1.2/{entityType}/attributes"
        let entityTypePreEscape = "\(APIHelper.mapValueToPathItem(entityType))"
        let entityTypePostEscape = entityTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{entityType}", with: entityTypePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfEntityAttributeModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает значения атрибутов сущности.
     
     - parameter entityType: (path) Тип сущности (Offers — акции, Mailings — рассылки, TargetGroups — целевые аудитории, GoodsGroups — группы товаров, MarketingCampaigns — маркетинговые кампании). 
     - parameter entityId: (path) Внутренний идентификатор сущности. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func attributesGetByEntityTypeByEntityIdAttributes(entityType: EntityType, entityId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfEntityAttributeWithValueModel?, _ error: Error?) -> Void)) -> RequestTask {
        return attributesGetByEntityTypeByEntityIdAttributesWithRequestBuilder(entityType: entityType, entityId: entityId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает значения атрибутов сущности.
     - GET /v1.2/{entityType}/{entityId}/attributes
     - parameter entityType: (path) Тип сущности (Offers — акции, Mailings — рассылки, TargetGroups — целевые аудитории, GoodsGroups — группы товаров, MarketingCampaigns — маркетинговые кампании). 
     - parameter entityId: (path) Внутренний идентификатор сущности. 
     - returns: RequestBuilder<ResultModelOfListOfEntityAttributeWithValueModel> 
     */
    open class func attributesGetByEntityTypeByEntityIdAttributesWithRequestBuilder(entityType: EntityType, entityId: Int) -> RequestBuilder<ResultModelOfListOfEntityAttributeWithValueModel> {
        var localVariablePath = "/v1.2/{entityType}/{entityId}/attributes"
        let entityTypePreEscape = "\(APIHelper.mapValueToPathItem(entityType))"
        let entityTypePostEscape = entityTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{entityType}", with: entityTypePostEscape, options: .literal, range: nil)
        let entityIdPreEscape = "\(APIHelper.mapValueToPathItem(entityId))"
        let entityIdPostEscape = entityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{entityId}", with: entityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfEntityAttributeWithValueModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Обновляет значение атрибута сущности.
     
     - parameter entityType: (path) Тип сущности (Offers — акции, Mailings — рассылки, TargetGroups — целевые аудитории, GoodsGroups — группы товаров, MarketingCampaigns — маркетинговые кампании). 
     - parameter entityId: (path) Внутренний идентификатор сущности. 
     - parameter attributeId: (path) Внутренний идентификатор атрибута. 
     - parameter value: (query) Новое значение атрибута. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func attributesUpdateAttribute(entityType: EntityType, entityId: Int, attributeId: Int, value: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return attributesUpdateAttributeWithRequestBuilder(entityType: entityType, entityId: entityId, attributeId: attributeId, value: value).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Обновляет значение атрибута сущности.
     - POST /v1.2/{entityType}/{entityId}/attributes/{attributeId}
     - parameter entityType: (path) Тип сущности (Offers — акции, Mailings — рассылки, TargetGroups — целевые аудитории, GoodsGroups — группы товаров, MarketingCampaigns — маркетинговые кампании). 
     - parameter entityId: (path) Внутренний идентификатор сущности. 
     - parameter attributeId: (path) Внутренний идентификатор атрибута. 
     - parameter value: (query) Новое значение атрибута. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func attributesUpdateAttributeWithRequestBuilder(entityType: EntityType, entityId: Int, attributeId: Int, value: String) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/{entityType}/{entityId}/attributes/{attributeId}"
        let entityTypePreEscape = "\(APIHelper.mapValueToPathItem(entityType))"
        let entityTypePostEscape = entityTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{entityType}", with: entityTypePostEscape, options: .literal, range: nil)
        let entityIdPreEscape = "\(APIHelper.mapValueToPathItem(entityId))"
        let entityIdPostEscape = entityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{entityId}", with: entityIdPostEscape, options: .literal, range: nil)
        let attributeIdPreEscape = "\(APIHelper.mapValueToPathItem(attributeId))"
        let attributeIdPostEscape = attributeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{attributeId}", with: attributeIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "value": value.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
