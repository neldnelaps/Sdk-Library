//
// ExtensionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ExtensionAPI {

    /**
     Возвращает список всех плагинов.
     
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterNameSearchedText: (query) Текст поиска в имени. (optional)
     - parameter filterClassNameSearchedText: (query) Текст поиска в имени класса. (optional)
     - parameter filterIsDisabled: (query) Состояние. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func extensionGet(from: Int? = nil, count: Int? = nil, filterNameSearchedText: String? = nil, filterClassNameSearchedText: String? = nil, filterIsDisabled: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfExtensionViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return extensionGetWithRequestBuilder(from: from, count: count, filterNameSearchedText: filterNameSearchedText, filterClassNameSearchedText: filterClassNameSearchedText, filterIsDisabled: filterIsDisabled).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список всех плагинов.
     - GET /v1.2/extensions
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterNameSearchedText: (query) Текст поиска в имени. (optional)
     - parameter filterClassNameSearchedText: (query) Текст поиска в имени класса. (optional)
     - parameter filterIsDisabled: (query) Состояние. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfExtensionViewModel> 
     */
    open class func extensionGetWithRequestBuilder(from: Int? = nil, count: Int? = nil, filterNameSearchedText: String? = nil, filterClassNameSearchedText: String? = nil, filterIsDisabled: Bool? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfExtensionViewModel> {
        let localVariablePath = "/v1.2/extensions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.nameSearchedText": filterNameSearchedText?.encodeToJSON(),
            "filter.classNameSearchedText": filterClassNameSearchedText?.encodeToJSON(),
            "filter.isDisabled": filterIsDisabled?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfExtensionViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить плагин по ID.
     
     - parameter id: (path) Идентификатор плагина. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func extensionGetExtension(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfExtensionViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return extensionGetExtensionWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить плагин по ID.
     - GET /v1.2/extensions/{id}
     - parameter id: (path) Идентификатор плагина. 
     - returns: RequestBuilder<ResultModelOfExtensionViewModel> 
     */
    open class func extensionGetExtensionWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfExtensionViewModel> {
        var localVariablePath = "/v1.2/extensions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfExtensionViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
