//
// TargetGroupSegmentFilterAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TargetGroupSegmentFilterAPI {

    /**
     Запускает расчет фильтра в сегменте целевой аудитории.
     
     - parameter targetGroupId: (path) Внутренний идентификатор целевой аудитории. 
     - parameter segmentId: (path) Внутренний идентификатор сегмента. 
     - parameter filterSetId: (path) Внутренний идентификатор набора фильтров. 
     - parameter filterId: (path) Внутренний идентификатор фильтра. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetGroupSegmentFilterCalculateTargetGroupSegmentFilter(targetGroupId: Int, segmentId: Int, filterSetId: Int, filterId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return targetGroupSegmentFilterCalculateTargetGroupSegmentFilterWithRequestBuilder(targetGroupId: targetGroupId, segmentId: segmentId, filterSetId: filterSetId, filterId: filterId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Запускает расчет фильтра в сегменте целевой аудитории.
     - POST /v1.2/targetGroups/{targetGroupId}/segments/{segmentId}/filterSets/{filterSetId}/filters/{filterId}/calculate
     - parameter targetGroupId: (path) Внутренний идентификатор целевой аудитории. 
     - parameter segmentId: (path) Внутренний идентификатор сегмента. 
     - parameter filterSetId: (path) Внутренний идентификатор набора фильтров. 
     - parameter filterId: (path) Внутренний идентификатор фильтра. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func targetGroupSegmentFilterCalculateTargetGroupSegmentFilterWithRequestBuilder(targetGroupId: Int, segmentId: Int, filterSetId: Int, filterId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/targetGroups/{targetGroupId}/segments/{segmentId}/filterSets/{filterSetId}/filters/{filterId}/calculate"
        let targetGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(targetGroupId))"
        let targetGroupIdPostEscape = targetGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{targetGroupId}", with: targetGroupIdPostEscape, options: .literal, range: nil)
        let segmentIdPreEscape = "\(APIHelper.mapValueToPathItem(segmentId))"
        let segmentIdPostEscape = segmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{segmentId}", with: segmentIdPostEscape, options: .literal, range: nil)
        let filterSetIdPreEscape = "\(APIHelper.mapValueToPathItem(filterSetId))"
        let filterSetIdPostEscape = filterSetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filterSetId}", with: filterSetIdPostEscape, options: .literal, range: nil)
        let filterIdPreEscape = "\(APIHelper.mapValueToPathItem(filterId))"
        let filterIdPostEscape = filterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filterId}", with: filterIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает фильтр из набора фильтров в сегменте целевой аудитории.
     
     - parameter targetGroupId: (path) Внутренний идентификатор целевой аудитории. 
     - parameter segmentId: (path) Внутренний идентификатор сегмента. 
     - parameter filterSetId: (path) Внутренний идентификатор набора фильтров. 
     - parameter filterId: (path) Внутренний идентификатор фильтра. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetGroupSegmentFilterGetTargetGroupSegmentFilter(targetGroupId: Int, segmentId: Int, filterSetId: Int, filterId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfTargetGroupSegmentFilterViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return targetGroupSegmentFilterGetTargetGroupSegmentFilterWithRequestBuilder(targetGroupId: targetGroupId, segmentId: segmentId, filterSetId: filterSetId, filterId: filterId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает фильтр из набора фильтров в сегменте целевой аудитории.
     - GET /v1.2/targetGroups/{targetGroupId}/segments/{segmentId}/filterSets/{filterSetId}/filters/{filterId}
     - parameter targetGroupId: (path) Внутренний идентификатор целевой аудитории. 
     - parameter segmentId: (path) Внутренний идентификатор сегмента. 
     - parameter filterSetId: (path) Внутренний идентификатор набора фильтров. 
     - parameter filterId: (path) Внутренний идентификатор фильтра. 
     - returns: RequestBuilder<ResultModelOfTargetGroupSegmentFilterViewModel> 
     */
    open class func targetGroupSegmentFilterGetTargetGroupSegmentFilterWithRequestBuilder(targetGroupId: Int, segmentId: Int, filterSetId: Int, filterId: Int) -> RequestBuilder<ResultModelOfTargetGroupSegmentFilterViewModel> {
        var localVariablePath = "/v1.2/targetGroups/{targetGroupId}/segments/{segmentId}/filterSets/{filterSetId}/filters/{filterId}"
        let targetGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(targetGroupId))"
        let targetGroupIdPostEscape = targetGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{targetGroupId}", with: targetGroupIdPostEscape, options: .literal, range: nil)
        let segmentIdPreEscape = "\(APIHelper.mapValueToPathItem(segmentId))"
        let segmentIdPostEscape = segmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{segmentId}", with: segmentIdPostEscape, options: .literal, range: nil)
        let filterSetIdPreEscape = "\(APIHelper.mapValueToPathItem(filterSetId))"
        let filterSetIdPostEscape = filterSetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filterSetId}", with: filterSetIdPostEscape, options: .literal, range: nil)
        let filterIdPreEscape = "\(APIHelper.mapValueToPathItem(filterId))"
        let filterIdPostEscape = filterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filterId}", with: filterIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfTargetGroupSegmentFilterViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о последнем расчете фильтра в сегменте целевой аудитории.
     
     - parameter targetGroupId: (path) Внутренний идентификатор целевой аудитории. 
     - parameter segmentId: (path) Внутренний идентификатор сегмента. 
     - parameter filterSetId: (path) Внутренний идентификатор набора фильтров. 
     - parameter filterId: (path) Внутренний идентификатор фильтра. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetGroupSegmentFilterGetTargetGroupSegmentFilterCalculationInfo(targetGroupId: Int, segmentId: Int, filterSetId: Int, filterId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfCalculationModel?, _ error: Error?) -> Void)) -> RequestTask {
        return targetGroupSegmentFilterGetTargetGroupSegmentFilterCalculationInfoWithRequestBuilder(targetGroupId: targetGroupId, segmentId: segmentId, filterSetId: filterSetId, filterId: filterId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о последнем расчете фильтра в сегменте целевой аудитории.
     - GET /v1.2/targetGroups/{targetGroupId}/segments/{segmentId}/filterSets/{filterSetId}/filters/{filterId}/calculation
     - parameter targetGroupId: (path) Внутренний идентификатор целевой аудитории. 
     - parameter segmentId: (path) Внутренний идентификатор сегмента. 
     - parameter filterSetId: (path) Внутренний идентификатор набора фильтров. 
     - parameter filterId: (path) Внутренний идентификатор фильтра. 
     - returns: RequestBuilder<ResultModelOfCalculationModel> 
     */
    open class func targetGroupSegmentFilterGetTargetGroupSegmentFilterCalculationInfoWithRequestBuilder(targetGroupId: Int, segmentId: Int, filterSetId: Int, filterId: Int) -> RequestBuilder<ResultModelOfCalculationModel> {
        var localVariablePath = "/v1.2/targetGroups/{targetGroupId}/segments/{segmentId}/filterSets/{filterSetId}/filters/{filterId}/calculation"
        let targetGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(targetGroupId))"
        let targetGroupIdPostEscape = targetGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{targetGroupId}", with: targetGroupIdPostEscape, options: .literal, range: nil)
        let segmentIdPreEscape = "\(APIHelper.mapValueToPathItem(segmentId))"
        let segmentIdPostEscape = segmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{segmentId}", with: segmentIdPostEscape, options: .literal, range: nil)
        let filterSetIdPreEscape = "\(APIHelper.mapValueToPathItem(filterSetId))"
        let filterSetIdPostEscape = filterSetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filterSetId}", with: filterSetIdPostEscape, options: .literal, range: nil)
        let filterIdPreEscape = "\(APIHelper.mapValueToPathItem(filterId))"
        let filterIdPostEscape = filterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filterId}", with: filterIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfCalculationModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о фильтре из набора фильтров в сегменте целевой аудитории.
     
     - parameter targetGroupId: (path) Внутренний идентификатор целевой аудитории. 
     - parameter segmentId: (path) Внутренний идентификатор сегмента. 
     - parameter filterSetId: (path) Внутренний идентификатор набора фильтров. 
     - parameter filterId: (path) Внутренний идентификатор фильтра. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetGroupSegmentFilterGetTargetGroupSegmentFilterInfo(targetGroupId: Int, segmentId: Int, filterSetId: Int, filterId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfFilterViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return targetGroupSegmentFilterGetTargetGroupSegmentFilterInfoWithRequestBuilder(targetGroupId: targetGroupId, segmentId: segmentId, filterSetId: filterSetId, filterId: filterId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о фильтре из набора фильтров в сегменте целевой аудитории.
     - GET /v1.2/targetGroups/{targetGroupId}/segments/{segmentId}/filterSets/{filterSetId}/filters/{filterId}/filterInfo
     - parameter targetGroupId: (path) Внутренний идентификатор целевой аудитории. 
     - parameter segmentId: (path) Внутренний идентификатор сегмента. 
     - parameter filterSetId: (path) Внутренний идентификатор набора фильтров. 
     - parameter filterId: (path) Внутренний идентификатор фильтра. 
     - returns: RequestBuilder<ResultModelOfFilterViewModel> 
     */
    open class func targetGroupSegmentFilterGetTargetGroupSegmentFilterInfoWithRequestBuilder(targetGroupId: Int, segmentId: Int, filterSetId: Int, filterId: Int) -> RequestBuilder<ResultModelOfFilterViewModel> {
        var localVariablePath = "/v1.2/targetGroups/{targetGroupId}/segments/{segmentId}/filterSets/{filterSetId}/filters/{filterId}/filterInfo"
        let targetGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(targetGroupId))"
        let targetGroupIdPostEscape = targetGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{targetGroupId}", with: targetGroupIdPostEscape, options: .literal, range: nil)
        let segmentIdPreEscape = "\(APIHelper.mapValueToPathItem(segmentId))"
        let segmentIdPostEscape = segmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{segmentId}", with: segmentIdPostEscape, options: .literal, range: nil)
        let filterSetIdPreEscape = "\(APIHelper.mapValueToPathItem(filterSetId))"
        let filterSetIdPostEscape = filterSetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filterSetId}", with: filterSetIdPostEscape, options: .literal, range: nil)
        let filterIdPreEscape = "\(APIHelper.mapValueToPathItem(filterId))"
        let filterIdPostEscape = filterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filterId}", with: filterIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfFilterViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает все фильтры из набора фильтров в сегменте целевой аудитории.
     
     - parameter targetGroupId: (path) Внутренний идентификатор целевой аудитории. 
     - parameter segmentId: (path) Внутренний идентификатор сегмента. 
     - parameter filterSetId: (path) Внутренний идентификатор набора фильтров. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetGroupSegmentFilterGetTargetGroupSegmentFilters(targetGroupId: Int, segmentId: Int, filterSetId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfTargetGroupSegmentFilterViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return targetGroupSegmentFilterGetTargetGroupSegmentFiltersWithRequestBuilder(targetGroupId: targetGroupId, segmentId: segmentId, filterSetId: filterSetId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает все фильтры из набора фильтров в сегменте целевой аудитории.
     - GET /v1.2/targetGroups/{targetGroupId}/segments/{segmentId}/filterSets/{filterSetId}/filters
     - parameter targetGroupId: (path) Внутренний идентификатор целевой аудитории. 
     - parameter segmentId: (path) Внутренний идентификатор сегмента. 
     - parameter filterSetId: (path) Внутренний идентификатор набора фильтров. 
     - returns: RequestBuilder<ResultModelOfListOfTargetGroupSegmentFilterViewModel> 
     */
    open class func targetGroupSegmentFilterGetTargetGroupSegmentFiltersWithRequestBuilder(targetGroupId: Int, segmentId: Int, filterSetId: Int) -> RequestBuilder<ResultModelOfListOfTargetGroupSegmentFilterViewModel> {
        var localVariablePath = "/v1.2/targetGroups/{targetGroupId}/segments/{segmentId}/filterSets/{filterSetId}/filters"
        let targetGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(targetGroupId))"
        let targetGroupIdPostEscape = targetGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{targetGroupId}", with: targetGroupIdPostEscape, options: .literal, range: nil)
        let segmentIdPreEscape = "\(APIHelper.mapValueToPathItem(segmentId))"
        let segmentIdPostEscape = segmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{segmentId}", with: segmentIdPostEscape, options: .literal, range: nil)
        let filterSetIdPreEscape = "\(APIHelper.mapValueToPathItem(filterSetId))"
        let filterSetIdPostEscape = filterSetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filterSetId}", with: filterSetIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfTargetGroupSegmentFilterViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Обновляет название фильтра в сегменте целевой аудитории.
     
     - parameter targetGroupId: (path) Внутренний идентификатор целевой аудитории. 
     - parameter segmentId: (path) Внутренний идентификатор сегмента. 
     - parameter filterSetId: (path) Внутренний идентификатор набора фильтров. 
     - parameter filterId: (path) Внутренний идентификатор фильтра. 
     - parameter model: (query) Модель названия фильтра. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetGroupSegmentFilterUpdateTargetGroupSegmentFilterName(targetGroupId: Int, segmentId: Int, filterSetId: Int, filterId: Int, model: TargetGroupSegmentFilterNameModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return targetGroupSegmentFilterUpdateTargetGroupSegmentFilterNameWithRequestBuilder(targetGroupId: targetGroupId, segmentId: segmentId, filterSetId: filterSetId, filterId: filterId, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Обновляет название фильтра в сегменте целевой аудитории.
     - POST /v1.2/targetGroups/{targetGroupId}/segments/{segmentId}/filterSets/{filterSetId}/filters/{filterId}/name
     - parameter targetGroupId: (path) Внутренний идентификатор целевой аудитории. 
     - parameter segmentId: (path) Внутренний идентификатор сегмента. 
     - parameter filterSetId: (path) Внутренний идентификатор набора фильтров. 
     - parameter filterId: (path) Внутренний идентификатор фильтра. 
     - parameter model: (query) Модель названия фильтра. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func targetGroupSegmentFilterUpdateTargetGroupSegmentFilterNameWithRequestBuilder(targetGroupId: Int, segmentId: Int, filterSetId: Int, filterId: Int, model: TargetGroupSegmentFilterNameModel) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/targetGroups/{targetGroupId}/segments/{segmentId}/filterSets/{filterSetId}/filters/{filterId}/name"
        let targetGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(targetGroupId))"
        let targetGroupIdPostEscape = targetGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{targetGroupId}", with: targetGroupIdPostEscape, options: .literal, range: nil)
        let segmentIdPreEscape = "\(APIHelper.mapValueToPathItem(segmentId))"
        let segmentIdPostEscape = segmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{segmentId}", with: segmentIdPostEscape, options: .literal, range: nil)
        let filterSetIdPreEscape = "\(APIHelper.mapValueToPathItem(filterSetId))"
        let filterSetIdPostEscape = filterSetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filterSetId}", with: filterSetIdPostEscape, options: .literal, range: nil)
        let filterIdPreEscape = "\(APIHelper.mapValueToPathItem(filterId))"
        let filterIdPostEscape = filterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filterId}", with: filterIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Обновляет тип фильтра в сегменте целевой аудитории.
     
     - parameter targetGroupId: (path) Внутренний идентификатор целевой аудитории. 
     - parameter segmentId: (path) Внутренний идентификатор сегмента. 
     - parameter filterSetId: (path) Внутренний идентификатор набора фильтров. 
     - parameter filterId: (path) Внутренний идентификатор фильтра. 
     - parameter model: (query) Модель типа фильтра. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetGroupSegmentFilterUpdateTargetGroupSegmentFilterType(targetGroupId: Int, segmentId: Int, filterSetId: Int, filterId: Int, model: TargetGroupSegmentFilterTypeModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return targetGroupSegmentFilterUpdateTargetGroupSegmentFilterTypeWithRequestBuilder(targetGroupId: targetGroupId, segmentId: segmentId, filterSetId: filterSetId, filterId: filterId, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Обновляет тип фильтра в сегменте целевой аудитории.
     - POST /v1.2/targetGroups/{targetGroupId}/segments/{segmentId}/filterSets/{filterSetId}/filters/{filterId}/type
     - parameter targetGroupId: (path) Внутренний идентификатор целевой аудитории. 
     - parameter segmentId: (path) Внутренний идентификатор сегмента. 
     - parameter filterSetId: (path) Внутренний идентификатор набора фильтров. 
     - parameter filterId: (path) Внутренний идентификатор фильтра. 
     - parameter model: (query) Модель типа фильтра. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func targetGroupSegmentFilterUpdateTargetGroupSegmentFilterTypeWithRequestBuilder(targetGroupId: Int, segmentId: Int, filterSetId: Int, filterId: Int, model: TargetGroupSegmentFilterTypeModel) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/targetGroups/{targetGroupId}/segments/{segmentId}/filterSets/{filterSetId}/filters/{filterId}/type"
        let targetGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(targetGroupId))"
        let targetGroupIdPostEscape = targetGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{targetGroupId}", with: targetGroupIdPostEscape, options: .literal, range: nil)
        let segmentIdPreEscape = "\(APIHelper.mapValueToPathItem(segmentId))"
        let segmentIdPostEscape = segmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{segmentId}", with: segmentIdPostEscape, options: .literal, range: nil)
        let filterSetIdPreEscape = "\(APIHelper.mapValueToPathItem(filterSetId))"
        let filterSetIdPostEscape = filterSetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filterSetId}", with: filterSetIdPostEscape, options: .literal, range: nil)
        let filterIdPreEscape = "\(APIHelper.mapValueToPathItem(filterId))"
        let filterIdPostEscape = filterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filterId}", with: filterIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
