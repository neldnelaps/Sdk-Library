//
// CommunicationOfferAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CommunicationOfferAPI {

    /**
     Отправка акции в архив.
     
     - parameter id: (path) Идентификатор. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func communicationOfferAddInArchivedOffer(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return communicationOfferAddInArchivedOfferWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Отправка акции в архив.
     - DELETE /v1.2/communicationOffers/{id}/Archive
     - parameter id: (path) Идентификатор. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func communicationOfferAddInArchivedOfferWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/communicationOffers/{id}/Archive"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список доступных акций.
     
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter substring: (query) Подстрока для поиска. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func communicationOfferGetAvaliableOffers(from: Int? = nil, count: Int? = nil, substring: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfOfferInfoShortViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return communicationOfferGetAvaliableOffersWithRequestBuilder(from: from, count: count, substring: substring).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список доступных акций.
     - GET /v1.2/communicationOffers/availableOffers
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter substring: (query) Подстрока для поиска. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfOfferInfoShortViewModel> 
     */
    open class func communicationOfferGetAvaliableOffersWithRequestBuilder(from: Int? = nil, count: Int? = nil, substring: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfOfferInfoShortViewModel> {
        let localVariablePath = "/v1.2/communicationOffers/availableOffers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "substring": substring?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfOfferInfoShortViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список магазинов достпных для рекламного материала.
     
     - parameter id: (path) Идентификатор рекламного материала. 
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterCityId: (query)  (optional)
     - parameter filterAtegoryID: (query)  (optional)
     - parameter filterName: (query)  (optional)
     - parameter filterArchivedShowMode: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func communicationOfferGetMerchantInfosByBrand(id: Int, from: Int? = nil, count: Int? = nil, filterCityId: Int? = nil, filterAtegoryID: Int? = nil, filterName: String? = nil, filterArchivedShowMode: ArchivedState? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfMerchantInfoModel?, _ error: Error?) -> Void)) -> RequestTask {
        return communicationOfferGetMerchantInfosByBrandWithRequestBuilder(id: id, from: from, count: count, filterCityId: filterCityId, filterAtegoryID: filterAtegoryID, filterName: filterName, filterArchivedShowMode: filterArchivedShowMode).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список магазинов достпных для рекламного материала.
     - GET /v1.2/communicationOffers/{id}/availableMerchantInfos
     - parameter id: (path) Идентификатор рекламного материала. 
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterCityId: (query)  (optional)
     - parameter filterAtegoryID: (query)  (optional)
     - parameter filterName: (query)  (optional)
     - parameter filterArchivedShowMode: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfListOfMerchantInfoModel> 
     */
    open class func communicationOfferGetMerchantInfosByBrandWithRequestBuilder(id: Int, from: Int? = nil, count: Int? = nil, filterCityId: Int? = nil, filterAtegoryID: Int? = nil, filterName: String? = nil, filterArchivedShowMode: ArchivedState? = nil) -> RequestBuilder<ResultModelOfListOfMerchantInfoModel> {
        var localVariablePath = "/v1.2/communicationOffers/{id}/availableMerchantInfos"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.cityId": filterCityId?.encodeToJSON(),
            "filter.сategoryID": filterAtegoryID?.encodeToJSON(),
            "filter.name": filterName?.encodeToJSON(),
            "filter.archivedShowMode": filterArchivedShowMode?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfMerchantInfoModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получение описания детали для акции.
     
     - parameter id: (path) Идентификатор деталей. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func communicationOfferGetOffer(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfCommunicationOfferModel?, _ error: Error?) -> Void)) -> RequestTask {
        return communicationOfferGetOfferWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получение описания детали для акции.
     - GET /v1.2/communicationOffers/{id}
     - parameter id: (path) Идентификатор деталей. 
     - returns: RequestBuilder<ResultModelOfCommunicationOfferModel> 
     */
    open class func communicationOfferGetOfferWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfCommunicationOfferModel> {
        var localVariablePath = "/v1.2/communicationOffers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfCommunicationOfferModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список всех инструкций для акций.
     
     - parameter filterCommunicationOfferState: (query) Статус акции. (optional)
     - parameter filterFromDate: (query) Дата С. (optional)
     - parameter filterToDate: (query) Дата По. (optional)
     - parameter filterBrandIds: (query) Набор идентификаторов брендов. (optional)
     - parameter filterCategoriesIds: (query) Набор идентификаторов категорий рекламных материалов. (optional)
     - parameter filterName: (query) Подстрока для поиска по имени. (optional)
     - parameter filterIsArchived: (query) Признак удаления. (optional)
     - parameter filterPriorityMin: (query) Минимальный приоритет. (optional)
     - parameter filterPriorityMax: (query) Максимальный приоритет. (optional)
     - parameter filterMarketingCampaignId: (query) Идентификатор маркетинговой кампании. (optional)
     - parameter filterExcludeMarketingCampaign: (query) Исключает все акции для которых установлена компания. (optional)
     - parameter filterFrom: (query) Со скольки. (optional)
     - parameter filterCount: (query) Сколько. (optional)
     - parameter filterType: (query) Тип акции. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func communicationOfferGetOffers(filterCommunicationOfferState: CommunicationOfferState? = nil, filterFromDate: String? = nil, filterToDate: String? = nil, filterBrandIds: [Int]? = nil, filterCategoriesIds: [Int]? = nil, filterName: String? = nil, filterIsArchived: ArchivedState? = nil, filterPriorityMin: Int? = nil, filterPriorityMax: Int? = nil, filterMarketingCampaignId: Int? = nil, filterExcludeMarketingCampaign: Bool? = nil, filterFrom: Int? = nil, filterCount: Int? = nil, filterType: CommunicationOfferType? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfCommunicationOfferModel?, _ error: Error?) -> Void)) -> RequestTask {
        return communicationOfferGetOffersWithRequestBuilder(filterCommunicationOfferState: filterCommunicationOfferState, filterFromDate: filterFromDate, filterToDate: filterToDate, filterBrandIds: filterBrandIds, filterCategoriesIds: filterCategoriesIds, filterName: filterName, filterIsArchived: filterIsArchived, filterPriorityMin: filterPriorityMin, filterPriorityMax: filterPriorityMax, filterMarketingCampaignId: filterMarketingCampaignId, filterExcludeMarketingCampaign: filterExcludeMarketingCampaign, filterFrom: filterFrom, filterCount: filterCount, filterType: filterType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список всех инструкций для акций.
     - GET /v1.2/communicationOffers
     - parameter filterCommunicationOfferState: (query) Статус акции. (optional)
     - parameter filterFromDate: (query) Дата С. (optional)
     - parameter filterToDate: (query) Дата По. (optional)
     - parameter filterBrandIds: (query) Набор идентификаторов брендов. (optional)
     - parameter filterCategoriesIds: (query) Набор идентификаторов категорий рекламных материалов. (optional)
     - parameter filterName: (query) Подстрока для поиска по имени. (optional)
     - parameter filterIsArchived: (query) Признак удаления. (optional)
     - parameter filterPriorityMin: (query) Минимальный приоритет. (optional)
     - parameter filterPriorityMax: (query) Максимальный приоритет. (optional)
     - parameter filterMarketingCampaignId: (query) Идентификатор маркетинговой кампании. (optional)
     - parameter filterExcludeMarketingCampaign: (query) Исключает все акции для которых установлена компания. (optional)
     - parameter filterFrom: (query) Со скольки. (optional)
     - parameter filterCount: (query) Сколько. (optional)
     - parameter filterType: (query) Тип акции. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfCommunicationOfferModel> 
     */
    open class func communicationOfferGetOffersWithRequestBuilder(filterCommunicationOfferState: CommunicationOfferState? = nil, filterFromDate: String? = nil, filterToDate: String? = nil, filterBrandIds: [Int]? = nil, filterCategoriesIds: [Int]? = nil, filterName: String? = nil, filterIsArchived: ArchivedState? = nil, filterPriorityMin: Int? = nil, filterPriorityMax: Int? = nil, filterMarketingCampaignId: Int? = nil, filterExcludeMarketingCampaign: Bool? = nil, filterFrom: Int? = nil, filterCount: Int? = nil, filterType: CommunicationOfferType? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfCommunicationOfferModel> {
        let localVariablePath = "/v1.2/communicationOffers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.communicationOfferState": filterCommunicationOfferState?.encodeToJSON(),
            "filter.fromDate": filterFromDate?.encodeToJSON(),
            "filter.toDate": filterToDate?.encodeToJSON(),
            "filter.brandIds": filterBrandIds?.encodeToJSON(),
            "filter.categoriesIds": filterCategoriesIds?.encodeToJSON(),
            "filter.name": filterName?.encodeToJSON(),
            "filter.isArchived": filterIsArchived?.encodeToJSON(),
            "filter.priorityMin": filterPriorityMin?.encodeToJSON(),
            "filter.priorityMax": filterPriorityMax?.encodeToJSON(),
            "filter.marketingCampaignId": filterMarketingCampaignId?.encodeToJSON(),
            "filter.excludeMarketingCampaign": filterExcludeMarketingCampaign?.encodeToJSON(),
            "filter.from": filterFrom?.encodeToJSON(),
            "filter.count": filterCount?.encodeToJSON(),
            "filter.type": filterType?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfCommunicationOfferModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список целевых аудиторий.
     
     - parameter id: (path) Id рекламных материалов. 
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterPartnerIds: (query)  (optional)
     - parameter filterLoyaltyPrograms: (query)  (optional)
     - parameter filterCreatorIds: (query)  (optional)
     - parameter filterSortingIds: (query)  (optional)
     - parameter filterName: (query)  (optional)
     - parameter filterArchivedShowMode: (query)  (optional)
     - parameter filterCalculatedShowMode: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func communicationOfferGetTargetGroups(id: Int, from: Int? = nil, count: Int? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterPartnerIds: [Int]? = nil, filterLoyaltyPrograms: [Int]? = nil, filterCreatorIds: [Int]? = nil, filterSortingIds: [Int]? = nil, filterName: String? = nil, filterArchivedShowMode: ArchivedState? = nil, filterCalculatedShowMode: TargetGroupCalculatedShowMode? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfTargetGroupViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return communicationOfferGetTargetGroupsWithRequestBuilder(id: id, from: from, count: count, filterDateFrom: filterDateFrom, filterDateTo: filterDateTo, filterPartnerIds: filterPartnerIds, filterLoyaltyPrograms: filterLoyaltyPrograms, filterCreatorIds: filterCreatorIds, filterSortingIds: filterSortingIds, filterName: filterName, filterArchivedShowMode: filterArchivedShowMode, filterCalculatedShowMode: filterCalculatedShowMode).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список целевых аудиторий.
     - GET /v1.2/communicationOffers/{id}/availableTargetGroups
     - parameter id: (path) Id рекламных материалов. 
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterPartnerIds: (query)  (optional)
     - parameter filterLoyaltyPrograms: (query)  (optional)
     - parameter filterCreatorIds: (query)  (optional)
     - parameter filterSortingIds: (query)  (optional)
     - parameter filterName: (query)  (optional)
     - parameter filterArchivedShowMode: (query)  (optional)
     - parameter filterCalculatedShowMode: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfTargetGroupViewModel> 
     */
    open class func communicationOfferGetTargetGroupsWithRequestBuilder(id: Int, from: Int? = nil, count: Int? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterPartnerIds: [Int]? = nil, filterLoyaltyPrograms: [Int]? = nil, filterCreatorIds: [Int]? = nil, filterSortingIds: [Int]? = nil, filterName: String? = nil, filterArchivedShowMode: ArchivedState? = nil, filterCalculatedShowMode: TargetGroupCalculatedShowMode? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfTargetGroupViewModel> {
        var localVariablePath = "/v1.2/communicationOffers/{id}/availableTargetGroups"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.dateFrom": filterDateFrom?.encodeToJSON(),
            "filter.dateTo": filterDateTo?.encodeToJSON(),
            "filter.partnerIds": filterPartnerIds?.encodeToJSON(),
            "filter.loyaltyPrograms": filterLoyaltyPrograms?.encodeToJSON(),
            "filter.creatorIds": filterCreatorIds?.encodeToJSON(),
            "filter.sortingIds": filterSortingIds?.encodeToJSON(),
            "filter.name": filterName?.encodeToJSON(),
            "filter.archivedShowMode": filterArchivedShowMode?.encodeToJSON(),
            "filter.calculatedShowMode": filterCalculatedShowMode?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfTargetGroupViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Востановить акцию.
     
     - parameter id: (path) Идентификатор. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func communicationOfferRestoreOffer(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return communicationOfferRestoreOfferWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Востановить акцию.
     - POST /v1.2/communicationOffers/{id}/Restore
     - parameter id: (path) Идентификатор. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func communicationOfferRestoreOfferWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/communicationOffers/{id}/Restore"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
