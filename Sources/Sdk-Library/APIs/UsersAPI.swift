//
// UsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UsersAPI {

    /**
     Оформляет принятие клиентом оферты.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersAcceptTenderOffer(personId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersAcceptTenderOfferWithRequestBuilder(personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Оформляет принятие клиентом оферты.
     - POST /v1.2/users/{personId}/AcceptTenderOffer
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func usersAcceptTenderOfferWithRequestBuilder(personId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/AcceptTenderOffer"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Отменяет верификацию номера телефона.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersCancelConfirmPhone(personId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersCancelConfirmPhoneWithRequestBuilder(personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Отменяет верификацию номера телефона.
     - POST /v1.2/users/{personId}/CancelConfirmPhone
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func usersCancelConfirmPhoneWithRequestBuilder(personId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/CancelConfirmPhone"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Оформляет изменение часового пояса клиента.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter model: (query) Модель для ввода значения, где 0-время по UTC, 2-(UTC+02:00) и т.д. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersChangeTimeZone(personId: Int, model: ChangeTimeZoneModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersChangeTimeZoneWithRequestBuilder(personId: personId, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Оформляет изменение часового пояса клиента.
     - POST /v1.2/users/{personId}/ChangeTimeZone
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter model: (query) Модель для ввода значения, где 0-время по UTC, 2-(UTC+02:00) и т.д. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func usersChangeTimeZoneWithRequestBuilder(personId: Int, model: ChangeTimeZoneModel) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/ChangeTimeZone"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Проверяет пароль клиента.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter password: (query) Пароль клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersCheckUserPassword(personId: Int, password: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersCheckUserPasswordWithRequestBuilder(personId: personId, password: password).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Проверяет пароль клиента.
     - GET /v1.2/users/{personId}/CheckPassword
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter password: (query) Пароль клиента. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func usersCheckUserPasswordWithRequestBuilder(personId: Int, password: String) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/CheckPassword"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "password": password.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Проверяет код подтверждения номера телефона.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter confirmCode: (query) Модель кода подтверждения. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersConfirmPhoneCode(personId: Int, confirmCode: PostConfirmCodeModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersConfirmPhoneCodeWithRequestBuilder(personId: personId, confirmCode: confirmCode).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Проверяет код подтверждения номера телефона.
     - POST /v1.2/users/{personId}/PostConfirmPhoneCode
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter confirmCode: (query) Модель кода подтверждения. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func usersConfirmPhoneCodeWithRequestBuilder(personId: Int, confirmCode: PostConfirmCodeModel) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/PostConfirmPhoneCode"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "confirmCode": confirmCode.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Удаляет вариант ответа анкеты.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter number: (query) Идентификатор набора. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersDeleteAnswer(personId: Int, number: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersDeleteAnswerWithRequestBuilder(personId: personId, number: number).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Удаляет вариант ответа анкеты.
     - POST /v1.2/users/{personId}/DeleteAnswerSets
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter number: (query) Идентификатор набора. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func usersDeleteAnswerWithRequestBuilder(personId: Int, number: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/DeleteAnswerSets"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "number": number.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Оформляет выход из Программы лояльности.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter model: (query) Модель с параметрами. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersDeregister(personId: Int, model: DeregisterModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersDeregisterWithRequestBuilder(personId: personId, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Оформляет выход из Программы лояльности.
     - POST /v1.2/users/{personId}/Deregister
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter model: (query) Модель с параметрами. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func usersDeregisterWithRequestBuilder(personId: Int, model: DeregisterModel) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/Deregister"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о возможности выпуска виртуальной карты.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersEmitVirtualCardInfo(personId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfEmitVirtualCardInfoModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersEmitVirtualCardInfoWithRequestBuilder(personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о возможности выпуска виртуальной карты.
     - GET /v1.2/users/{personId}/EmitVirtual
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - returns: RequestBuilder<ResultModelOfEmitVirtualCardInfoModel> 
     */
    open class func usersEmitVirtualCardInfoWithRequestBuilder(personId: Int) -> RequestBuilder<ResultModelOfEmitVirtualCardInfoModel> {
        var localVariablePath = "/v1.2/users/{personId}/EmitVirtual"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfEmitVirtualCardInfoModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список партнерских атрибутов клиента.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetAttributes(personId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfAttributePartnerValueModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetAttributesWithRequestBuilder(personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список партнерских атрибутов клиента.
     - GET /v1.2/users/{personId}/Attributes
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - returns: RequestBuilder<ResultModelOfListOfAttributePartnerValueModel> 
     */
    open class func usersGetAttributesWithRequestBuilder(personId: Int) -> RequestBuilder<ResultModelOfListOfAttributePartnerValueModel> {
        var localVariablePath = "/v1.2/users/{personId}/Attributes"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfAttributePartnerValueModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает балансы по номеру телефона или номеру карты.
     
     - parameter identifier: (path) Номер телефона или номер карты. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetBalance(identifier: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfAccountBalanceModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetBalanceWithRequestBuilder(identifier: identifier).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает балансы по номеру телефона или номеру карты.
     - GET /v1.2/users/code/{identifier}/balance
     - parameter identifier: (path) Номер телефона или номер карты. 
     - returns: RequestBuilder<ResultModelOfListOfAccountBalanceModel> 
     */
    open class func usersGetBalanceWithRequestBuilder(identifier: String) -> RequestBuilder<ResultModelOfListOfAccountBalanceModel> {
        var localVariablePath = "/v1.2/users/code/{identifier}/balance"
        let identifierPreEscape = "\(APIHelper.mapValueToPathItem(identifier))"
        let identifierPostEscape = identifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{identifier}", with: identifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfAccountBalanceModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о балансе клиента.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetBalances(personId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfAccountBalanceModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetBalancesWithRequestBuilder(personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о балансе клиента.
     - GET /v1.2/users/{personId}/Balance
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - returns: RequestBuilder<ResultModelOfListOfAccountBalanceModel> 
     */
    open class func usersGetBalancesWithRequestBuilder(personId: Int) -> RequestBuilder<ResultModelOfListOfAccountBalanceModel> {
        var localVariablePath = "/v1.2/users/{personId}/Balance"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfAccountBalanceModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список акций клиента.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter filterMerchantId: (query) Id магазина. (optional)
     - parameter filterOfferState: (query) Статус акции. (optional)
     - parameter filterFrom: (query) Со скольки. (optional)
     - parameter filterCount: (query) Сколько. (optional)
     - parameter filterType: (query) Тип акции. (optional)
     - parameter filterCategoryFilterType: (query) Фильтр по категории. (optional)
     - parameter filterCategoryLogicalNames: (query) Логические имена категорий. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetCommunicationOffers(personId: Int, filterMerchantId: Int? = nil, filterOfferState: CommunicationOfferState? = nil, filterFrom: Int? = nil, filterCount: Int? = nil, filterType: CommunicationOfferType? = nil, filterCategoryFilterType: OfferCategoryFilterType? = nil, filterCategoryLogicalNames: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfCommunicationOfferModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetCommunicationOffersWithRequestBuilder(personId: personId, filterMerchantId: filterMerchantId, filterOfferState: filterOfferState, filterFrom: filterFrom, filterCount: filterCount, filterType: filterType, filterCategoryFilterType: filterCategoryFilterType, filterCategoryLogicalNames: filterCategoryLogicalNames).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список акций клиента.
     - GET /v1.2/users/{personId}/CommunicationOffers
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter filterMerchantId: (query) Id магазина. (optional)
     - parameter filterOfferState: (query) Статус акции. (optional)
     - parameter filterFrom: (query) Со скольки. (optional)
     - parameter filterCount: (query) Сколько. (optional)
     - parameter filterType: (query) Тип акции. (optional)
     - parameter filterCategoryFilterType: (query) Фильтр по категории. (optional)
     - parameter filterCategoryLogicalNames: (query) Логические имена категорий. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfCommunicationOfferModel> 
     */
    open class func usersGetCommunicationOffersWithRequestBuilder(personId: Int, filterMerchantId: Int? = nil, filterOfferState: CommunicationOfferState? = nil, filterFrom: Int? = nil, filterCount: Int? = nil, filterType: CommunicationOfferType? = nil, filterCategoryFilterType: OfferCategoryFilterType? = nil, filterCategoryLogicalNames: [String]? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfCommunicationOfferModel> {
        var localVariablePath = "/v1.2/users/{personId}/CommunicationOffers"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.merchantId": filterMerchantId?.encodeToJSON(),
            "filter.offerState": filterOfferState?.encodeToJSON(),
            "filter.from": filterFrom?.encodeToJSON(),
            "filter.count": filterCount?.encodeToJSON(),
            "filter.type": filterType?.encodeToJSON(),
            "filter.categoryFilterType": filterCategoryFilterType?.encodeToJSON(),
            "filter.categoryLogicalNames": filterCategoryLogicalNames?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfCommunicationOfferModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о текущем пользователе.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetCurrentPersonInfo(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfSystemUserViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetCurrentPersonInfoWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о текущем пользователе.
     - GET /v1.2/users/Current
     - returns: RequestBuilder<ResultModelOfSystemUserViewModel> 
     */
    open class func usersGetCurrentPersonInfoWithRequestBuilder() -> RequestBuilder<ResultModelOfSystemUserViewModel> {
        let localVariablePath = "/v1.2/users/Current"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfSystemUserViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает Ф.И.О. текущего пользователя.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetCurrentUserName(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfUserName?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetCurrentUserNameWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает Ф.И.О. текущего пользователя.
     - GET /v1.2/users/Current/name
     - returns: RequestBuilder<ResultModelOfUserName> 
     */
    open class func usersGetCurrentUserNameWithRequestBuilder() -> RequestBuilder<ResultModelOfUserName> {
        let localVariablePath = "/v1.2/users/Current/name"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfUserName>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о детализированном балансе клиента.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter archivedState: (query) Состояние валюты. (optional)
     - parameter date: (query) Дата (null, если текущая). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetDetailedBalance(personId: Int, archivedState: ArchivedState? = nil, date: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfDetailedBalanceInfoViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetDetailedBalanceWithRequestBuilder(personId: personId, archivedState: archivedState, date: date).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о детализированном балансе клиента.
     - GET /v1.2/users/{personId}/DetailedBalance
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter archivedState: (query) Состояние валюты. (optional)
     - parameter date: (query) Дата (null, если текущая). (optional)
     - returns: RequestBuilder<ResultModelOfDetailedBalanceInfoViewModel> 
     */
    open class func usersGetDetailedBalanceWithRequestBuilder(personId: Int, archivedState: ArchivedState? = nil, date: String? = nil) -> RequestBuilder<ResultModelOfDetailedBalanceInfoViewModel> {
        var localVariablePath = "/v1.2/users/{personId}/DetailedBalance"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "archivedState": archivedState?.encodeToJSON(),
            "date": date?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfDetailedBalanceInfoViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию об операциях активации и сгораниях по конкретному счету клиента.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter currencyId: (path) Внутренний идентификатор валюты. 
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterFromDate: (query) Начальная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterToDate: (query) Конечная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterChangeTypes: (query) Фильтр по типу изменения (активации/сгорания). (optional)
     - parameter filterFrom: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter filterCount: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetDetailedBalanceItemOperations(personId: Int, currencyId: Int, from: Int? = nil, count: Int? = nil, filterFromDate: String? = nil, filterToDate: String? = nil, filterChangeTypes: [AccountChangeType]? = nil, filterFrom: Int? = nil, filterCount: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfDetailedAccountChangeViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetDetailedBalanceItemOperationsWithRequestBuilder(personId: personId, currencyId: currencyId, from: from, count: count, filterFromDate: filterFromDate, filterToDate: filterToDate, filterChangeTypes: filterChangeTypes, filterFrom: filterFrom, filterCount: filterCount).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию об операциях активации и сгораниях по конкретному счету клиента.
     - GET /v1.2/users/{personId}/DetailedBalance/{currencyId}/Operations
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter currencyId: (path) Внутренний идентификатор валюты. 
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterFromDate: (query) Начальная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterToDate: (query) Конечная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterChangeTypes: (query) Фильтр по типу изменения (активации/сгорания). (optional)
     - parameter filterFrom: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter filterCount: (query) Количество возвращаемых элементов выборки. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfDetailedAccountChangeViewModel> 
     */
    open class func usersGetDetailedBalanceItemOperationsWithRequestBuilder(personId: Int, currencyId: Int, from: Int? = nil, count: Int? = nil, filterFromDate: String? = nil, filterToDate: String? = nil, filterChangeTypes: [AccountChangeType]? = nil, filterFrom: Int? = nil, filterCount: Int? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfDetailedAccountChangeViewModel> {
        var localVariablePath = "/v1.2/users/{personId}/DetailedBalance/{currencyId}/Operations"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let currencyIdPreEscape = "\(APIHelper.mapValueToPathItem(currencyId))"
        let currencyIdPostEscape = currencyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{currencyId}", with: currencyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.fromDate": filterFromDate?.encodeToJSON(),
            "filter.toDate": filterToDate?.encodeToJSON(),
            "filter.changeTypes": filterChangeTypes?.encodeToJSON(),
            "filter.from": filterFrom?.encodeToJSON(),
            "filter.count": filterCount?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfDetailedAccountChangeViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о сумме покупок клиента у Партнера.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter partnerId: (path) Внешний идентификатор Партнера. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetPartnerPurchaseAmount(personId: Int, partnerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfMoneyViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetPartnerPurchaseAmountWithRequestBuilder(personId: personId, partnerId: partnerId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о сумме покупок клиента у Партнера.
     - GET /v1.2/users/{personId}/GetPartnerPurchaseAmount/{partnerId}
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter partnerId: (path) Внешний идентификатор Партнера. 
     - returns: RequestBuilder<ResultModelOfMoneyViewModel> 
     */
    open class func usersGetPartnerPurchaseAmountWithRequestBuilder(personId: Int, partnerId: String) -> RequestBuilder<ResultModelOfMoneyViewModel> {
        var localVariablePath = "/v1.2/users/{personId}/GetPartnerPurchaseAmount/{partnerId}"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let partnerIdPreEscape = "\(APIHelper.mapValueToPathItem(partnerId))"
        let partnerIdPostEscape = partnerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{partnerId}", with: partnerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfMoneyViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию об атрибутах клиента.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetPersonAttributesInfo(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfPersonAttributeModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetPersonAttributesInfoWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию об атрибутах клиента.
     - GET /v1.2/users/GetPersonAttributesInfo
     - returns: RequestBuilder<ResultModelOfListOfPersonAttributeModel> 
     */
    open class func usersGetPersonAttributesInfoWithRequestBuilder() -> RequestBuilder<ResultModelOfListOfPersonAttributeModel> {
        let localVariablePath = "/v1.2/users/GetPersonAttributesInfo"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfPersonAttributeModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о купонах клиента.
     
     - parameter count: (query) Количество возвращаемых элементов выборки. 
     - parameter from: (query) Порядковый номер начального элемента выборки. 
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter filterEmissionIds: (query)  (optional)
     - parameter filterCouponStates: (query)  (optional)
     - parameter filterChangedStateDateFrom: (query)  (optional)
     - parameter filterChangedStateDateTo: (query)  (optional)
     - parameter filterCouponNumber: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetPersonCoupons(count: Int, from: Int, personId: Int, filterEmissionIds: [Int]? = nil, filterCouponStates: [CouponState]? = nil, filterChangedStateDateFrom: String? = nil, filterChangedStateDateTo: String? = nil, filterCouponNumber: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfCouponViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetPersonCouponsWithRequestBuilder(count: count, from: from, personId: personId, filterEmissionIds: filterEmissionIds, filterCouponStates: filterCouponStates, filterChangedStateDateFrom: filterChangedStateDateFrom, filterChangedStateDateTo: filterChangedStateDateTo, filterCouponNumber: filterCouponNumber).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о купонах клиента.
     - GET /v1.2/users/{personId}/Coupons
     - parameter count: (query) Количество возвращаемых элементов выборки. 
     - parameter from: (query) Порядковый номер начального элемента выборки. 
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter filterEmissionIds: (query)  (optional)
     - parameter filterCouponStates: (query)  (optional)
     - parameter filterChangedStateDateFrom: (query)  (optional)
     - parameter filterChangedStateDateTo: (query)  (optional)
     - parameter filterCouponNumber: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfCouponViewModel> 
     */
    open class func usersGetPersonCouponsWithRequestBuilder(count: Int, from: Int, personId: Int, filterEmissionIds: [Int]? = nil, filterCouponStates: [CouponState]? = nil, filterChangedStateDateFrom: String? = nil, filterChangedStateDateTo: String? = nil, filterCouponNumber: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfCouponViewModel> {
        var localVariablePath = "/v1.2/users/{personId}/Coupons"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count.encodeToJSON(),
            "from": from.encodeToJSON(),
            "filter.emissionIds": filterEmissionIds?.encodeToJSON(),
            "filter.couponStates": filterCouponStates?.encodeToJSON(),
            "filter.changedStateDateFrom": filterChangedStateDateFrom?.encodeToJSON(),
            "filter.changedStateDateTo": filterChangedStateDateTo?.encodeToJSON(),
            "filter.couponNumber": filterCouponNumber?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfCouponViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о клиенте по внутреннему идентификатору.
     
     - parameter id: (path) Внутренний идентификатор клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetPersonInfoById(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPersonInfoModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetPersonInfoByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о клиенте по внутреннему идентификатору.
     - GET /v1.2/users/{id}
     - parameter id: (path) Внутренний идентификатор клиента. 
     - returns: RequestBuilder<ResultModelOfPersonInfoModel> 
     */
    open class func usersGetPersonInfoByIdWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfPersonInfoModel> {
        var localVariablePath = "/v1.2/users/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPersonInfoModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о клиенте по номеру телефона.
     
     - parameter phone: (query) Номер телефона клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetPersonInfoByPhone(phone: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfPersonInfoModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetPersonInfoByPhoneWithRequestBuilder(phone: phone).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о клиенте по номеру телефона.
     - GET /v1.2/users
     - parameter phone: (query) Номер телефона клиента. 
     - returns: RequestBuilder<ResultModelOfListOfPersonInfoModel> 
     */
    open class func usersGetPersonInfoByPhoneWithRequestBuilder(phone: String) -> RequestBuilder<ResultModelOfListOfPersonInfoModel> {
        let localVariablePath = "/v1.2/users"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "phone": phone.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfPersonInfoModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает детали персонального предложения клиента.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter offerId: (path) Внутренний идентификатор акции. 
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetPersonalOfferDetails(personId: Int, offerId: Int, from: Int? = nil, count: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfDetailItem?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetPersonalOfferDetailsWithRequestBuilder(personId: personId, offerId: offerId, from: from, count: count).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает детали персонального предложения клиента.
     - GET /v1.2/users/{personId}/CommunicationOffers/{offerId}/Details
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter offerId: (path) Внутренний идентификатор акции. 
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfDetailItem> 
     */
    open class func usersGetPersonalOfferDetailsWithRequestBuilder(personId: Int, offerId: Int, from: Int? = nil, count: Int? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfDetailItem> {
        var localVariablePath = "/v1.2/users/{personId}/CommunicationOffers/{offerId}/Details"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let offerIdPreEscape = "\(APIHelper.mapValueToPathItem(offerId))"
        let offerIdPostEscape = offerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offerId}", with: offerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfDetailItem>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о номере телефона клиента.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetPhone(personId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfUserPhoneNumberInfo?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetPhoneWithRequestBuilder(personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о номере телефона клиента.
     - GET /v1.2/users/{personId}/Phone
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - returns: RequestBuilder<ResultModelOfUserPhoneNumberInfo> 
     */
    open class func usersGetPhoneWithRequestBuilder(personId: Int) -> RequestBuilder<ResultModelOfUserPhoneNumberInfo> {
        var localVariablePath = "/v1.2/users/{personId}/Phone"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfUserPhoneNumberInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о вопросах анкеты для предпросмотра анкеты.
     
     - parameter filterOnlyRequired: (query) True-только вопросы с отмеченным чекбоксом \&quot;Видимый при регистрации\&quot;,false-все вопросы. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetPreviewQuestions(filterOnlyRequired: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfQuestionnaireItemModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetPreviewQuestionsWithRequestBuilder(filterOnlyRequired: filterOnlyRequired).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о вопросах анкеты для предпросмотра анкеты.
     - GET /v1.2/users/PreviewQuestions
     - parameter filterOnlyRequired: (query) True-только вопросы с отмеченным чекбоксом \&quot;Видимый при регистрации\&quot;,false-все вопросы. (optional)
     - returns: RequestBuilder<ResultModelOfListOfQuestionnaireItemModel> 
     */
    open class func usersGetPreviewQuestionsWithRequestBuilder(filterOnlyRequired: Bool? = nil) -> RequestBuilder<ResultModelOfListOfQuestionnaireItemModel> {
        let localVariablePath = "/v1.2/users/PreviewQuestions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.onlyRequired": filterOnlyRequired?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfQuestionnaireItemModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Генерирует QR-код для карты клиента по номеру карты (OAuth).
     
     - parameter identifier: (path) Номер телефона или номер любой активной Карты Участника ПЛ, которому принадлежит Карта. 
     - parameter cardNumber: (path) Номер карты. 
     - parameter isConvertToServerTimeNeeded: (query) Нужно ли преобразовать время генерации кода во время сервера. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetQrCodeByCardNumber(identifier: String, cardNumber: String, isConvertToServerTimeNeeded: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfQrCodeModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetQrCodeByCardNumberWithRequestBuilder(identifier: identifier, cardNumber: cardNumber, isConvertToServerTimeNeeded: isConvertToServerTimeNeeded).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Генерирует QR-код для карты клиента по номеру карты (OAuth).
     - GET /v1.2/users/code/{identifier}/cards/{cardNumber}/qrcode
     - parameter identifier: (path) Номер телефона или номер любой активной Карты Участника ПЛ, которому принадлежит Карта. 
     - parameter cardNumber: (path) Номер карты. 
     - parameter isConvertToServerTimeNeeded: (query) Нужно ли преобразовать время генерации кода во время сервера. (optional)
     - returns: RequestBuilder<ResultModelOfQrCodeModel> 
     */
    open class func usersGetQrCodeByCardNumberWithRequestBuilder(identifier: String, cardNumber: String, isConvertToServerTimeNeeded: Bool? = nil) -> RequestBuilder<ResultModelOfQrCodeModel> {
        var localVariablePath = "/v1.2/users/code/{identifier}/cards/{cardNumber}/qrcode"
        let identifierPreEscape = "\(APIHelper.mapValueToPathItem(identifier))"
        let identifierPostEscape = identifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{identifier}", with: identifierPostEscape, options: .literal, range: nil)
        let cardNumberPreEscape = "\(APIHelper.mapValueToPathItem(cardNumber))"
        let cardNumberPostEscape = cardNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{cardNumber}", with: cardNumberPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "isConvertToServerTimeNeeded": isConvertToServerTimeNeeded?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfQrCodeModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о вопросах анкеты.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter filterOnlyRequired: (query) True-только вопросы с отмеченным чекбоксом \&quot;Видимый при регистрации\&quot;,false-все вопросы. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetQuestions(personId: Int, filterOnlyRequired: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfQuestionnaireItemModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetQuestionsWithRequestBuilder(personId: personId, filterOnlyRequired: filterOnlyRequired).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о вопросах анкеты.
     - GET /v1.2/users/{personId}/Questions
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter filterOnlyRequired: (query) True-только вопросы с отмеченным чекбоксом \&quot;Видимый при регистрации\&quot;,false-все вопросы. (optional)
     - returns: RequestBuilder<ResultModelOfListOfQuestionnaireItemModel> 
     */
    open class func usersGetQuestionsWithRequestBuilder(personId: Int, filterOnlyRequired: Bool? = nil) -> RequestBuilder<ResultModelOfListOfQuestionnaireItemModel> {
        var localVariablePath = "/v1.2/users/{personId}/Questions"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.onlyRequired": filterOnlyRequired?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfQuestionnaireItemModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает действия, для которых нужны шаги регистрации.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetRegistrationActions(personId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfUserActionsResult?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetRegistrationActionsWithRequestBuilder(personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает действия, для которых нужны шаги регистрации.
     - GET /v1.2/users/{personId}/RegistrationActions
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - returns: RequestBuilder<ResultModelOfUserActionsResult> 
     */
    open class func usersGetRegistrationActionsWithRequestBuilder(personId: Int) -> RequestBuilder<ResultModelOfUserActionsResult> {
        var localVariablePath = "/v1.2/users/{personId}/RegistrationActions"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfUserActionsResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о подписках клиента.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetSubscriptions(personId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfSubscriptionViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetSubscriptionsWithRequestBuilder(personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о подписках клиента.
     - GET /v1.2/users/{personId}/Subscriptions
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - returns: RequestBuilder<ResultModelOfListOfSubscriptionViewModel> 
     */
    open class func usersGetSubscriptionsWithRequestBuilder(personId: Int) -> RequestBuilder<ResultModelOfListOfSubscriptionViewModel> {
        var localVariablePath = "/v1.2/users/{personId}/Subscriptions"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfSubscriptionViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список значений атрибутов клиента.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter filterFrom: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter filterCount: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterAttributeName: (query) Название атрибута. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersGetUserAttributesValues(personId: Int, filterFrom: Int? = nil, filterCount: Int? = nil, filterAttributeName: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfUserAttributeValueViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersGetUserAttributesValuesWithRequestBuilder(personId: personId, filterFrom: filterFrom, filterCount: filterCount, filterAttributeName: filterAttributeName).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список значений атрибутов клиента.
     - GET /v1.2/users/{personId}/AttributesValues
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter filterFrom: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter filterCount: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterAttributeName: (query) Название атрибута. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfUserAttributeValueViewModel> 
     */
    open class func usersGetUserAttributesValuesWithRequestBuilder(personId: Int, filterFrom: Int? = nil, filterCount: Int? = nil, filterAttributeName: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfUserAttributeValueViewModel> {
        var localVariablePath = "/v1.2/users/{personId}/AttributesValues"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.from": filterFrom?.encodeToJSON(),
            "filter.count": filterCount?.encodeToJSON(),
            "filter.attributeName": filterAttributeName?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfUserAttributeValueViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Объединение счетов без подтверждения.
     
     - parameter targetPersonId: (path) Id пользователя, со счетом которого будет объединение. 
     - parameter sourcePersonId: (path) Id пользователя, счет которого присоединяется. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersMergeAccounts(targetPersonId: Int, sourcePersonId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersMergeAccountsWithRequestBuilder(targetPersonId: targetPersonId, sourcePersonId: sourcePersonId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Объединение счетов без подтверждения.
     - POST /v1.2/users/{targetPersonId}/MergeAccount/{sourcePersonId}
     - parameter targetPersonId: (path) Id пользователя, со счетом которого будет объединение. 
     - parameter sourcePersonId: (path) Id пользователя, счет которого присоединяется. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func usersMergeAccountsWithRequestBuilder(targetPersonId: Int, sourcePersonId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{targetPersonId}/MergeAccount/{sourcePersonId}"
        let targetPersonIdPreEscape = "\(APIHelper.mapValueToPathItem(targetPersonId))"
        let targetPersonIdPostEscape = targetPersonIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{targetPersonId}", with: targetPersonIdPostEscape, options: .literal, range: nil)
        let sourcePersonIdPreEscape = "\(APIHelper.mapValueToPathItem(sourcePersonId))"
        let sourcePersonIdPostEscape = sourcePersonIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sourcePersonId}", with: sourcePersonIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Отправляет повторно код подтверждения номера телефона.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersSendConfirmCode(personId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersSendConfirmCodeWithRequestBuilder(personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Отправляет повторно код подтверждения номера телефона.
     - POST /v1.2/users/{personId}/SendConfirmPhoneCode
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func usersSendConfirmCodeWithRequestBuilder(personId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/SendConfirmPhoneCode"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Оформляет прикрепление карты к клиенту.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter setCardModel: (query) Модель представления карты. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersSetCard(personId: Int, setCardModel: SetCardModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfCardCompactInfoModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersSetCardWithRequestBuilder(personId: personId, setCardModel: setCardModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Оформляет прикрепление карты к клиенту.
     - POST /v1.2/users/{personId}/SetCard
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter setCardModel: (query) Модель представления карты. 
     - returns: RequestBuilder<ResultModelOfCardCompactInfoModel> 
     */
    open class func usersSetCardWithRequestBuilder(personId: Int, setCardModel: SetCardModel) -> RequestBuilder<ResultModelOfCardCompactInfoModel> {
        var localVariablePath = "/v1.2/users/{personId}/SetCard"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "setCardModel": setCardModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfCardCompactInfoModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Устанавливает значение атрибута клиента через OAuth.
     
     - parameter model: (query) Модель для установки значения атрибута клиента. 
     - parameter identifier: (path) Идентификатор клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersSetClientAttributeValue(model: UserAttributeValueModel, identifier: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersSetClientAttributeValueWithRequestBuilder(model: model, identifier: identifier).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Устанавливает значение атрибута клиента через OAuth.
     - POST /v1.2/users/code/{identifier}/attributes
     - parameter model: (query) Модель для установки значения атрибута клиента. 
     - parameter identifier: (path) Идентификатор клиента. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func usersSetClientAttributeValueWithRequestBuilder(model: UserAttributeValueModel, identifier: String) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/code/{identifier}/attributes"
        let identifierPreEscape = "\(APIHelper.mapValueToPathItem(identifier))"
        let identifierPostEscape = identifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{identifier}", with: identifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Привязывает email к клиенту.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter setNewEmailModel: (query) Модель для привязки email. 
     - parameter attachType: (query) Тип привязки email. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersSetEmail(personId: Int, setNewEmailModel: SetNewEmailModel, attachType: CustomerActionType, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersSetEmailWithRequestBuilder(personId: personId, setNewEmailModel: setNewEmailModel, attachType: attachType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Привязывает email к клиенту.
     - POST /v1.2/users/{personId}/SetEmail
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter setNewEmailModel: (query) Модель для привязки email. 
     - parameter attachType: (query) Тип привязки email. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func usersSetEmailWithRequestBuilder(personId: Int, setNewEmailModel: SetNewEmailModel, attachType: CustomerActionType) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/SetEmail"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "setNewEmailModel": setNewEmailModel.encodeToJSON(),
            "attachType": attachType.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Привязывает номер телефона к клиенту.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter setNewPhoneModel: (query) Модель для прикрепления номера телефона. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersSetPhone(personId: Int, setNewPhoneModel: SetNewPhoneModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfConfirmCodeResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersSetPhoneWithRequestBuilder(personId: personId, setNewPhoneModel: setNewPhoneModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Привязывает номер телефона к клиенту.
     - POST /v1.2/users/{personId}/SetPhone
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter setNewPhoneModel: (query) Модель для прикрепления номера телефона. 
     - returns: RequestBuilder<ResultModelOfConfirmCodeResultModel> 
     */
    open class func usersSetPhoneWithRequestBuilder(personId: Int, setNewPhoneModel: SetNewPhoneModel) -> RequestBuilder<ResultModelOfConfirmCodeResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/SetPhone"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "setNewPhoneModel": setNewPhoneModel.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfConfirmCodeResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Устанавливает пароль клиента.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter needNotify: (query) Отправить клиенту уведомление об установке пароля (true-да, false-нет). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersSetRandomPassword(personId: Int, needNotify: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersSetRandomPasswordWithRequestBuilder(personId: personId, needNotify: needNotify).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Устанавливает пароль клиента.
     - POST /v1.2/users/{personId}/SetRandomPassword
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter needNotify: (query) Отправить клиенту уведомление об установке пароля (true-да, false-нет). (optional)
     - returns: RequestBuilder<ResultModel> 
     */
    open class func usersSetRandomPasswordWithRequestBuilder(personId: Int, needNotify: Bool? = nil) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/SetRandomPassword"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "needNotify": needNotify?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Оформляет подписку клиента на все типы подписок.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersSubscribeToAll(personId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersSubscribeToAllWithRequestBuilder(personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Оформляет подписку клиента на все типы подписок.
     - POST /v1.2/users/{personId}/Subscribe
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func usersSubscribeToAllWithRequestBuilder(personId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/Subscribe"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Оформляет отказ клиента от всех типов подписок.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersUnsubscribeFromAll(personId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersUnsubscribeFromAllWithRequestBuilder(personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Оформляет отказ клиента от всех типов подписок.
     - POST /v1.2/users/{personId}/Unsubscribe
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func usersUnsubscribeFromAllWithRequestBuilder(personId: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/Unsubscribe"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Обновляет ответы на вопросы анкеты.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter updateAnswers: (query) Ответы. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersUpdateAnswers(personId: Int, updateAnswers: [QuestionAnswerModel], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfQuestionsErrorsModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersUpdateAnswersWithRequestBuilder(personId: personId, updateAnswers: updateAnswers).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Обновляет ответы на вопросы анкеты.
     - POST /v1.2/users/{personId}/UpdateAnswers
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter updateAnswers: (query) Ответы. 
     - returns: RequestBuilder<ResultModelOfQuestionsErrorsModel> 
     */
    open class func usersUpdateAnswersWithRequestBuilder(personId: Int, updateAnswers: [QuestionAnswerModel]) -> RequestBuilder<ResultModelOfQuestionsErrorsModel> {
        var localVariablePath = "/v1.2/users/{personId}/UpdateAnswers"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "updateAnswers": updateAnswers.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfQuestionsErrorsModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Изменяет состояние нотификатора (email).
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter model: (query) Модель нотификатора (true-верифицирован, false-не верифицирован). 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersUpdateEmail(personId: Int, model: NotifierChangeModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersUpdateEmailWithRequestBuilder(personId: personId, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Изменяет состояние нотификатора (email).
     - POST /v1.2/users/{personId}/notifiers/Email
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter model: (query) Модель нотификатора (true-верифицирован, false-не верифицирован). 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func usersUpdateEmailWithRequestBuilder(personId: Int, model: NotifierChangeModel) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/notifiers/Email"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Изменяет состояние нотификатора (номера телефона).
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter model: (query) Модель нотификатора (true-верифицирован, false-не верифицирован). 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersUpdatePhoneStatus(personId: Int, model: NotifierChangeModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return usersUpdatePhoneStatusWithRequestBuilder(personId: personId, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Изменяет состояние нотификатора (номера телефона).
     - POST /v1.2/users/{personId}/notifiers/Phone
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter model: (query) Модель нотификатора (true-верифицирован, false-не верифицирован). 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func usersUpdatePhoneStatusWithRequestBuilder(personId: Int, model: NotifierChangeModel) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/users/{personId}/notifiers/Phone"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Обновляет значение атрибута.
     
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter value: (query) Значение атрибута для обновления. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersUpdateUserAttributeValue(personId: Int, value: UserAttributeValueViewModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfUserAttributeValueUpdateError?, _ error: Error?) -> Void)) -> RequestTask {
        return usersUpdateUserAttributeValueWithRequestBuilder(personId: personId, value: value).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Обновляет значение атрибута.
     - POST /v1.2/users/{personId}/UpdateAttributeValue
     - parameter personId: (path) Внутренний идентификатор клиента. 
     - parameter value: (query) Значение атрибута для обновления. 
     - returns: RequestBuilder<ResultModelOfUserAttributeValueUpdateError> 
     */
    open class func usersUpdateUserAttributeValueWithRequestBuilder(personId: Int, value: UserAttributeValueViewModel) -> RequestBuilder<ResultModelOfUserAttributeValueUpdateError> {
        var localVariablePath = "/v1.2/users/{personId}/UpdateAttributeValue"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "value": value.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfUserAttributeValueUpdateError>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
