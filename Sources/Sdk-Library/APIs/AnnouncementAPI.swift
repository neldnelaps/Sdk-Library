//
// AnnouncementAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AnnouncementAPI {

    /**
     Отправляет рекламу в архив.
     
     - parameter id: (path) Внутренний идентификатор рекламы. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func announcementArchiveAnnouncement(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return announcementArchiveAnnouncementWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Отправляет рекламу в архив.
     - POST /v1.2/Announcements/{id}/archive
     - parameter id: (path) Внутренний идентификатор рекламы. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func announcementArchiveAnnouncementWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/Announcements/{id}/archive"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Завершает создание рекламы.
     
     - parameter id: (path) Внутренний идентификатор рекламы. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func announcementCompleteAnnouncement(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return announcementCompleteAnnouncementWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Завершает создание рекламы.
     - POST /v1.2/Announcements/{id}/complete
     - parameter id: (path) Внутренний идентификатор рекламы. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func announcementCompleteAnnouncementWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/Announcements/{id}/complete"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о рекламе.
     
     - parameter id: (path) Внутренний идентификатор рекламы. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func announcementGetAnnouncement(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfAnnouncementModel?, _ error: Error?) -> Void)) -> RequestTask {
        return announcementGetAnnouncementWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о рекламе.
     - GET /v1.2/Announcements/{id}
     - parameter id: (path) Внутренний идентификатор рекламы. 
     - returns: RequestBuilder<ResultModelOfAnnouncementModel> 
     */
    open class func announcementGetAnnouncementWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfAnnouncementModel> {
        var localVariablePath = "/v1.2/Announcements/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfAnnouncementModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список всех реклам для рекламного места.
     
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterTitleSubstr: (query) Подстрока для поиска по названию рекламы. (optional)
     - parameter filterSpaceName: (query) Подстрока для поиска по названию рекламного места. (optional)
     - parameter filterSpaceLogicalName: (query) Логическое имя рекламного места. (optional)
     - parameter filterState: (query) Статус рекламы (Draft — черновик, Ready — готова к публикации, Published — опубликована). (optional)
     - parameter filterDateFrom: (query) Начальная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterDateTo: (query) Конечная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterArchivedState: (query) Признак состояния рекламы (true — архивная, false — неархивная). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func announcementGetAnnouncements(from: Int? = nil, count: Int? = nil, filterTitleSubstr: String? = nil, filterSpaceName: String? = nil, filterSpaceLogicalName: String? = nil, filterState: AnnouncementState? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterArchivedState: ArchivedState? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfAnnouncementModel?, _ error: Error?) -> Void)) -> RequestTask {
        return announcementGetAnnouncementsWithRequestBuilder(from: from, count: count, filterTitleSubstr: filterTitleSubstr, filterSpaceName: filterSpaceName, filterSpaceLogicalName: filterSpaceLogicalName, filterState: filterState, filterDateFrom: filterDateFrom, filterDateTo: filterDateTo, filterArchivedState: filterArchivedState).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список всех реклам для рекламного места.
     - GET /v1.2/Announcements
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterTitleSubstr: (query) Подстрока для поиска по названию рекламы. (optional)
     - parameter filterSpaceName: (query) Подстрока для поиска по названию рекламного места. (optional)
     - parameter filterSpaceLogicalName: (query) Логическое имя рекламного места. (optional)
     - parameter filterState: (query) Статус рекламы (Draft — черновик, Ready — готова к публикации, Published — опубликована). (optional)
     - parameter filterDateFrom: (query) Начальная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterDateTo: (query) Конечная дата выборки в формате 0000-00-00T00:00:00Z. (optional)
     - parameter filterArchivedState: (query) Признак состояния рекламы (true — архивная, false — неархивная). (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfAnnouncementModel> 
     */
    open class func announcementGetAnnouncementsWithRequestBuilder(from: Int? = nil, count: Int? = nil, filterTitleSubstr: String? = nil, filterSpaceName: String? = nil, filterSpaceLogicalName: String? = nil, filterState: AnnouncementState? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterArchivedState: ArchivedState? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfAnnouncementModel> {
        let localVariablePath = "/v1.2/Announcements"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.titleSubstr": filterTitleSubstr?.encodeToJSON(),
            "filter.spaceName": filterSpaceName?.encodeToJSON(),
            "filter.spaceLogicalName": filterSpaceLogicalName?.encodeToJSON(),
            "filter.state": filterState?.encodeToJSON(),
            "filter.dateFrom": filterDateFrom?.encodeToJSON(),
            "filter.dateTo": filterDateTo?.encodeToJSON(),
            "filter.archivedState": filterArchivedState?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfAnnouncementModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Публикует рекламу.
     
     - parameter id: (path) Внутренний идентификатор рекламы. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func announcementPublishAnnouncement(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return announcementPublishAnnouncementWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Публикует рекламу.
     - POST /v1.2/Announcements/{id}/publish
     - parameter id: (path) Внутренний идентификатор рекламы. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func announcementPublishAnnouncementWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/Announcements/{id}/publish"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Восстанавливает рекламу из архива.
     
     - parameter id: (path) Внутренний идентификатор рекламы. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func announcementRestoreAnnouncement(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return announcementRestoreAnnouncementWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Восстанавливает рекламу из архива.
     - POST /v1.2/Announcements/{id}/restore
     - parameter id: (path) Внутренний идентификатор рекламы. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func announcementRestoreAnnouncementWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/Announcements/{id}/restore"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
