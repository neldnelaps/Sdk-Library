//
// TargetGroupAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TargetGroupAPI {

    /**
     Запускает расчет целевой аудитории.
     
     - parameter id: (path) Внутренний идентификатор целевой аудитории. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetGroupCalculateTargetGroup(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return targetGroupCalculateTargetGroupWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Запускает расчет целевой аудитории.
     - POST /v1.2/targetGroups/{id}/calculate
     - parameter id: (path) Внутренний идентификатор целевой аудитории. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func targetGroupCalculateTargetGroupWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/targetGroups/{id}/calculate"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить все целевые аудитории.
     
     - parameter filter: (query) Фильтр поиска по параметрам. 
     - parameter from: (query) Начало выборки. (optional)
     - parameter count: (query) Объем выборки. (optional)
     - parameter filterBySortingIds: (query) Фильтровать только по целевым аудиториям с идентификаторами, переданными в SortingIds. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetGroupGetAllTargetGroups(filter: TargetGroupSearchFilter, from: Int? = nil, count: Int? = nil, filterBySortingIds: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfTargetGroupBriefViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return targetGroupGetAllTargetGroupsWithRequestBuilder(filter: filter, from: from, count: count, filterBySortingIds: filterBySortingIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить все целевые аудитории.
     - POST /v1.2/targetGroups/list
     - parameter filter: (query) Фильтр поиска по параметрам. 
     - parameter from: (query) Начало выборки. (optional)
     - parameter count: (query) Объем выборки. (optional)
     - parameter filterBySortingIds: (query) Фильтровать только по целевым аудиториям с идентификаторами, переданными в SortingIds. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfTargetGroupBriefViewModel> 
     */
    open class func targetGroupGetAllTargetGroupsWithRequestBuilder(filter: TargetGroupSearchFilter, from: Int? = nil, count: Int? = nil, filterBySortingIds: Bool? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfTargetGroupBriefViewModel> {
        let localVariablePath = "/v1.2/targetGroups/list"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filterBySortingIds": filterBySortingIds?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfTargetGroupBriefViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список пользователей, которые создавали целевые аудитории.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetGroupGetAvailableCreators(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfCreatorModel?, _ error: Error?) -> Void)) -> RequestTask {
        return targetGroupGetAvailableCreatorsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список пользователей, которые создавали целевые аудитории.
     - GET /v1.2/targetGroups/AvailableCreators
     - returns: RequestBuilder<ResultModelOfListOfCreatorModel> 
     */
    open class func targetGroupGetAvailableCreatorsWithRequestBuilder() -> RequestBuilder<ResultModelOfListOfCreatorModel> {
        let localVariablePath = "/v1.2/targetGroups/AvailableCreators"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfCreatorModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список выбранных идентификаторов клиентов, входящих в последней расчет целевой аудитории.
     
     - parameter id: (path) Внутренний идентификатор целевой аудитории. 
     - parameter types: (query) Типы идентификаторов клиентов, входящих в целевую аудиторию. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetGroupGetCustomersByTargetGroupLastCalculation(id: Int, types: [IdentifierType], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return targetGroupGetCustomersByTargetGroupLastCalculationWithRequestBuilder(id: id, types: types).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список выбранных идентификаторов клиентов, входящих в последней расчет целевой аудитории.
     - GET /v1.2/targetGroups/{id}/calculation/customers
     - parameter id: (path) Внутренний идентификатор целевой аудитории. 
     - parameter types: (query) Типы идентификаторов клиентов, входящих в целевую аудиторию. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func targetGroupGetCustomersByTargetGroupLastCalculationWithRequestBuilder(id: Int, types: [IdentifierType]) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/v1.2/targetGroups/{id}/calculation/customers"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "types": types.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список клиентов, входящих в последний расчет целевой аудитории.
     
     - parameter targetGroupId: (query) Внутренний идентификатор целевой аудитории. 
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterIdentifierText: (query) Только пользователи с идентификаторами содержащими данный текст. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetGroupGetPersonsByTargetGroupLastCalculation(targetGroupId: Int, from: Int? = nil, count: Int? = nil, filterIdentifierText: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfUserViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return targetGroupGetPersonsByTargetGroupLastCalculationWithRequestBuilder(targetGroupId: targetGroupId, from: from, count: count, filterIdentifierText: filterIdentifierText).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список клиентов, входящих в последний расчет целевой аудитории.
     - GET /v1.2/targetGroups/persons
     - parameter targetGroupId: (query) Внутренний идентификатор целевой аудитории. 
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter filterIdentifierText: (query) Только пользователи с идентификаторами содержащими данный текст. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfUserViewModel> 
     */
    open class func targetGroupGetPersonsByTargetGroupLastCalculationWithRequestBuilder(targetGroupId: Int, from: Int? = nil, count: Int? = nil, filterIdentifierText: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfUserViewModel> {
        let localVariablePath = "/v1.2/targetGroups/persons"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "targetGroupId": targetGroupId.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.identifierText": filterIdentifierText?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfUserViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает целевую аудиторию по внутреннему идентификатору.
     
     - parameter id: (path) Внутренний идентификатор целевой аудитории. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetGroupGetTargetGroup(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfTargetGroupViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return targetGroupGetTargetGroupWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает целевую аудиторию по внутреннему идентификатору.
     - GET /v1.2/targetGroups/{id}
     - parameter id: (path) Внутренний идентификатор целевой аудитории. 
     - returns: RequestBuilder<ResultModelOfTargetGroupViewModel> 
     */
    open class func targetGroupGetTargetGroupWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfTargetGroupViewModel> {
        var localVariablePath = "/v1.2/targetGroups/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfTargetGroupViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает информацию о последнем расчете целевой аудитории.
     
     - parameter id: (path) Внутренний идентификатор целевой аудитории. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetGroupGetTargetGroupCalculationInfo(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfCalculationModel?, _ error: Error?) -> Void)) -> RequestTask {
        return targetGroupGetTargetGroupCalculationInfoWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает информацию о последнем расчете целевой аудитории.
     - GET /v1.2/targetGroups/{id}/calculation
     - parameter id: (path) Внутренний идентификатор целевой аудитории. 
     - returns: RequestBuilder<ResultModelOfCalculationModel> 
     */
    open class func targetGroupGetTargetGroupCalculationInfoWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfCalculationModel> {
        var localVariablePath = "/v1.2/targetGroups/{id}/calculation"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfCalculationModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает все целевые аудитории.
     
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter properties: (query) Свойства целевой аудитории. Если не указать ни одного, то будут возвращены все (доступные свойства  creationDate, changeDate, fixDate, creatorDescription, lastChangeUserDescription, fixUserDescription, calculationInfo, lastCalculationInfo; hasFilters, operations). (optional)
     - parameter filterId: (query) Внутренний идентификатор фильтра в акции. (optional)
     - parameter offerId: (query) Внутренний идентификатор акции. (optional)
     - parameter chainId: (query) Внутренний идентификатор правила акции. (optional)
     - parameter offerVersionId: (query) Внутренний идентификатор версии акции. (optional)
     - parameter isExternal: (query) Признак импортированной целевой аудитории (true - импортированная, false - неимпортированная). (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterPartnerIds: (query)  (optional)
     - parameter filterLoyaltyPrograms: (query)  (optional)
     - parameter filterCreatorIds: (query)  (optional)
     - parameter filterSortingIds: (query)  (optional)
     - parameter filterName: (query)  (optional)
     - parameter filterArchivedShowMode: (query)  (optional)
     - parameter filterCalculatedShowMode: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetGroupGetTargetGroups(from: Int? = nil, count: Int? = nil, properties: [String]? = nil, filterId: Int? = nil, offerId: Int? = nil, chainId: Int? = nil, offerVersionId: Int? = nil, isExternal: Bool? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterPartnerIds: [Int]? = nil, filterLoyaltyPrograms: [Int]? = nil, filterCreatorIds: [Int]? = nil, filterSortingIds: [Int]? = nil, filterName: String? = nil, filterArchivedShowMode: ArchivedState? = nil, filterCalculatedShowMode: TargetGroupCalculatedShowMode? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfTargetGroupViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return targetGroupGetTargetGroupsWithRequestBuilder(from: from, count: count, properties: properties, filterId: filterId, offerId: offerId, chainId: chainId, offerVersionId: offerVersionId, isExternal: isExternal, filterDateFrom: filterDateFrom, filterDateTo: filterDateTo, filterPartnerIds: filterPartnerIds, filterLoyaltyPrograms: filterLoyaltyPrograms, filterCreatorIds: filterCreatorIds, filterSortingIds: filterSortingIds, filterName: filterName, filterArchivedShowMode: filterArchivedShowMode, filterCalculatedShowMode: filterCalculatedShowMode).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает все целевые аудитории.
     - GET /v1.2/targetGroups
     - parameter from: (query) Порядковый номер начального элемента выборки. (optional)
     - parameter count: (query) Количество возвращаемых элементов выборки. (optional)
     - parameter properties: (query) Свойства целевой аудитории. Если не указать ни одного, то будут возвращены все (доступные свойства  creationDate, changeDate, fixDate, creatorDescription, lastChangeUserDescription, fixUserDescription, calculationInfo, lastCalculationInfo; hasFilters, operations). (optional)
     - parameter filterId: (query) Внутренний идентификатор фильтра в акции. (optional)
     - parameter offerId: (query) Внутренний идентификатор акции. (optional)
     - parameter chainId: (query) Внутренний идентификатор правила акции. (optional)
     - parameter offerVersionId: (query) Внутренний идентификатор версии акции. (optional)
     - parameter isExternal: (query) Признак импортированной целевой аудитории (true - импортированная, false - неимпортированная). (optional)
     - parameter filterDateFrom: (query)  (optional)
     - parameter filterDateTo: (query)  (optional)
     - parameter filterPartnerIds: (query)  (optional)
     - parameter filterLoyaltyPrograms: (query)  (optional)
     - parameter filterCreatorIds: (query)  (optional)
     - parameter filterSortingIds: (query)  (optional)
     - parameter filterName: (query)  (optional)
     - parameter filterArchivedShowMode: (query)  (optional)
     - parameter filterCalculatedShowMode: (query)  (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfTargetGroupViewModel> 
     */
    open class func targetGroupGetTargetGroupsWithRequestBuilder(from: Int? = nil, count: Int? = nil, properties: [String]? = nil, filterId: Int? = nil, offerId: Int? = nil, chainId: Int? = nil, offerVersionId: Int? = nil, isExternal: Bool? = nil, filterDateFrom: String? = nil, filterDateTo: String? = nil, filterPartnerIds: [Int]? = nil, filterLoyaltyPrograms: [Int]? = nil, filterCreatorIds: [Int]? = nil, filterSortingIds: [Int]? = nil, filterName: String? = nil, filterArchivedShowMode: ArchivedState? = nil, filterCalculatedShowMode: TargetGroupCalculatedShowMode? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfTargetGroupViewModel> {
        let localVariablePath = "/v1.2/targetGroups"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "properties": properties?.encodeToJSON(),
            "filterId": filterId?.encodeToJSON(),
            "offerId": offerId?.encodeToJSON(),
            "chainId": chainId?.encodeToJSON(),
            "offerVersionId": offerVersionId?.encodeToJSON(),
            "isExternal": isExternal?.encodeToJSON(),
            "filter.dateFrom": filterDateFrom?.encodeToJSON(),
            "filter.dateTo": filterDateTo?.encodeToJSON(),
            "filter.partnerIds": filterPartnerIds?.encodeToJSON(),
            "filter.loyaltyPrograms": filterLoyaltyPrograms?.encodeToJSON(),
            "filter.creatorIds": filterCreatorIds?.encodeToJSON(),
            "filter.sortingIds": filterSortingIds?.encodeToJSON(),
            "filter.name": filterName?.encodeToJSON(),
            "filter.archivedShowMode": filterArchivedShowMode?.encodeToJSON(),
            "filter.calculatedShowMode": filterCalculatedShowMode?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfTargetGroupViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Восстанавливает из архива целевую аудиторию.
     
     - parameter id: (path) Внутренний идентификатор целевой аудитории. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetGroupRestoreTargetGroup(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return targetGroupRestoreTargetGroupWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Восстанавливает из архива целевую аудиторию.
     - POST /v1.2/targetGroups/{id}/restore
     - parameter id: (path) Внутренний идентификатор целевой аудитории. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func targetGroupRestoreTargetGroupWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/targetGroups/{id}/restore"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Снимает фиксацию (расчет) с целевой аудитории.
     
     - parameter id: (path) Внутренний идентификатор целевой аудитории. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetGroupUnfixTargetGroup(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return targetGroupUnfixTargetGroupWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Снимает фиксацию (расчет) с целевой аудитории.
     - POST /v1.2/targetGroups/{id}/unfix
     - parameter id: (path) Внутренний идентификатор целевой аудитории. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func targetGroupUnfixTargetGroupWithRequestBuilder(id: Int) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/targetGroups/{id}/unfix"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Импортирует клиентов в ранее созданную целевую аудиторию.
     
     - parameter targetGroupId: (query) Внутренний идентификатор целевой аудитории. 
     - parameter model: (query) Модель импорта идентификаторов клиентов. {Loymax.Domain.Contract.Model.TargetGroups.TargetGroupImportModel}. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetGroupUploadCalculation(targetGroupId: Int, model: TargetGroupImportModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfInt32?, _ error: Error?) -> Void)) -> RequestTask {
        return targetGroupUploadCalculationWithRequestBuilder(targetGroupId: targetGroupId, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Импортирует клиентов в ранее созданную целевую аудиторию.
     - POST /v1.2/targetGroups/import
     - parameter targetGroupId: (query) Внутренний идентификатор целевой аудитории. 
     - parameter model: (query) Модель импорта идентификаторов клиентов. {Loymax.Domain.Contract.Model.TargetGroups.TargetGroupImportModel}. 
     - returns: RequestBuilder<ResultModelOfInt32> 
     */
    open class func targetGroupUploadCalculationWithRequestBuilder(targetGroupId: Int, model: TargetGroupImportModel) -> RequestBuilder<ResultModelOfInt32> {
        let localVariablePath = "/v1.2/targetGroups/import"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "targetGroupId": targetGroupId.encodeToJSON(),
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfInt32>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
