//
// BusinessEventsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BusinessEventsAPI {

    /**
     Возвращает список доступных переменных контекста.
     
     - parameter eventType: (path) Тип события. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func businessEventsGetAvailableVariables(eventType: OfferEventType, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfString?, _ error: Error?) -> Void)) -> RequestTask {
        return businessEventsGetAvailableVariablesWithRequestBuilder(eventType: eventType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список доступных переменных контекста.
     - GET /v1.2/Events/{eventType}/Variables
     - parameter eventType: (path) Тип события. 
     - returns: RequestBuilder<ResultModelOfListOfString> 
     */
    open class func businessEventsGetAvailableVariablesWithRequestBuilder(eventType: OfferEventType) -> RequestBuilder<ResultModelOfListOfString> {
        var localVariablePath = "/v1.2/Events/{eventType}/Variables"
        let eventTypePreEscape = "\(APIHelper.mapValueToPathItem(eventType))"
        let eventTypePostEscape = eventTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{eventType}", with: eventTypePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список активностей.
     
     - parameter filterFrom: (query) С какого элемента брать. (optional)
     - parameter filterCount: (query) Сколько элементов брать. (optional)
     - parameter filterActivityDateFrom: (query) Дата создания с. (optional)
     - parameter filterActivityDateTo: (query) Дата создания по. (optional)
     - parameter filterPersonId: (query) Идентификатор пользователя. (optional)
     - parameter filterPurchaseId: (query) Идентификатор покупки. (optional)
     - parameter filterContextType: (query) Тип контекста. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func businessEventsGetBusinessEvents(filterFrom: Int? = nil, filterCount: Int? = nil, filterActivityDateFrom: String? = nil, filterActivityDateTo: String? = nil, filterPersonId: Int? = nil, filterPurchaseId: Int? = nil, filterContextType: BusinessActivityContextType? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfBusinessActivityViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return businessEventsGetBusinessEventsWithRequestBuilder(filterFrom: filterFrom, filterCount: filterCount, filterActivityDateFrom: filterActivityDateFrom, filterActivityDateTo: filterActivityDateTo, filterPersonId: filterPersonId, filterPurchaseId: filterPurchaseId, filterContextType: filterContextType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список активностей.
     - GET /v1.2/Events
     - parameter filterFrom: (query) С какого элемента брать. (optional)
     - parameter filterCount: (query) Сколько элементов брать. (optional)
     - parameter filterActivityDateFrom: (query) Дата создания с. (optional)
     - parameter filterActivityDateTo: (query) Дата создания по. (optional)
     - parameter filterPersonId: (query) Идентификатор пользователя. (optional)
     - parameter filterPurchaseId: (query) Идентификатор покупки. (optional)
     - parameter filterContextType: (query) Тип контекста. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfBusinessActivityViewModel> 
     */
    open class func businessEventsGetBusinessEventsWithRequestBuilder(filterFrom: Int? = nil, filterCount: Int? = nil, filterActivityDateFrom: String? = nil, filterActivityDateTo: String? = nil, filterPersonId: Int? = nil, filterPurchaseId: Int? = nil, filterContextType: BusinessActivityContextType? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfBusinessActivityViewModel> {
        let localVariablePath = "/v1.2/Events"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.from": filterFrom?.encodeToJSON(),
            "filter.count": filterCount?.encodeToJSON(),
            "filter.activityDateFrom": filterActivityDateFrom?.encodeToJSON(),
            "filter.activityDateTo": filterActivityDateTo?.encodeToJSON(),
            "filter.personId": filterPersonId?.encodeToJSON(),
            "filter.purchaseId": filterPurchaseId?.encodeToJSON(),
            "filter.contextType": filterContextType?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfBusinessActivityViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
