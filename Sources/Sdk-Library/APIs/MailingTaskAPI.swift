//
// MailingTaskAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MailingTaskAPI {

    /**
     Отменяет задачу рассылки.
     
     - parameter mailingId: (path) Идентификатор рассылки. 
     - parameter mailingTaskId: (path) Идентификатор задачи. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mailingTaskCancel(mailingId: Int, mailingTaskId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfMailingTaskViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return mailingTaskCancelWithRequestBuilder(mailingId: mailingId, mailingTaskId: mailingTaskId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Отменяет задачу рассылки.
     - POST /v1.2/mailings/{mailingId}/tasks/{mailingTaskId}/cancel
     - parameter mailingId: (path) Идентификатор рассылки. 
     - parameter mailingTaskId: (path) Идентификатор задачи. 
     - returns: RequestBuilder<ResultModelOfMailingTaskViewModel> 
     */
    open class func mailingTaskCancelWithRequestBuilder(mailingId: Int, mailingTaskId: Int) -> RequestBuilder<ResultModelOfMailingTaskViewModel> {
        var localVariablePath = "/v1.2/mailings/{mailingId}/tasks/{mailingTaskId}/cancel"
        let mailingIdPreEscape = "\(APIHelper.mapValueToPathItem(mailingId))"
        let mailingIdPostEscape = mailingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mailingId}", with: mailingIdPostEscape, options: .literal, range: nil)
        let mailingTaskIdPreEscape = "\(APIHelper.mapValueToPathItem(mailingTaskId))"
        let mailingTaskIdPostEscape = mailingTaskIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mailingTaskId}", with: mailingTaskIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfMailingTaskViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список задач для рассылки.
     
     - parameter mailingId: (path) Идентификатор рассылки. 
     - parameter from: (query) From. 
     - parameter count: (query) Count. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mailingTaskGetMailingsTasks(mailingId: Int, from: Int, count: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfMailingTaskViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return mailingTaskGetMailingsTasksWithRequestBuilder(mailingId: mailingId, from: from, count: count).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список задач для рассылки.
     - GET /v1.2/mailings/{mailingId}/tasks
     - parameter mailingId: (path) Идентификатор рассылки. 
     - parameter from: (query) From. 
     - parameter count: (query) Count. 
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfMailingTaskViewModel> 
     */
    open class func mailingTaskGetMailingsTasksWithRequestBuilder(mailingId: Int, from: Int, count: Int) -> RequestBuilder<ResultModelOfPagedViewModelOfMailingTaskViewModel> {
        var localVariablePath = "/v1.2/mailings/{mailingId}/tasks"
        let mailingIdPreEscape = "\(APIHelper.mapValueToPathItem(mailingId))"
        let mailingIdPostEscape = mailingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mailingId}", with: mailingIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from.encodeToJSON(),
            "count": count.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfMailingTaskViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
