//
// ConfigurationDeploysAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ConfigurationDeploysAPI {

    /**
     Получение описания деплоя.
     
     - parameter externalId: (path) Внешний дентификатор деплоя. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func configurationDeploysGetDeployInfo(externalId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfConfigurationDeployViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return configurationDeploysGetDeployInfoWithRequestBuilder(externalId: externalId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получение описания деплоя.
     - GET /v1.2/configurationDeploys/{externalId}
     - parameter externalId: (path) Внешний дентификатор деплоя. 
     - returns: RequestBuilder<ResultModelOfConfigurationDeployViewModel> 
     */
    open class func configurationDeploysGetDeployInfoWithRequestBuilder(externalId: String) -> RequestBuilder<ResultModelOfConfigurationDeployViewModel> {
        var localVariablePath = "/v1.2/configurationDeploys/{externalId}"
        let externalIdPreEscape = "\(APIHelper.mapValueToPathItem(externalId))"
        let externalIdPostEscape = externalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{externalId}", with: externalIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfConfigurationDeployViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Возвращает список всех деплоев.
     
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterFromDate: (query) Дата С. (optional)
     - parameter filterToDate: (query) Дата По. (optional)
     - parameter filterPackageVersionSubstring: (query) Подстрока для поиска по версионности. (optional)
     - parameter filterIsSuccess: (query) Успешность выполнения. (optional)
     - parameter filterAuthorSubstring: (query) Подстрока для поиска по автору. (optional)
     - parameter filterExternalId: (query) Внешний идентификатор. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func configurationDeploysGetDeploys(from: Int? = nil, count: Int? = nil, filterFromDate: String? = nil, filterToDate: String? = nil, filterPackageVersionSubstring: String? = nil, filterIsSuccess: Bool? = nil, filterAuthorSubstring: String? = nil, filterExternalId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfConfigurationDeployViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return configurationDeploysGetDeploysWithRequestBuilder(from: from, count: count, filterFromDate: filterFromDate, filterToDate: filterToDate, filterPackageVersionSubstring: filterPackageVersionSubstring, filterIsSuccess: filterIsSuccess, filterAuthorSubstring: filterAuthorSubstring, filterExternalId: filterExternalId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Возвращает список всех деплоев.
     - GET /v1.2/configurationDeploys
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter filterFromDate: (query) Дата С. (optional)
     - parameter filterToDate: (query) Дата По. (optional)
     - parameter filterPackageVersionSubstring: (query) Подстрока для поиска по версионности. (optional)
     - parameter filterIsSuccess: (query) Успешность выполнения. (optional)
     - parameter filterAuthorSubstring: (query) Подстрока для поиска по автору. (optional)
     - parameter filterExternalId: (query) Внешний идентификатор. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfConfigurationDeployViewModel> 
     */
    open class func configurationDeploysGetDeploysWithRequestBuilder(from: Int? = nil, count: Int? = nil, filterFromDate: String? = nil, filterToDate: String? = nil, filterPackageVersionSubstring: String? = nil, filterIsSuccess: Bool? = nil, filterAuthorSubstring: String? = nil, filterExternalId: String? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfConfigurationDeployViewModel> {
        let localVariablePath = "/v1.2/configurationDeploys"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "filter.fromDate": filterFromDate?.encodeToJSON(),
            "filter.toDate": filterToDate?.encodeToJSON(),
            "filter.packageVersionSubstring": filterPackageVersionSubstring?.encodeToJSON(),
            "filter.isSuccess": filterIsSuccess?.encodeToJSON(),
            "filter.authorSubstring": filterAuthorSubstring?.encodeToJSON(),
            "filter.externalId": filterExternalId?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfConfigurationDeployViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
