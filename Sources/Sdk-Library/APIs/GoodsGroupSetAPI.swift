//
// GoodsGroupSetAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class GoodsGroupSetAPI {

    /**
     Получить наборы группы товаров.
     
     - parameter goodsGroupId: (path) Id группы товаров. 
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter type: (query) Тип набора. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func goodsGroupSetGetGoodsGroupGoodsSets(goodsGroupId: Int, from: Int? = nil, count: Int? = nil, type: GoodsSetType? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfGoodsSetViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return goodsGroupSetGetGoodsGroupGoodsSetsWithRequestBuilder(goodsGroupId: goodsGroupId, from: from, count: count, type: type).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить наборы группы товаров.
     - GET /v1.2/goodsGroups/{goodsGroupId}/goodsSets
     - parameter goodsGroupId: (path) Id группы товаров. 
     - parameter from: (query) From. (optional)
     - parameter count: (query) Count. (optional)
     - parameter type: (query) Тип набора. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfGoodsSetViewModel> 
     */
    open class func goodsGroupSetGetGoodsGroupGoodsSetsWithRequestBuilder(goodsGroupId: Int, from: Int? = nil, count: Int? = nil, type: GoodsSetType? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfGoodsSetViewModel> {
        var localVariablePath = "/v1.2/goodsGroups/{goodsGroupId}/goodsSets"
        let goodsGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(goodsGroupId))"
        let goodsGroupIdPostEscape = goodsGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{goodsGroupId}", with: goodsGroupIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(),
            "count": count?.encodeToJSON(),
            "type": type?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfGoodsSetViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Редактировать набор группы товаров.
     
     - parameter goodsGroupId: (path) Id группы товаров. 
     - parameter goodsSetId: (path) Id набора. 
     - parameter model: (query) Модель набора товаров. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func goodsGroupSetUpdateGoodsGroupGoodsSet(goodsGroupId: Int, goodsSetId: Int, model: GoodsSetModel, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return goodsGroupSetUpdateGoodsGroupGoodsSetWithRequestBuilder(goodsGroupId: goodsGroupId, goodsSetId: goodsSetId, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Редактировать набор группы товаров.
     - POST /v1.2/goodsGroups/{goodsGroupId}/goodsSets/{goodsSetId}
     - parameter goodsGroupId: (path) Id группы товаров. 
     - parameter goodsSetId: (path) Id набора. 
     - parameter model: (query) Модель набора товаров. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func goodsGroupSetUpdateGoodsGroupGoodsSetWithRequestBuilder(goodsGroupId: Int, goodsSetId: Int, model: GoodsSetModel) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/goodsGroups/{goodsGroupId}/goodsSets/{goodsSetId}"
        let goodsGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(goodsGroupId))"
        let goodsGroupIdPostEscape = goodsGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{goodsGroupId}", with: goodsGroupIdPostEscape, options: .literal, range: nil)
        let goodsSetIdPreEscape = "\(APIHelper.mapValueToPathItem(goodsSetId))"
        let goodsSetIdPostEscape = goodsSetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{goodsSetId}", with: goodsSetIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model": model.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
