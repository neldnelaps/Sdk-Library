//
// BatchCustomersImportModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель пакета операций. */
public struct BatchCustomersImportModel: Codable, JSONEncodable, Hashable {

    /** ID групповой операции. */
    public var id: Int?
    public var creator: CreatorModel?
    /** Дата создания. */
    public var creationDate: Date?
    /** Описание для пользователя. */
    public var description: String?
    public var state: BatchState?
    public var importIdentifierType: IdentifierType?
    /** Логическое имя нотификатора, если был импорт по нотификаторам. */
    public var logicalNameNotifier: String?

    public init(id: Int? = nil, creator: CreatorModel? = nil, creationDate: Date? = nil, description: String? = nil, state: BatchState? = nil, importIdentifierType: IdentifierType? = nil, logicalNameNotifier: String? = nil) {
        self.id = id
        self.creator = creator
        self.creationDate = creationDate
        self.description = description
        self.state = state
        self.importIdentifierType = importIdentifierType
        self.logicalNameNotifier = logicalNameNotifier
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case creator
        case creationDate
        case description
        case state
        case importIdentifierType
        case logicalNameNotifier
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(creator, forKey: .creator)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(importIdentifierType, forKey: .importIdentifierType)
        try container.encodeIfPresent(logicalNameNotifier, forKey: .logicalNameNotifier)
    }
}

