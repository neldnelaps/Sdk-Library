//
// EmissionNumberTemplateFilter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Фильтр для шаблонов для генерации номеров выпусков. */
public struct EmissionNumberTemplateFilter: Codable, JSONEncodable, Hashable {

    /** Начало выборки. */
    public var from: Int?
    /** Количество. */
    public var count: Int?
    public var emissionType: EmissionTypeEnum?
    /** Подстрока текстового описания шаблона. */
    public var textSubStr: String?
    public var showMode: ArchivedState?

    public init(from: Int? = nil, count: Int? = nil, emissionType: EmissionTypeEnum? = nil, textSubStr: String? = nil, showMode: ArchivedState? = nil) {
        self.from = from
        self.count = count
        self.emissionType = emissionType
        self.textSubStr = textSubStr
        self.showMode = showMode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case from
        case count
        case emissionType
        case textSubStr
        case showMode
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(emissionType, forKey: .emissionType)
        try container.encodeIfPresent(textSubStr, forKey: .textSubStr)
        try container.encodeIfPresent(showMode, forKey: .showMode)
    }
}

