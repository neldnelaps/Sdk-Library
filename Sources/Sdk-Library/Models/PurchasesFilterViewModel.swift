//
// PurchasesFilterViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель фильтра для получения коллекции покупок. */
public struct PurchasesFilterViewModel: Codable, JSONEncodable, Hashable {

    /** Нижняя граница времени покупки. */
    public var startChequeTime: Date?
    /** Верхняя граница времени покупки. */
    public var lastChequeTime: Date?
    /** Идентификатор магазина. */
    public var merchantIds: [Int]?
    /** Идентификатор программ лояльности. */
    public var loyaltyPrograms: [Int]?
    /** Номер чека. */
    public var chequeNumber: String?
    /** Количество. */
    public var count: Int?
    /** Начальная позиция в списке. */
    public var from: Int?
    /** Номер карты клиента. */
    public var cardNumber: String?
    /** Идентификатор пользователя. */
    public var personId: Int?
    /** Номер телефона клиента. */
    public var personIdentifier: String?
    /** Ids касс. */
    public var deviceIds: [Int]?
    public var state: PurchaseState?

    public init(startChequeTime: Date? = nil, lastChequeTime: Date? = nil, merchantIds: [Int]? = nil, loyaltyPrograms: [Int]? = nil, chequeNumber: String? = nil, count: Int? = nil, from: Int? = nil, cardNumber: String? = nil, personId: Int? = nil, personIdentifier: String? = nil, deviceIds: [Int]? = nil, state: PurchaseState? = nil) {
        self.startChequeTime = startChequeTime
        self.lastChequeTime = lastChequeTime
        self.merchantIds = merchantIds
        self.loyaltyPrograms = loyaltyPrograms
        self.chequeNumber = chequeNumber
        self.count = count
        self.from = from
        self.cardNumber = cardNumber
        self.personId = personId
        self.personIdentifier = personIdentifier
        self.deviceIds = deviceIds
        self.state = state
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case startChequeTime
        case lastChequeTime
        case merchantIds
        case loyaltyPrograms
        case chequeNumber
        case count
        case from
        case cardNumber
        case personId
        case personIdentifier
        case deviceIds
        case state
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(startChequeTime, forKey: .startChequeTime)
        try container.encodeIfPresent(lastChequeTime, forKey: .lastChequeTime)
        try container.encodeIfPresent(merchantIds, forKey: .merchantIds)
        try container.encodeIfPresent(loyaltyPrograms, forKey: .loyaltyPrograms)
        try container.encodeIfPresent(chequeNumber, forKey: .chequeNumber)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(cardNumber, forKey: .cardNumber)
        try container.encodeIfPresent(personId, forKey: .personId)
        try container.encodeIfPresent(personIdentifier, forKey: .personIdentifier)
        try container.encodeIfPresent(deviceIds, forKey: .deviceIds)
        try container.encodeIfPresent(state, forKey: .state)
    }
}

