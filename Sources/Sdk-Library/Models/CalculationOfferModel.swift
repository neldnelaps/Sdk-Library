//
// CalculationOfferModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Фильтр для списка счетов кассы. */
public struct CalculationOfferModel: Codable, JSONEncodable, Hashable {

    /** Идентификатор версии. */
    public var id: Int?
    /** Идентификатор акции. */
    public var offerId: Int?
    /** Приоритет. */
    public var priority: Int?
    /** Суммируемость. */
    public var isSum: Bool?
    /** Наименование. */
    public var name: String?
    /** Не выполнено, так как контекст пуст, или ещё чего. */
    public var _break: Bool?
    /** Идентификатор программы лояльности. */
    public var loyaltyProgramId: Int?
    /** Фильтры. */
    public var filters: [FilterModel]?
    /** Группы цепочек действий. */
    public var chainGroups: [ChainGroupModel]?
    /** Длительность расчета в миллисекундах. */
    public var calculationDuration: Double?
    /** Длительность расчета в приоритезации в миллисекундах. */
    public var orderingCalculationDuration: Double?
    /** Длительность расчета остальных при приоритезации в миллисекундах. */
    public var orderingOtherCalculationDuration: Double?

    public init(id: Int? = nil, offerId: Int? = nil, priority: Int? = nil, isSum: Bool? = nil, name: String? = nil, _break: Bool? = nil, loyaltyProgramId: Int? = nil, filters: [FilterModel]? = nil, chainGroups: [ChainGroupModel]? = nil, calculationDuration: Double? = nil, orderingCalculationDuration: Double? = nil, orderingOtherCalculationDuration: Double? = nil) {
        self.id = id
        self.offerId = offerId
        self.priority = priority
        self.isSum = isSum
        self.name = name
        self._break = _break
        self.loyaltyProgramId = loyaltyProgramId
        self.filters = filters
        self.chainGroups = chainGroups
        self.calculationDuration = calculationDuration
        self.orderingCalculationDuration = orderingCalculationDuration
        self.orderingOtherCalculationDuration = orderingOtherCalculationDuration
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case offerId
        case priority
        case isSum
        case name
        case _break = "break"
        case loyaltyProgramId
        case filters
        case chainGroups
        case calculationDuration
        case orderingCalculationDuration
        case orderingOtherCalculationDuration
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(offerId, forKey: .offerId)
        try container.encodeIfPresent(priority, forKey: .priority)
        try container.encodeIfPresent(isSum, forKey: .isSum)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(_break, forKey: ._break)
        try container.encodeIfPresent(loyaltyProgramId, forKey: .loyaltyProgramId)
        try container.encodeIfPresent(filters, forKey: .filters)
        try container.encodeIfPresent(chainGroups, forKey: .chainGroups)
        try container.encodeIfPresent(calculationDuration, forKey: .calculationDuration)
        try container.encodeIfPresent(orderingCalculationDuration, forKey: .orderingCalculationDuration)
        try container.encodeIfPresent(orderingOtherCalculationDuration, forKey: .orderingOtherCalculationDuration)
    }
}

