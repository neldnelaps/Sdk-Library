//
// AttributesFilter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Фильтр для атрибутов пользователя. */
public struct AttributesFilter: Codable, JSONEncodable, Hashable {

    /** Начало выборки. */
    public var from: Int?
    /** Количество. */
    public var count: Int?
    /** Id партнера (для получения списка для акции). */
    public var partnerId: Int?
    /** Id выбранного атрибута (для подгрузки значения в фильтре). */
    public var selectedAttributeId: Int?
    /** Название атрибута. */
    public var nameSearch: String?
    /** Логическое имя. */
    public var logicalName: String?
    /** Видимость атрибута. */
    public var isHidden: Bool?
    /** Архивные/Не архивные. */
    public var isDeleted: Bool?
    /** Тип значения. */
    public var valueType: [CommonAttributeValueType]?
    public var attributeType: UserAttributeType?

    public init(from: Int? = nil, count: Int? = nil, partnerId: Int? = nil, selectedAttributeId: Int? = nil, nameSearch: String? = nil, logicalName: String? = nil, isHidden: Bool? = nil, isDeleted: Bool? = nil, valueType: [CommonAttributeValueType]? = nil, attributeType: UserAttributeType? = nil) {
        self.from = from
        self.count = count
        self.partnerId = partnerId
        self.selectedAttributeId = selectedAttributeId
        self.nameSearch = nameSearch
        self.logicalName = logicalName
        self.isHidden = isHidden
        self.isDeleted = isDeleted
        self.valueType = valueType
        self.attributeType = attributeType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case from
        case count
        case partnerId
        case selectedAttributeId
        case nameSearch
        case logicalName
        case isHidden
        case isDeleted
        case valueType
        case attributeType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(partnerId, forKey: .partnerId)
        try container.encodeIfPresent(selectedAttributeId, forKey: .selectedAttributeId)
        try container.encodeIfPresent(nameSearch, forKey: .nameSearch)
        try container.encodeIfPresent(logicalName, forKey: .logicalName)
        try container.encodeIfPresent(isHidden, forKey: .isHidden)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(valueType, forKey: .valueType)
        try container.encodeIfPresent(attributeType, forKey: .attributeType)
    }
}

