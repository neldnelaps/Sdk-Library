//
// ConfigurationDeployViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация о деплое. */
public struct ConfigurationDeployViewModel: Codable, JSONEncodable, Hashable {

    /** Идентификатор деплоя. */
    public var id: Int?
    /** Версия пакета. */
    public var packageVersion: String?
    /** Дата. */
    public var date: Date?
    /** Дата завершения обновления. */
    public var finishDate: Date?
    /** Автор. */
    public var author: String?
    /** Успешность. */
    public var isSuccess: Bool?
    /** Внешний идентификатор. */
    public var externalId: UUID?

    public init(id: Int? = nil, packageVersion: String? = nil, date: Date? = nil, finishDate: Date? = nil, author: String? = nil, isSuccess: Bool? = nil, externalId: UUID? = nil) {
        self.id = id
        self.packageVersion = packageVersion
        self.date = date
        self.finishDate = finishDate
        self.author = author
        self.isSuccess = isSuccess
        self.externalId = externalId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case packageVersion
        case date
        case finishDate
        case author
        case isSuccess
        case externalId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(packageVersion, forKey: .packageVersion)
        try container.encodeIfPresent(date, forKey: .date)
        try container.encodeIfPresent(finishDate, forKey: .finishDate)
        try container.encodeIfPresent(author, forKey: .author)
        try container.encodeIfPresent(isSuccess, forKey: .isSuccess)
        try container.encodeIfPresent(externalId, forKey: .externalId)
    }
}

