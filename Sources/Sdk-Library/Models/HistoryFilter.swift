//
// HistoryFilter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Параметры получения списка истории. */
public struct HistoryFilter: Codable, JSONEncodable, Hashable {

    /** Начальная дата периода в формате 0000-00-00T00:00:00Z. */
    public var fromDate: Date?
    /** Конечная дата периода в формате 0000-00-00T00:00:00Z. */
    public var toDate: Date?
    /** Внутренний идентификатор карты. Возвращает историю только по этой карте. */
    public var cardId: Int?
    /** Порядковый номер начального элемента выборки. */
    public var from: Int?
    /** Количество возвращаемых элементов выборки. */
    public var count: Int?
    public var historyItemType: HistoryItemType?
    /** Номер чека. */
    public var chequeNumber: String?
    /** Типы операций. */
    public var operationTypes: [HistoryItemOperationType]?
    /** По текущему клиенту (true), по группе клиентов (false). */
    public var currentUser: Bool?

    public init(fromDate: Date? = nil, toDate: Date? = nil, cardId: Int? = nil, from: Int? = nil, count: Int? = nil, historyItemType: HistoryItemType? = nil, chequeNumber: String? = nil, operationTypes: [HistoryItemOperationType]? = nil, currentUser: Bool? = nil) {
        self.fromDate = fromDate
        self.toDate = toDate
        self.cardId = cardId
        self.from = from
        self.count = count
        self.historyItemType = historyItemType
        self.chequeNumber = chequeNumber
        self.operationTypes = operationTypes
        self.currentUser = currentUser
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fromDate
        case toDate
        case cardId
        case from
        case count
        case historyItemType
        case chequeNumber
        case operationTypes
        case currentUser
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fromDate, forKey: .fromDate)
        try container.encodeIfPresent(toDate, forKey: .toDate)
        try container.encodeIfPresent(cardId, forKey: .cardId)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(historyItemType, forKey: .historyItemType)
        try container.encodeIfPresent(chequeNumber, forKey: .chequeNumber)
        try container.encodeIfPresent(operationTypes, forKey: .operationTypes)
        try container.encodeIfPresent(currentUser, forKey: .currentUser)
    }
}

