//
// CouponViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ViewModel для купона. */
public struct CouponViewModel: Codable, JSONEncodable, Hashable {

    /** Внутренний идентификатор купона. */
    public var id: Int?
    /** Код. */
    public var code: String?
    /** QR-код. */
    public var qrContent: String?
    /** Дата создания. */
    public var createDate: Date?
    /** Дата обновления. */
    public var updateDate: Date?
    /** Дата активации. */
    public var activationDate: Date?
    /** Дата сгорания. */
    public var expiryDate: Date?
    public var couponState: CouponState?
    /** Название выпуска купонов. */
    public var emissionTitle: String?
    /** Внутренний идентификатор выпуска купонов. */
    public var emissionId: Int?
    /** Внешний идентификатор выпуска купонов. */
    public var emissionUid: UUID?
    /** Краткое описание. */
    public var shortDescription: String?
    /** Описание. */
    public var description: String?
    public var imageFile: FileViewModel?

    public init(id: Int? = nil, code: String? = nil, qrContent: String? = nil, createDate: Date? = nil, updateDate: Date? = nil, activationDate: Date? = nil, expiryDate: Date? = nil, couponState: CouponState? = nil, emissionTitle: String? = nil, emissionId: Int? = nil, emissionUid: UUID? = nil, shortDescription: String? = nil, description: String? = nil, imageFile: FileViewModel? = nil) {
        self.id = id
        self.code = code
        self.qrContent = qrContent
        self.createDate = createDate
        self.updateDate = updateDate
        self.activationDate = activationDate
        self.expiryDate = expiryDate
        self.couponState = couponState
        self.emissionTitle = emissionTitle
        self.emissionId = emissionId
        self.emissionUid = emissionUid
        self.shortDescription = shortDescription
        self.description = description
        self.imageFile = imageFile
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case code
        case qrContent
        case createDate
        case updateDate
        case activationDate
        case expiryDate
        case couponState
        case emissionTitle
        case emissionId
        case emissionUid
        case shortDescription
        case description
        case imageFile
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(qrContent, forKey: .qrContent)
        try container.encodeIfPresent(createDate, forKey: .createDate)
        try container.encodeIfPresent(updateDate, forKey: .updateDate)
        try container.encodeIfPresent(activationDate, forKey: .activationDate)
        try container.encodeIfPresent(expiryDate, forKey: .expiryDate)
        try container.encodeIfPresent(couponState, forKey: .couponState)
        try container.encodeIfPresent(emissionTitle, forKey: .emissionTitle)
        try container.encodeIfPresent(emissionId, forKey: .emissionId)
        try container.encodeIfPresent(emissionUid, forKey: .emissionUid)
        try container.encodeIfPresent(shortDescription, forKey: .shortDescription)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(imageFile, forKey: .imageFile)
    }
}

