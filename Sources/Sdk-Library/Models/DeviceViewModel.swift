//
// DeviceViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель кассы. */
public struct DeviceViewModel: Codable, JSONEncodable, Hashable {

    /** Id девайса. */
    public var id: Int?
    /** Код. */
    public var code: String?
    /** Uid. */
    public var uid: UUID?
    /** Код. */
    public var logicalId: String?
    /** Название устройства. */
    public var name: String?
    /** Признак состояния кассы (true — архивный, false — неархивный). */
    public var isDeleted: Bool?
    /** Внутренний идентификатор Партнера. */
    public var partnerId: Int?
    /** Внутренний идентификатор магазина. */
    public var merchantId: Int?
    public var merchant: MerchantInfoShortViewModel?
    public var legal: LegalViewModel?
    public var type: DeviceTypeViewModel?
    /** Идентификатор группы счетов. */
    public var accountGroupId: Int?
    public var operationAuthType: DeviceOperationAuthType?
    public var refundType: RefundType?
    /** Оплата на единицу позиции (true — да, false — нет). */
    public var isPerUnit: Bool?
    public var urlAuth: UrlAuthViewModel?
    public var currency: CurrencyViewModel?
    /** Сертификат с публичным ключом кассы. */
    public var certificate: String?
    public var requestAuthType: RequestAuthType?

    public init(id: Int? = nil, code: String? = nil, uid: UUID? = nil, logicalId: String? = nil, name: String? = nil, isDeleted: Bool? = nil, partnerId: Int? = nil, merchantId: Int? = nil, merchant: MerchantInfoShortViewModel? = nil, legal: LegalViewModel? = nil, type: DeviceTypeViewModel? = nil, accountGroupId: Int? = nil, operationAuthType: DeviceOperationAuthType? = nil, refundType: RefundType? = nil, isPerUnit: Bool? = nil, urlAuth: UrlAuthViewModel? = nil, currency: CurrencyViewModel? = nil, certificate: String? = nil, requestAuthType: RequestAuthType? = nil) {
        self.id = id
        self.code = code
        self.uid = uid
        self.logicalId = logicalId
        self.name = name
        self.isDeleted = isDeleted
        self.partnerId = partnerId
        self.merchantId = merchantId
        self.merchant = merchant
        self.legal = legal
        self.type = type
        self.accountGroupId = accountGroupId
        self.operationAuthType = operationAuthType
        self.refundType = refundType
        self.isPerUnit = isPerUnit
        self.urlAuth = urlAuth
        self.currency = currency
        self.certificate = certificate
        self.requestAuthType = requestAuthType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case code
        case uid
        case logicalId
        case name
        case isDeleted
        case partnerId
        case merchantId
        case merchant
        case legal
        case type
        case accountGroupId
        case operationAuthType
        case refundType
        case isPerUnit
        case urlAuth
        case currency
        case certificate
        case requestAuthType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(uid, forKey: .uid)
        try container.encodeIfPresent(logicalId, forKey: .logicalId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(partnerId, forKey: .partnerId)
        try container.encodeIfPresent(merchantId, forKey: .merchantId)
        try container.encodeIfPresent(merchant, forKey: .merchant)
        try container.encodeIfPresent(legal, forKey: .legal)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(accountGroupId, forKey: .accountGroupId)
        try container.encodeIfPresent(operationAuthType, forKey: .operationAuthType)
        try container.encodeIfPresent(refundType, forKey: .refundType)
        try container.encodeIfPresent(isPerUnit, forKey: .isPerUnit)
        try container.encodeIfPresent(urlAuth, forKey: .urlAuth)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(certificate, forKey: .certificate)
        try container.encodeIfPresent(requestAuthType, forKey: .requestAuthType)
    }
}

