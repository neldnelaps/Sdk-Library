//
// BookletEmissionViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** View модель выпуска буклетов. */
public struct BookletEmissionViewModel: Codable, JSONEncodable, Hashable {

    /** Id. */
    public var id: Int?
    /** Номер. */
    public var number: Int?
    /** Описание. */
    public var description: String?
    /** Количество. */
    public var count: Int?
    /** Префикс. */
    public var _prefix: Int?
    public var state: BookletEmissionState?
    /** Id шаблона. */
    public var templateId: Int?
    /** Текст шаблона. */
    public var templateText: String?
    /** Идентификатор программы лояльности. */
    public var loyaltyProgramId: Int?

    public init(id: Int? = nil, number: Int? = nil, description: String? = nil, count: Int? = nil, _prefix: Int? = nil, state: BookletEmissionState? = nil, templateId: Int? = nil, templateText: String? = nil, loyaltyProgramId: Int? = nil) {
        self.id = id
        self.number = number
        self.description = description
        self.count = count
        self._prefix = _prefix
        self.state = state
        self.templateId = templateId
        self.templateText = templateText
        self.loyaltyProgramId = loyaltyProgramId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case number
        case description
        case count
        case _prefix = "prefix"
        case state
        case templateId
        case templateText
        case loyaltyProgramId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(_prefix, forKey: ._prefix)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(templateId, forKey: .templateId)
        try container.encodeIfPresent(templateText, forKey: .templateText)
        try container.encodeIfPresent(loyaltyProgramId, forKey: .loyaltyProgramId)
    }
}

