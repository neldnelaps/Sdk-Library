//
// MerchantLineViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ViewModel с информацией о магазине. */
public struct MerchantLineViewModel: Codable, JSONEncodable, Hashable {

    /** Id. */
    public var id: Int?
    /** Название. */
    public var name: String?
    /** Внутреннее название. */
    public var internalName: String?
    /** Uid. */
    public var uid: UUID?
    /** Код. */
    public var code: String?
    /** Id бренда. */
    public var brandId: Int?
    /** Id партнера. */
    public var partnerId: Int?
    /** Название бренда. */
    public var brandName: String?
    public var location: LocationDataModel?
    /** Признак архивности. */
    public var isDeleted: Bool?
    /** Url адрес. */
    public var url: String?
    /** Order. */
    public var order: Int?
    /** Описание. */
    public var description: String?
    /** Расписание. */
    public var schedule: String?
    /** Контакты. */
    public var contacts: String?
    /** Изображение. */
    public var image: String?

    public init(id: Int? = nil, name: String? = nil, internalName: String? = nil, uid: UUID? = nil, code: String? = nil, brandId: Int? = nil, partnerId: Int? = nil, brandName: String? = nil, location: LocationDataModel? = nil, isDeleted: Bool? = nil, url: String? = nil, order: Int? = nil, description: String? = nil, schedule: String? = nil, contacts: String? = nil, image: String? = nil) {
        self.id = id
        self.name = name
        self.internalName = internalName
        self.uid = uid
        self.code = code
        self.brandId = brandId
        self.partnerId = partnerId
        self.brandName = brandName
        self.location = location
        self.isDeleted = isDeleted
        self.url = url
        self.order = order
        self.description = description
        self.schedule = schedule
        self.contacts = contacts
        self.image = image
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case internalName
        case uid
        case code
        case brandId
        case partnerId
        case brandName
        case location
        case isDeleted
        case url
        case order
        case description
        case schedule
        case contacts
        case image
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(internalName, forKey: .internalName)
        try container.encodeIfPresent(uid, forKey: .uid)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(brandId, forKey: .brandId)
        try container.encodeIfPresent(partnerId, forKey: .partnerId)
        try container.encodeIfPresent(brandName, forKey: .brandName)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(schedule, forKey: .schedule)
        try container.encodeIfPresent(contacts, forKey: .contacts)
        try container.encodeIfPresent(image, forKey: .image)
    }
}

