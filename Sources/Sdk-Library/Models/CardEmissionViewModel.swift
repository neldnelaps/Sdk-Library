//
// CardEmissionViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** View модель выпуска карт. */
public struct CardEmissionViewModel: Codable, JSONEncodable, Hashable {

    /** Id. */
    public var id: Int?
    /** Номер. */
    public var number: Int?
    /** Описание. */
    public var description: String?
    /** Количество. */
    public var count: Int?
    /** Префикс. */
    public var _prefix: Int?
    public var state: CardEmissionStateModel?
    /** Id шаблона. */
    public var templateSetId: Int?
    /** Текст набора шаблонов. */
    public var templateSetText: String?
    public var cardType: CardType?
    /** Id категории карт. */
    public var cardCategoryId: Int?
    /** Упаковка. */
    public var packingAllowed: Bool?
    public var packingState: CardEmissionPackingState?
    /** Активация без пароля. */
    public var passwordRequired: Bool?
    public var queueInfo: CardsPackingQueueInfo?
    public var loyaltyProgram: PartnerLoyaltyProgramModel?
    /** Дата создания. */
    public var creationDate: Date?
    /** Необходимость CVC кода. */
    public var cvcCodeRequired: Bool?
    /** Длина CVC кода. */
    public var cvcCodeLength: Int?
    public var cardState: CardState?
    public var cardsFileViewModel: FileViewModel?
    public var cardEmissionType: CardEmissionType?
    /** Запускать фасовку автоматически. */
    public var startPacking: Bool?

    public init(id: Int? = nil, number: Int? = nil, description: String? = nil, count: Int? = nil, _prefix: Int? = nil, state: CardEmissionStateModel? = nil, templateSetId: Int? = nil, templateSetText: String? = nil, cardType: CardType? = nil, cardCategoryId: Int? = nil, packingAllowed: Bool? = nil, packingState: CardEmissionPackingState? = nil, passwordRequired: Bool? = nil, queueInfo: CardsPackingQueueInfo? = nil, loyaltyProgram: PartnerLoyaltyProgramModel? = nil, creationDate: Date? = nil, cvcCodeRequired: Bool? = nil, cvcCodeLength: Int? = nil, cardState: CardState? = nil, cardsFileViewModel: FileViewModel? = nil, cardEmissionType: CardEmissionType? = nil, startPacking: Bool? = nil) {
        self.id = id
        self.number = number
        self.description = description
        self.count = count
        self._prefix = _prefix
        self.state = state
        self.templateSetId = templateSetId
        self.templateSetText = templateSetText
        self.cardType = cardType
        self.cardCategoryId = cardCategoryId
        self.packingAllowed = packingAllowed
        self.packingState = packingState
        self.passwordRequired = passwordRequired
        self.queueInfo = queueInfo
        self.loyaltyProgram = loyaltyProgram
        self.creationDate = creationDate
        self.cvcCodeRequired = cvcCodeRequired
        self.cvcCodeLength = cvcCodeLength
        self.cardState = cardState
        self.cardsFileViewModel = cardsFileViewModel
        self.cardEmissionType = cardEmissionType
        self.startPacking = startPacking
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case number
        case description
        case count
        case _prefix = "prefix"
        case state
        case templateSetId
        case templateSetText
        case cardType
        case cardCategoryId
        case packingAllowed
        case packingState
        case passwordRequired
        case queueInfo
        case loyaltyProgram
        case creationDate
        case cvcCodeRequired
        case cvcCodeLength
        case cardState
        case cardsFileViewModel
        case cardEmissionType
        case startPacking
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(_prefix, forKey: ._prefix)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(templateSetId, forKey: .templateSetId)
        try container.encodeIfPresent(templateSetText, forKey: .templateSetText)
        try container.encodeIfPresent(cardType, forKey: .cardType)
        try container.encodeIfPresent(cardCategoryId, forKey: .cardCategoryId)
        try container.encodeIfPresent(packingAllowed, forKey: .packingAllowed)
        try container.encodeIfPresent(packingState, forKey: .packingState)
        try container.encodeIfPresent(passwordRequired, forKey: .passwordRequired)
        try container.encodeIfPresent(queueInfo, forKey: .queueInfo)
        try container.encodeIfPresent(loyaltyProgram, forKey: .loyaltyProgram)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(cvcCodeRequired, forKey: .cvcCodeRequired)
        try container.encodeIfPresent(cvcCodeLength, forKey: .cvcCodeLength)
        try container.encodeIfPresent(cardState, forKey: .cardState)
        try container.encodeIfPresent(cardsFileViewModel, forKey: .cardsFileViewModel)
        try container.encodeIfPresent(cardEmissionType, forKey: .cardEmissionType)
        try container.encodeIfPresent(startPacking, forKey: .startPacking)
    }
}

