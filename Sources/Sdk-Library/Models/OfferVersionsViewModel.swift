//
// OfferVersionsViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель для версий акции. */
public struct OfferVersionsViewModel: Codable, JSONEncodable, Hashable {

    /** ID версии акции. */
    public var id: Int?
    /** Название версии акции. */
    public var name: String?
    /** Время начала версии акции. */
    public var beginTime: Date?
    /** Дата окончания действия версии акции. Если это пустое значение, то версия акция действует бесконечно долго, начиная с BeginTime. */
    public var endTime: Date?
    /** Дата создания версии акции. */
    public var creationDate: Date?
    /** Дата последних изменений версии акции. */
    public var lastChangeDate: Date?
    /** Пользователь, который последним изменял версию акции. */
    public var lastChangeUser: String?
    /** Описание версии акции. */
    public var description: String?
    /** Является ли версия акции суммируемой. */
    public var isSum: Bool?
    /** Приоритет версии акции. */
    public var priority: Int?
    /** Является ли черновиком. */
    public var isDraft: Bool?
    /** Является ли акция базовой (по умолчанию). */
    public var isDefault: Bool?
    public var draftState: OfferDraftState?
    public var viewState: OfferViewState?
    /** Причина отклонения версии как черновика акции. */
    public var draftRejectReason: String?
    /** Остановлена ли версия. */
    public var isStopped: Bool?

    public init(id: Int? = nil, name: String? = nil, beginTime: Date? = nil, endTime: Date? = nil, creationDate: Date? = nil, lastChangeDate: Date? = nil, lastChangeUser: String? = nil, description: String? = nil, isSum: Bool? = nil, priority: Int? = nil, isDraft: Bool? = nil, isDefault: Bool? = nil, draftState: OfferDraftState? = nil, viewState: OfferViewState? = nil, draftRejectReason: String? = nil, isStopped: Bool? = nil) {
        self.id = id
        self.name = name
        self.beginTime = beginTime
        self.endTime = endTime
        self.creationDate = creationDate
        self.lastChangeDate = lastChangeDate
        self.lastChangeUser = lastChangeUser
        self.description = description
        self.isSum = isSum
        self.priority = priority
        self.isDraft = isDraft
        self.isDefault = isDefault
        self.draftState = draftState
        self.viewState = viewState
        self.draftRejectReason = draftRejectReason
        self.isStopped = isStopped
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case beginTime
        case endTime
        case creationDate
        case lastChangeDate
        case lastChangeUser
        case description
        case isSum
        case priority
        case isDraft
        case isDefault
        case draftState
        case viewState
        case draftRejectReason
        case isStopped
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(beginTime, forKey: .beginTime)
        try container.encodeIfPresent(endTime, forKey: .endTime)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(lastChangeDate, forKey: .lastChangeDate)
        try container.encodeIfPresent(lastChangeUser, forKey: .lastChangeUser)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(isSum, forKey: .isSum)
        try container.encodeIfPresent(priority, forKey: .priority)
        try container.encodeIfPresent(isDraft, forKey: .isDraft)
        try container.encodeIfPresent(isDefault, forKey: .isDefault)
        try container.encodeIfPresent(draftState, forKey: .draftState)
        try container.encodeIfPresent(viewState, forKey: .viewState)
        try container.encodeIfPresent(draftRejectReason, forKey: .draftRejectReason)
        try container.encodeIfPresent(isStopped, forKey: .isStopped)
    }
}

