//
// OAuthSettingsViewModelEx.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Вью модель настроек соц.сетей. */
public struct OAuthSettingsViewModelEx: Codable, JSONEncodable, Hashable {

    public var providerType: OAuthProviderType?
    /** Идентификатор приложения. */
    public var clientId: String?
    /** Секрет клиента. */
    public var clientSecret: String?
    /** Наименование провайдера. */
    public var text: String?
    /** Токен. */
    public var token: String?
    public var _protocol: OAuthProtocolType?
    /** Запрашиваемое окружение. */
    public var scope: String?
    public var authorizeUri: ClientUri?
    public var accessTokenUri: ClientUri?
    public var apiSettings: ClientApiSettings?

    public init(providerType: OAuthProviderType? = nil, clientId: String? = nil, clientSecret: String? = nil, text: String? = nil, token: String? = nil, _protocol: OAuthProtocolType? = nil, scope: String? = nil, authorizeUri: ClientUri? = nil, accessTokenUri: ClientUri? = nil, apiSettings: ClientApiSettings? = nil) {
        self.providerType = providerType
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.text = text
        self.token = token
        self._protocol = _protocol
        self.scope = scope
        self.authorizeUri = authorizeUri
        self.accessTokenUri = accessTokenUri
        self.apiSettings = apiSettings
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case providerType
        case clientId
        case clientSecret
        case text
        case token
        case _protocol = "protocol"
        case scope
        case authorizeUri
        case accessTokenUri
        case apiSettings
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(providerType, forKey: .providerType)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(clientSecret, forKey: .clientSecret)
        try container.encodeIfPresent(text, forKey: .text)
        try container.encodeIfPresent(token, forKey: .token)
        try container.encodeIfPresent(_protocol, forKey: ._protocol)
        try container.encodeIfPresent(scope, forKey: .scope)
        try container.encodeIfPresent(authorizeUri, forKey: .authorizeUri)
        try container.encodeIfPresent(accessTokenUri, forKey: .accessTokenUri)
        try container.encodeIfPresent(apiSettings, forKey: .apiSettings)
    }
}

