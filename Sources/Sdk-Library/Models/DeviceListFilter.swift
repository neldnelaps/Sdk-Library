//
// DeviceListFilter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель списка касс. */
public struct DeviceListFilter: Codable, JSONEncodable, Hashable {

    /** Порядковый номер начального элемента выборки. */
    public var from: Int?
    /** Количество возвращаемых элементов выборки. */
    public var count: Int?
    /** Список внутренних идентификаторов магазинов. */
    public var merchantIds: [Int]?
    /** Внутренний идентификатор юридического лица. */
    public var legalId: Int?
    /** Код. */
    public var code: String?
    public var mode: ArchivedState?
    /** Режим прямой сортировки (true — да, false — нет). */
    public var isOrderedByAscending: Bool?

    public init(from: Int? = nil, count: Int? = nil, merchantIds: [Int]? = nil, legalId: Int? = nil, code: String? = nil, mode: ArchivedState? = nil, isOrderedByAscending: Bool? = nil) {
        self.from = from
        self.count = count
        self.merchantIds = merchantIds
        self.legalId = legalId
        self.code = code
        self.mode = mode
        self.isOrderedByAscending = isOrderedByAscending
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case from
        case count
        case merchantIds
        case legalId
        case code
        case mode
        case isOrderedByAscending
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(merchantIds, forKey: .merchantIds)
        try container.encodeIfPresent(legalId, forKey: .legalId)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(mode, forKey: .mode)
        try container.encodeIfPresent(isOrderedByAscending, forKey: .isOrderedByAscending)
    }
}

