//
// OfferInfoModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель с информацией об акции. */
public struct OfferInfoModel: Codable, JSONEncodable, Hashable {

    /** Название. */
    public var name: String?
    /** Дата начала. */
    public var beginTime: Date?
    /** Описание. */
    public var description: String?
    /** Суммируемая. */
    public var isSum: Bool?
    /** Приоритет. */
    public var priority: Int?
    public var partner: PartnerModel?
    /** Дата создания. */
    public var creationDate: Date?
    /** Дата последнего изменения. */
    public var lastChangeDate: Date?
    /** Создатель. */
    public var creator: String?
    /** Автор последних изменений. */
    public var lastChangeUser: String?
    /** Внешний ID. */
    public var externalID: String?
    /** Дата подтверждения. */
    public var applyChangesDate: Date?
    /** Дата завершения. */
    public var expirationDate: Date?
    public var state: OfferState?
    public var offerCategory: OfferCategoryViewModel?
    public var marketingCampaign: MarketingCampaignViewModel?
    public var loyaltyProgram: LoyaltyProgramInfoViewModel?

    public init(name: String? = nil, beginTime: Date? = nil, description: String? = nil, isSum: Bool? = nil, priority: Int? = nil, partner: PartnerModel? = nil, creationDate: Date? = nil, lastChangeDate: Date? = nil, creator: String? = nil, lastChangeUser: String? = nil, externalID: String? = nil, applyChangesDate: Date? = nil, expirationDate: Date? = nil, state: OfferState? = nil, offerCategory: OfferCategoryViewModel? = nil, marketingCampaign: MarketingCampaignViewModel? = nil, loyaltyProgram: LoyaltyProgramInfoViewModel? = nil) {
        self.name = name
        self.beginTime = beginTime
        self.description = description
        self.isSum = isSum
        self.priority = priority
        self.partner = partner
        self.creationDate = creationDate
        self.lastChangeDate = lastChangeDate
        self.creator = creator
        self.lastChangeUser = lastChangeUser
        self.externalID = externalID
        self.applyChangesDate = applyChangesDate
        self.expirationDate = expirationDate
        self.state = state
        self.offerCategory = offerCategory
        self.marketingCampaign = marketingCampaign
        self.loyaltyProgram = loyaltyProgram
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case beginTime
        case description
        case isSum
        case priority
        case partner
        case creationDate
        case lastChangeDate
        case creator
        case lastChangeUser
        case externalID
        case applyChangesDate
        case expirationDate
        case state
        case offerCategory
        case marketingCampaign
        case loyaltyProgram
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(beginTime, forKey: .beginTime)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(isSum, forKey: .isSum)
        try container.encodeIfPresent(priority, forKey: .priority)
        try container.encodeIfPresent(partner, forKey: .partner)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(lastChangeDate, forKey: .lastChangeDate)
        try container.encodeIfPresent(creator, forKey: .creator)
        try container.encodeIfPresent(lastChangeUser, forKey: .lastChangeUser)
        try container.encodeIfPresent(externalID, forKey: .externalID)
        try container.encodeIfPresent(applyChangesDate, forKey: .applyChangesDate)
        try container.encodeIfPresent(expirationDate, forKey: .expirationDate)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(offerCategory, forKey: .offerCategory)
        try container.encodeIfPresent(marketingCampaign, forKey: .marketingCampaign)
        try container.encodeIfPresent(loyaltyProgram, forKey: .loyaltyProgram)
    }
}

