//
// MailingTaskStatisticViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Статистика выполнения задачи рассылки. */
public struct MailingTaskStatisticViewModel: Codable, JSONEncodable, Hashable {

    /** Количество клиентов всего. */
    public var personsCount: Int?
    /** Количество сформированных оповещений. */
    public var processedNotificationsCount: Int?
    /** Количество сформированных sms. */
    public var processedSmsCount: Int?
    /** Количество сформированных сообщений. */
    public var processedMessagesCount: Int?
    /** Количество отправленных сообщений. */
    public var sentMessagesCount: Int?
    /** Количество сообщений, которые находятся на обработке внешним шлюзом. */
    public var deliveryInProcessMessagesCount: Int?
    /** Количество успешно доставленных сообщений. */
    public var deliveredOkMessagesCount: Int?
    /** Количество сообщений, доставка которых не удалась. */
    public var deliveredFailedMessagesCount: Int?
    /** Количество сообщений, которые прочитаны. */
    public var deliveredReadMessagesCount: Int?
    /** Количество сообщений, у которых неизвестен статус доставки. */
    public var deliveredUnknownMessagesCount: Int?
    /** Фактическая стоимость рассылки. */
    public var sentMessagesAmount: Double?

    public init(personsCount: Int? = nil, processedNotificationsCount: Int? = nil, processedSmsCount: Int? = nil, processedMessagesCount: Int? = nil, sentMessagesCount: Int? = nil, deliveryInProcessMessagesCount: Int? = nil, deliveredOkMessagesCount: Int? = nil, deliveredFailedMessagesCount: Int? = nil, deliveredReadMessagesCount: Int? = nil, deliveredUnknownMessagesCount: Int? = nil, sentMessagesAmount: Double? = nil) {
        self.personsCount = personsCount
        self.processedNotificationsCount = processedNotificationsCount
        self.processedSmsCount = processedSmsCount
        self.processedMessagesCount = processedMessagesCount
        self.sentMessagesCount = sentMessagesCount
        self.deliveryInProcessMessagesCount = deliveryInProcessMessagesCount
        self.deliveredOkMessagesCount = deliveredOkMessagesCount
        self.deliveredFailedMessagesCount = deliveredFailedMessagesCount
        self.deliveredReadMessagesCount = deliveredReadMessagesCount
        self.deliveredUnknownMessagesCount = deliveredUnknownMessagesCount
        self.sentMessagesAmount = sentMessagesAmount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case personsCount
        case processedNotificationsCount
        case processedSmsCount
        case processedMessagesCount
        case sentMessagesCount
        case deliveryInProcessMessagesCount
        case deliveredOkMessagesCount
        case deliveredFailedMessagesCount
        case deliveredReadMessagesCount
        case deliveredUnknownMessagesCount
        case sentMessagesAmount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(personsCount, forKey: .personsCount)
        try container.encodeIfPresent(processedNotificationsCount, forKey: .processedNotificationsCount)
        try container.encodeIfPresent(processedSmsCount, forKey: .processedSmsCount)
        try container.encodeIfPresent(processedMessagesCount, forKey: .processedMessagesCount)
        try container.encodeIfPresent(sentMessagesCount, forKey: .sentMessagesCount)
        try container.encodeIfPresent(deliveryInProcessMessagesCount, forKey: .deliveryInProcessMessagesCount)
        try container.encodeIfPresent(deliveredOkMessagesCount, forKey: .deliveredOkMessagesCount)
        try container.encodeIfPresent(deliveredFailedMessagesCount, forKey: .deliveredFailedMessagesCount)
        try container.encodeIfPresent(deliveredReadMessagesCount, forKey: .deliveredReadMessagesCount)
        try container.encodeIfPresent(deliveredUnknownMessagesCount, forKey: .deliveredUnknownMessagesCount)
        try container.encodeIfPresent(sentMessagesAmount, forKey: .sentMessagesAmount)
    }
}

