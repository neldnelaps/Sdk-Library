//
// UserAttributeViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ViewModel для атрибута пользователя. */
public struct UserAttributeViewModel: Codable, JSONEncodable, Hashable {

    /** Идентификатор. */
    public var id: Int?
    /** Имя. */
    public var name: String?
    /** Порядковый номер. */
    public var order: Int?
    /** Логическое имя. */
    public var logicalName: String?
    /** История записывается. */
    public var historyIsRecorded: Bool?
    public var type: CommonAttributeValueType?
    /** Параметры атрибута. */
    public var params: String?
    /** Описание. */
    public var description: String?
    public var mergeMode: AttributesMergeMode?
    /** Обязательность атрибута. */
    public var _required: Bool?
    /** Удален ли атрибут. */
    public var isDeleted: Bool?
    /** Видимость. */
    public var isHidden: Bool?
    /** Динамический ли атрибут. */
    public var isDynamic: Bool?
    /** Доступные значения  (для типа {!:RadioString}). */
    public var items: [Item]?
    /** Имеет ли атрибут множественные значения. */
    public var hasMultipleValues: Bool?
    /** Использовать шаблонизатор. */
    public var useTemplateEngine: Bool?

    public init(id: Int? = nil, name: String? = nil, order: Int? = nil, logicalName: String? = nil, historyIsRecorded: Bool? = nil, type: CommonAttributeValueType? = nil, params: String? = nil, description: String? = nil, mergeMode: AttributesMergeMode? = nil, _required: Bool? = nil, isDeleted: Bool? = nil, isHidden: Bool? = nil, isDynamic: Bool? = nil, items: [Item]? = nil, hasMultipleValues: Bool? = nil, useTemplateEngine: Bool? = nil) {
        self.id = id
        self.name = name
        self.order = order
        self.logicalName = logicalName
        self.historyIsRecorded = historyIsRecorded
        self.type = type
        self.params = params
        self.description = description
        self.mergeMode = mergeMode
        self._required = _required
        self.isDeleted = isDeleted
        self.isHidden = isHidden
        self.isDynamic = isDynamic
        self.items = items
        self.hasMultipleValues = hasMultipleValues
        self.useTemplateEngine = useTemplateEngine
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case order
        case logicalName
        case historyIsRecorded
        case type
        case params
        case description
        case mergeMode
        case _required = "required"
        case isDeleted
        case isHidden
        case isDynamic
        case items
        case hasMultipleValues
        case useTemplateEngine
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(logicalName, forKey: .logicalName)
        try container.encodeIfPresent(historyIsRecorded, forKey: .historyIsRecorded)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(params, forKey: .params)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(mergeMode, forKey: .mergeMode)
        try container.encodeIfPresent(_required, forKey: ._required)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(isHidden, forKey: .isHidden)
        try container.encodeIfPresent(isDynamic, forKey: .isDynamic)
        try container.encodeIfPresent(items, forKey: .items)
        try container.encodeIfPresent(hasMultipleValues, forKey: .hasMultipleValues)
        try container.encodeIfPresent(useTemplateEngine, forKey: .useTemplateEngine)
    }
}

