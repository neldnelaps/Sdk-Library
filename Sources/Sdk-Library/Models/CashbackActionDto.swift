//
// CashbackActionDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Действие акции \&quot;Бонусы\&quot;. */
public struct CashbackActionDto: Codable, JSONEncodable, Hashable {

    /** Порядковый номер действия в цепочке. */
    public var order: Int?
    /** Id действия в цепочке. */
    public var id: String?
    /** Значение. */
    public var value: String?
    /** Дополнительное значение. */
    public var value2: String?
    /** Ещё дополнительное значение. */
    public var value3: String?
    /** Процент. Значение от 0 до 1. */
    public var percent: Double?
    /** Сумма скидки на единицу товара. */
    public var amountPerUnit: Double?
    /** Сумма скидки на sku. */
    public var amountPerUniqueSku: Double?
    /** Цена за единицу товара. */
    public var pricePerUnit: Double?
    /** Фиксированная сумма скидки. */
    public var amount: Double?
    /** Сумма, за каждое достижение в чеке которой начисляется фиксированная скидка/бонус{Loymax.ImportExport.Dto.Offers.Actions.AmountActionDto.AmountPerMeasure}. */
    public var amountMeasure: Double?
    /** Сумма фиксированной скидки/бонуса, которая начисляется за каждое достижение в чеке суммы{Loymax.ImportExport.Dto.Offers.Actions.AmountActionDto.AmountMeasure}. */
    public var amountPerMeasure: Double?
    /** Масса, за каждое достижение в чеке которой начисляется фиксированная скидка/бонус{Loymax.ImportExport.Dto.Offers.Actions.AmountActionDto.AmountPerWeight}. */
    public var amountWeight: Double?
    /** Сумма фиксированной скидки/бонуса, которая начисляется за каждое достижение в чеке массы{Loymax.ImportExport.Dto.Offers.Actions.AmountActionDto.AmountWeight}. */
    public var amountPerWeight: Double?
    /** Фиксированная цена всех товаров. */
    public var price: Double?
    public var attributeDiscount: AttributeDiscountDto?
    /** Распределить на все. */
    public var distributeToAll: Bool?
    /** Тип скидки. */
    public var discountType: String?
    /** Типы скидок, которые исключаются при расчете. */
    public var calculationExclusionDiscountTypes: [CalculationExclusionDiscountType]?
    /** Время жизни. */
    public var lifeTimeDefinitionId: Int?
    /** Uid валюты. */
    public var currencyUid: String?
    /** Для совместимости, использовать CurrencyUid: Uid валюты. */
    public var currencyExternalId: String?

    public init(order: Int? = nil, id: String? = nil, value: String? = nil, value2: String? = nil, value3: String? = nil, percent: Double? = nil, amountPerUnit: Double? = nil, amountPerUniqueSku: Double? = nil, pricePerUnit: Double? = nil, amount: Double? = nil, amountMeasure: Double? = nil, amountPerMeasure: Double? = nil, amountWeight: Double? = nil, amountPerWeight: Double? = nil, price: Double? = nil, attributeDiscount: AttributeDiscountDto? = nil, distributeToAll: Bool? = nil, discountType: String? = nil, calculationExclusionDiscountTypes: [CalculationExclusionDiscountType]? = nil, lifeTimeDefinitionId: Int? = nil, currencyUid: String? = nil, currencyExternalId: String? = nil) {
        self.order = order
        self.id = id
        self.value = value
        self.value2 = value2
        self.value3 = value3
        self.percent = percent
        self.amountPerUnit = amountPerUnit
        self.amountPerUniqueSku = amountPerUniqueSku
        self.pricePerUnit = pricePerUnit
        self.amount = amount
        self.amountMeasure = amountMeasure
        self.amountPerMeasure = amountPerMeasure
        self.amountWeight = amountWeight
        self.amountPerWeight = amountPerWeight
        self.price = price
        self.attributeDiscount = attributeDiscount
        self.distributeToAll = distributeToAll
        self.discountType = discountType
        self.calculationExclusionDiscountTypes = calculationExclusionDiscountTypes
        self.lifeTimeDefinitionId = lifeTimeDefinitionId
        self.currencyUid = currencyUid
        self.currencyExternalId = currencyExternalId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case order
        case id
        case value
        case value2
        case value3
        case percent
        case amountPerUnit
        case amountPerUniqueSku
        case pricePerUnit
        case amount
        case amountMeasure
        case amountPerMeasure
        case amountWeight
        case amountPerWeight
        case price
        case attributeDiscount
        case distributeToAll
        case discountType
        case calculationExclusionDiscountTypes
        case lifeTimeDefinitionId
        case currencyUid
        case currencyExternalId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(value2, forKey: .value2)
        try container.encodeIfPresent(value3, forKey: .value3)
        try container.encodeIfPresent(percent, forKey: .percent)
        try container.encodeIfPresent(amountPerUnit, forKey: .amountPerUnit)
        try container.encodeIfPresent(amountPerUniqueSku, forKey: .amountPerUniqueSku)
        try container.encodeIfPresent(pricePerUnit, forKey: .pricePerUnit)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(amountMeasure, forKey: .amountMeasure)
        try container.encodeIfPresent(amountPerMeasure, forKey: .amountPerMeasure)
        try container.encodeIfPresent(amountWeight, forKey: .amountWeight)
        try container.encodeIfPresent(amountPerWeight, forKey: .amountPerWeight)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(attributeDiscount, forKey: .attributeDiscount)
        try container.encodeIfPresent(distributeToAll, forKey: .distributeToAll)
        try container.encodeIfPresent(discountType, forKey: .discountType)
        try container.encodeIfPresent(calculationExclusionDiscountTypes, forKey: .calculationExclusionDiscountTypes)
        try container.encodeIfPresent(lifeTimeDefinitionId, forKey: .lifeTimeDefinitionId)
        try container.encodeIfPresent(currencyUid, forKey: .currencyUid)
        try container.encodeIfPresent(currencyExternalId, forKey: .currencyExternalId)
    }
}

