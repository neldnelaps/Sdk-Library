//
// DeviceEmulationPositionViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель позиции. */
public struct DeviceEmulationPositionViewModel: Codable, JSONEncodable, Hashable {

    /** Идентификатор. */
    public var id: Int?
    /** Название каталога товаров. */
    public var catalogGoodName: String?
    /** Идентификатор каталога товаров. */
    public var catalogGoodsId: Int?
    /** ItemID товаров. */
    public var itemId: String?
    /** Цена. */
    public var price: Double?
    /** Количество. */
    public var quantity: Double?
    /** Сумма. */
    public var amount: Double?
    /** Прямая скидка. */
    public var directDiscount: Double?
    /** Партнерская скидка. */
    public var partnerDiscount: Double?
    /** Партнерский кешбек. */
    public var partnerCashback: Double?
    /** Идентификатор позиции. */
    public var positionId: Int?

    public init(id: Int? = nil, catalogGoodName: String? = nil, catalogGoodsId: Int? = nil, itemId: String? = nil, price: Double? = nil, quantity: Double? = nil, amount: Double? = nil, directDiscount: Double? = nil, partnerDiscount: Double? = nil, partnerCashback: Double? = nil, positionId: Int? = nil) {
        self.id = id
        self.catalogGoodName = catalogGoodName
        self.catalogGoodsId = catalogGoodsId
        self.itemId = itemId
        self.price = price
        self.quantity = quantity
        self.amount = amount
        self.directDiscount = directDiscount
        self.partnerDiscount = partnerDiscount
        self.partnerCashback = partnerCashback
        self.positionId = positionId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case catalogGoodName
        case catalogGoodsId
        case itemId
        case price
        case quantity
        case amount
        case directDiscount
        case partnerDiscount
        case partnerCashback
        case positionId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(catalogGoodName, forKey: .catalogGoodName)
        try container.encodeIfPresent(catalogGoodsId, forKey: .catalogGoodsId)
        try container.encodeIfPresent(itemId, forKey: .itemId)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(directDiscount, forKey: .directDiscount)
        try container.encodeIfPresent(partnerDiscount, forKey: .partnerDiscount)
        try container.encodeIfPresent(partnerCashback, forKey: .partnerCashback)
        try container.encodeIfPresent(positionId, forKey: .positionId)
    }
}

