//
// BatchOperationsViewModelAnyOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BatchOperationsViewModelAnyOf: Codable, JSONEncodable, Hashable {

    public var creator: CreatorModel?
    public var errorHandlingType: OpErrorHandlingType?
    /** Список операций. */
    public var operations: [OperationDataModel]?
    public var queueInfo: BatchOperationsQueueInfo?
    public var lifeTimeDefinition: LifeTimeDefinitionViewModel?
    public var currency: CurrencyViewModel?
    public var targetGroup: TargetGroupBriefViewModel?

    public init(creator: CreatorModel? = nil, errorHandlingType: OpErrorHandlingType? = nil, operations: [OperationDataModel]? = nil, queueInfo: BatchOperationsQueueInfo? = nil, lifeTimeDefinition: LifeTimeDefinitionViewModel? = nil, currency: CurrencyViewModel? = nil, targetGroup: TargetGroupBriefViewModel? = nil) {
        self.creator = creator
        self.errorHandlingType = errorHandlingType
        self.operations = operations
        self.queueInfo = queueInfo
        self.lifeTimeDefinition = lifeTimeDefinition
        self.currency = currency
        self.targetGroup = targetGroup
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case creator
        case errorHandlingType
        case operations
        case queueInfo
        case lifeTimeDefinition
        case currency
        case targetGroup
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(creator, forKey: .creator)
        try container.encodeIfPresent(errorHandlingType, forKey: .errorHandlingType)
        try container.encodeIfPresent(operations, forKey: .operations)
        try container.encodeIfPresent(queueInfo, forKey: .queueInfo)
        try container.encodeIfPresent(lifeTimeDefinition, forKey: .lifeTimeDefinition)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(targetGroup, forKey: .targetGroup)
    }
}

