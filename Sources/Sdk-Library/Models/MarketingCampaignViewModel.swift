//
// MarketingCampaignViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** View-модель маркетинговой кампании. */
public struct MarketingCampaignViewModel: Codable, JSONEncodable, Hashable {

    /** Id. */
    public var id: Int?
    public var loyaltyProgram: PartnerLoyaltyProgramModel?
    /** Название. */
    public var name: String?
    public var partner: PartnerViewModel?
    /** Дата начала. */
    public var beginDate: Date?
    /** Дата окончания. */
    public var endDate: Date?
    /** Значение, определяющее, находится ли кампания в архиве. */
    public var isDeleted: Bool?
    /** Значение, определяющее, установлены ли для кампании показатели. */
    public var hasMetrics: Bool?
    public var canView: CampaignPermissions?
    /** Значение, определяющее, есть ли у пользователя право редактировать кампанию. */
    public var canEdit: Bool?

    public init(id: Int? = nil, loyaltyProgram: PartnerLoyaltyProgramModel? = nil, name: String? = nil, partner: PartnerViewModel? = nil, beginDate: Date? = nil, endDate: Date? = nil, isDeleted: Bool? = nil, hasMetrics: Bool? = nil, canView: CampaignPermissions? = nil, canEdit: Bool? = nil) {
        self.id = id
        self.loyaltyProgram = loyaltyProgram
        self.name = name
        self.partner = partner
        self.beginDate = beginDate
        self.endDate = endDate
        self.isDeleted = isDeleted
        self.hasMetrics = hasMetrics
        self.canView = canView
        self.canEdit = canEdit
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case loyaltyProgram
        case name
        case partner
        case beginDate
        case endDate
        case isDeleted
        case hasMetrics
        case canView
        case canEdit
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(loyaltyProgram, forKey: .loyaltyProgram)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(partner, forKey: .partner)
        try container.encodeIfPresent(beginDate, forKey: .beginDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(hasMetrics, forKey: .hasMetrics)
        try container.encodeIfPresent(canView, forKey: .canView)
        try container.encodeIfPresent(canEdit, forKey: .canEdit)
    }
}

