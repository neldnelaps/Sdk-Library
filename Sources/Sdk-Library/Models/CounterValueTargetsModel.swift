//
// CounterValueTargetsModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель для параметров счетчика. */
public struct CounterValueTargetsModel: Codable, JSONEncodable, Hashable {

    /** Дата и время события. */
    public var eventDateTime: Date?
    /** Исходные дата и время. */
    public var sourceDateTime: Date?
    /** Пользователь системы. */
    public var personId: Int?
    /** Карта. */
    public var cardId: Int?
    /** Партнёр. */
    public var partnerId: Int?
    /** Устройство. */
    public var deviceId: Int?
    /** Магазин. */
    public var merchantId: Int?
    /** Пользователь социальной сети. */
    public var oAuthIdentifierInfo: String?
    /** Тип пользовательской активноcти. */
    public var oAuthActivityType: String?
    /** Объект социальной сети. */
    public var oAuthObjectId: String?
    /** Группа социальной сети. */
    public var oAuthGroupId: String?
    /** Счет. */
    public var accountGroup: String?
    /** Возвращенная покупка. */
    public var refundedPurchaseId: Int?
    /** Реферал. */
    public var referralId: Int?
    /** Покупка. */
    public var purchaseId: String?
    /** Юр. лицо. */
    public var legalId: Int?
    /** День события. */
    public var eventDay: Date?
    /** Месяц события. */
    public var eventMonth: Date?
    /** Год события. */
    public var eventYear: Date?

    public init(eventDateTime: Date? = nil, sourceDateTime: Date? = nil, personId: Int? = nil, cardId: Int? = nil, partnerId: Int? = nil, deviceId: Int? = nil, merchantId: Int? = nil, oAuthIdentifierInfo: String? = nil, oAuthActivityType: String? = nil, oAuthObjectId: String? = nil, oAuthGroupId: String? = nil, accountGroup: String? = nil, refundedPurchaseId: Int? = nil, referralId: Int? = nil, purchaseId: String? = nil, legalId: Int? = nil, eventDay: Date? = nil, eventMonth: Date? = nil, eventYear: Date? = nil) {
        self.eventDateTime = eventDateTime
        self.sourceDateTime = sourceDateTime
        self.personId = personId
        self.cardId = cardId
        self.partnerId = partnerId
        self.deviceId = deviceId
        self.merchantId = merchantId
        self.oAuthIdentifierInfo = oAuthIdentifierInfo
        self.oAuthActivityType = oAuthActivityType
        self.oAuthObjectId = oAuthObjectId
        self.oAuthGroupId = oAuthGroupId
        self.accountGroup = accountGroup
        self.refundedPurchaseId = refundedPurchaseId
        self.referralId = referralId
        self.purchaseId = purchaseId
        self.legalId = legalId
        self.eventDay = eventDay
        self.eventMonth = eventMonth
        self.eventYear = eventYear
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventDateTime
        case sourceDateTime
        case personId
        case cardId
        case partnerId
        case deviceId
        case merchantId
        case oAuthIdentifierInfo
        case oAuthActivityType
        case oAuthObjectId
        case oAuthGroupId
        case accountGroup
        case refundedPurchaseId
        case referralId
        case purchaseId
        case legalId
        case eventDay
        case eventMonth
        case eventYear
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(eventDateTime, forKey: .eventDateTime)
        try container.encodeIfPresent(sourceDateTime, forKey: .sourceDateTime)
        try container.encodeIfPresent(personId, forKey: .personId)
        try container.encodeIfPresent(cardId, forKey: .cardId)
        try container.encodeIfPresent(partnerId, forKey: .partnerId)
        try container.encodeIfPresent(deviceId, forKey: .deviceId)
        try container.encodeIfPresent(merchantId, forKey: .merchantId)
        try container.encodeIfPresent(oAuthIdentifierInfo, forKey: .oAuthIdentifierInfo)
        try container.encodeIfPresent(oAuthActivityType, forKey: .oAuthActivityType)
        try container.encodeIfPresent(oAuthObjectId, forKey: .oAuthObjectId)
        try container.encodeIfPresent(oAuthGroupId, forKey: .oAuthGroupId)
        try container.encodeIfPresent(accountGroup, forKey: .accountGroup)
        try container.encodeIfPresent(refundedPurchaseId, forKey: .refundedPurchaseId)
        try container.encodeIfPresent(referralId, forKey: .referralId)
        try container.encodeIfPresent(purchaseId, forKey: .purchaseId)
        try container.encodeIfPresent(legalId, forKey: .legalId)
        try container.encodeIfPresent(eventDay, forKey: .eventDay)
        try container.encodeIfPresent(eventMonth, forKey: .eventMonth)
        try container.encodeIfPresent(eventYear, forKey: .eventYear)
    }
}

