//
// PushMessageViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ViewModel push сообщения. */
public struct PushMessageViewModel: Codable, JSONEncodable, Hashable {

    /** Идентификатор. */
    public var id: Int?
    /** Содержимое. */
    public var body: String?
    /** Дата создания. */
    public var creationDate: Date?
    /** Дата изменения. */
    public var changeDate: Date?
    /** Шлюз. */
    public var gatewayId: Int?
    /** Время отправки в шлюз. */
    public var sentTime: Date?
    /** Заголовок. */
    public var header: String?
    /** Полный текст уведомления. */
    public var fullText: String?
    public var state: NotificationMessageState?
    public var platformType: PlatformType?
    public var messageType: PushMessageType?
    /** Идентификатор изображения. */
    public var imageId: UUID?

    public init(id: Int? = nil, body: String? = nil, creationDate: Date? = nil, changeDate: Date? = nil, gatewayId: Int? = nil, sentTime: Date? = nil, header: String? = nil, fullText: String? = nil, state: NotificationMessageState? = nil, platformType: PlatformType? = nil, messageType: PushMessageType? = nil, imageId: UUID? = nil) {
        self.id = id
        self.body = body
        self.creationDate = creationDate
        self.changeDate = changeDate
        self.gatewayId = gatewayId
        self.sentTime = sentTime
        self.header = header
        self.fullText = fullText
        self.state = state
        self.platformType = platformType
        self.messageType = messageType
        self.imageId = imageId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case body
        case creationDate
        case changeDate
        case gatewayId
        case sentTime
        case header
        case fullText
        case state
        case platformType
        case messageType
        case imageId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(body, forKey: .body)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(changeDate, forKey: .changeDate)
        try container.encodeIfPresent(gatewayId, forKey: .gatewayId)
        try container.encodeIfPresent(sentTime, forKey: .sentTime)
        try container.encodeIfPresent(header, forKey: .header)
        try container.encodeIfPresent(fullText, forKey: .fullText)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(platformType, forKey: .platformType)
        try container.encodeIfPresent(messageType, forKey: .messageType)
        try container.encodeIfPresent(imageId, forKey: .imageId)
    }
}

