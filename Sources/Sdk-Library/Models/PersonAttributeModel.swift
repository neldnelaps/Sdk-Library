//
// PersonAttributeModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель атрибута клиента. */
public struct PersonAttributeModel: Codable, JSONEncodable, Hashable {

    /** Идентификатор атрибута. */
    public var id: Int?
    /** Наименование атрибута. */
    public var name: String?
    public var userAttributeType: UserAttributeType?
    /** Тип атрибута. */
    public var type: String?
    /** Логическое имя. */
    public var logicalName: String?
    /** Варианты ответа. */
    public var fixedAnswers: [String]?
    /** Порядковый номер. */
    public var order: Int?

    public init(id: Int? = nil, name: String? = nil, userAttributeType: UserAttributeType? = nil, type: String? = nil, logicalName: String? = nil, fixedAnswers: [String]? = nil, order: Int? = nil) {
        self.id = id
        self.name = name
        self.userAttributeType = userAttributeType
        self.type = type
        self.logicalName = logicalName
        self.fixedAnswers = fixedAnswers
        self.order = order
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case userAttributeType
        case type
        case logicalName
        case fixedAnswers
        case order
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(userAttributeType, forKey: .userAttributeType)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(logicalName, forKey: .logicalName)
        try container.encodeIfPresent(fixedAnswers, forKey: .fixedAnswers)
        try container.encodeIfPresent(order, forKey: .order)
    }
}

