//
// PhoneSettingsViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ViewModel для настроек телефона. */
public struct PhoneSettingsViewModel: Codable, JSONEncodable, Hashable {

    /** Id настройки. */
    public var id: Int?
    /** Префикс. */
    public var _prefix: Int?
    /** Регулярное выражение. */
    public var regexp: String?
    /** Список масок для разных длин номеров. */
    public var masks: [PhoneMaskViewModel]?
    public var country: CountryViewModel?
    /** Помещен в архив или нет (архивный формат не используется в системе). */
    public var isArchived: Bool?
    /** Порядковый номер формата в выпадающем списке при вводе номера. */
    public var index: Int?

    public init(id: Int? = nil, _prefix: Int? = nil, regexp: String? = nil, masks: [PhoneMaskViewModel]? = nil, country: CountryViewModel? = nil, isArchived: Bool? = nil, index: Int? = nil) {
        self.id = id
        self._prefix = _prefix
        self.regexp = regexp
        self.masks = masks
        self.country = country
        self.isArchived = isArchived
        self.index = index
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case _prefix = "prefix"
        case regexp
        case masks
        case country
        case isArchived
        case index
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(_prefix, forKey: ._prefix)
        try container.encodeIfPresent(regexp, forKey: .regexp)
        try container.encodeIfPresent(masks, forKey: .masks)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(isArchived, forKey: .isArchived)
        try container.encodeIfPresent(index, forKey: .index)
    }
}

