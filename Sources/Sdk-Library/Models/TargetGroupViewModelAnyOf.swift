//
// TargetGroupViewModelAnyOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TargetGroupViewModelAnyOf: Codable, JSONEncodable, Hashable {

    /** Внутренний идентификатор целевой аудитории. */
    public var id: Int?
    /** Название целевой аудитории. */
    public var name: String?
    /** Описание целевой аудитории. */
    public var description: String?
    /** Признак состояния целевой аудитории (true - архивный, false - неархивный). */
    public var isArchived: Bool?
    /** Дата создания. */
    public var creationDate: Date?
    /** Дата изменения. */
    public var changeDate: Date?
    public var creatorDescription: CreatorModel?
    public var lastChangeUserDescription: CreatorModel?
    public var fixUserDescription: CreatorModel?
    /** Признак расчета целевой аудитории (true - рассчитана, false - не рассчитана). */
    public var isFixed: Bool?
    /** Дата расчета. */
    public var fixDate: Date?
    public var partner: PartnerModel?
    public var loyaltyProgram: PartnerLoyaltyProgramModel?
    public var calculationInfo: CalculationModel?
    public var lastCalculationInfo: CalculationModel?
    /** Признак наличия фильтров (true - есть, false - отсуствуют). */
    public var hasFilters: Bool?
    public var operations: TargetGroupManageOperation?
    /** Признак того, что целевая аудитория импортирована (true - импортирована, false - не импортирована). */
    public var isExternal: Bool?

    public init(id: Int? = nil, name: String? = nil, description: String? = nil, isArchived: Bool? = nil, creationDate: Date? = nil, changeDate: Date? = nil, creatorDescription: CreatorModel? = nil, lastChangeUserDescription: CreatorModel? = nil, fixUserDescription: CreatorModel? = nil, isFixed: Bool? = nil, fixDate: Date? = nil, partner: PartnerModel? = nil, loyaltyProgram: PartnerLoyaltyProgramModel? = nil, calculationInfo: CalculationModel? = nil, lastCalculationInfo: CalculationModel? = nil, hasFilters: Bool? = nil, operations: TargetGroupManageOperation? = nil, isExternal: Bool? = nil) {
        self.id = id
        self.name = name
        self.description = description
        self.isArchived = isArchived
        self.creationDate = creationDate
        self.changeDate = changeDate
        self.creatorDescription = creatorDescription
        self.lastChangeUserDescription = lastChangeUserDescription
        self.fixUserDescription = fixUserDescription
        self.isFixed = isFixed
        self.fixDate = fixDate
        self.partner = partner
        self.loyaltyProgram = loyaltyProgram
        self.calculationInfo = calculationInfo
        self.lastCalculationInfo = lastCalculationInfo
        self.hasFilters = hasFilters
        self.operations = operations
        self.isExternal = isExternal
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case description
        case isArchived
        case creationDate
        case changeDate
        case creatorDescription
        case lastChangeUserDescription
        case fixUserDescription
        case isFixed
        case fixDate
        case partner
        case loyaltyProgram
        case calculationInfo
        case lastCalculationInfo
        case hasFilters
        case operations
        case isExternal
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(isArchived, forKey: .isArchived)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(changeDate, forKey: .changeDate)
        try container.encodeIfPresent(creatorDescription, forKey: .creatorDescription)
        try container.encodeIfPresent(lastChangeUserDescription, forKey: .lastChangeUserDescription)
        try container.encodeIfPresent(fixUserDescription, forKey: .fixUserDescription)
        try container.encodeIfPresent(isFixed, forKey: .isFixed)
        try container.encodeIfPresent(fixDate, forKey: .fixDate)
        try container.encodeIfPresent(partner, forKey: .partner)
        try container.encodeIfPresent(loyaltyProgram, forKey: .loyaltyProgram)
        try container.encodeIfPresent(calculationInfo, forKey: .calculationInfo)
        try container.encodeIfPresent(lastCalculationInfo, forKey: .lastCalculationInfo)
        try container.encodeIfPresent(hasFilters, forKey: .hasFilters)
        try container.encodeIfPresent(operations, forKey: .operations)
        try container.encodeIfPresent(isExternal, forKey: .isExternal)
    }
}

