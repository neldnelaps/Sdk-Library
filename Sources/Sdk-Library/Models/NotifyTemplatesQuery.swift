//
// NotifyTemplatesQuery.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель данных запроса на получение списка шаблонов уведомлений. */
public struct NotifyTemplatesQuery: Codable, JSONEncodable, Hashable {

    /** С какого. */
    public var from: Int?
    /** Сколько. */
    public var count: Int?
    public var templateType: TemplateType?
    /** Подстрока логического имени шаблона. */
    public var logicalNameSubStr: String?
    /** Подстрока текстового описания шаблона. */
    public var textSubStr: String?
    public var subscriptionType: MailingSubscriptionType?
    public var showMode: ArchivedState?

    public init(from: Int? = nil, count: Int? = nil, templateType: TemplateType? = nil, logicalNameSubStr: String? = nil, textSubStr: String? = nil, subscriptionType: MailingSubscriptionType? = nil, showMode: ArchivedState? = nil) {
        self.from = from
        self.count = count
        self.templateType = templateType
        self.logicalNameSubStr = logicalNameSubStr
        self.textSubStr = textSubStr
        self.subscriptionType = subscriptionType
        self.showMode = showMode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case from
        case count
        case templateType
        case logicalNameSubStr
        case textSubStr
        case subscriptionType
        case showMode
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(templateType, forKey: .templateType)
        try container.encodeIfPresent(logicalNameSubStr, forKey: .logicalNameSubStr)
        try container.encodeIfPresent(textSubStr, forKey: .textSubStr)
        try container.encodeIfPresent(subscriptionType, forKey: .subscriptionType)
        try container.encodeIfPresent(showMode, forKey: .showMode)
    }
}

