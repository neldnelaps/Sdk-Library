//
// CounterFilter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Фильтр для счетчиков. */
public struct CounterFilter: Codable, JSONEncodable, Hashable {

    public var eventType: OfferEventType?
    /** Текст, содержащийся в названии счетчика. */
    public var nameText: String?
    public var counterType: CounterType?
    /** С какой даты искать. */
    public var dateFrom: Date?
    /** По какую дату искать. */
    public var dateTo: Date?
    /** Список партнеров, по которым будут отфильтрованы счетчики. */
    public var partners: [Int]?
    /** Начало выборки. */
    public var from: Int?
    /** Количество. */
    public var count: Int?
    /** Список id программ лояльности, для фильтрации счетчиков. */
    public var loyaltyProgramIds: [Int]?
    /** Обязательные параметры счетчика. */
    public var requiredTargets: [CounterTarget]?
    /** Поддерживаемые параметры счетчика. */
    public var supportedTargets: [CounterTarget]?

    public init(eventType: OfferEventType? = nil, nameText: String? = nil, counterType: CounterType? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, partners: [Int]? = nil, from: Int? = nil, count: Int? = nil, loyaltyProgramIds: [Int]? = nil, requiredTargets: [CounterTarget]? = nil, supportedTargets: [CounterTarget]? = nil) {
        self.eventType = eventType
        self.nameText = nameText
        self.counterType = counterType
        self.dateFrom = dateFrom
        self.dateTo = dateTo
        self.partners = partners
        self.from = from
        self.count = count
        self.loyaltyProgramIds = loyaltyProgramIds
        self.requiredTargets = requiredTargets
        self.supportedTargets = supportedTargets
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventType
        case nameText
        case counterType
        case dateFrom
        case dateTo
        case partners
        case from
        case count
        case loyaltyProgramIds
        case requiredTargets
        case supportedTargets
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(eventType, forKey: .eventType)
        try container.encodeIfPresent(nameText, forKey: .nameText)
        try container.encodeIfPresent(counterType, forKey: .counterType)
        try container.encodeIfPresent(dateFrom, forKey: .dateFrom)
        try container.encodeIfPresent(dateTo, forKey: .dateTo)
        try container.encodeIfPresent(partners, forKey: .partners)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(loyaltyProgramIds, forKey: .loyaltyProgramIds)
        try container.encodeIfPresent(requiredTargets, forKey: .requiredTargets)
        try container.encodeIfPresent(supportedTargets, forKey: .supportedTargets)
    }
}

