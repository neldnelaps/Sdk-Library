//
// ConfigurationViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель представления для конфигураций. */
public struct ConfigurationViewModel: Codable, JSONEncodable, Hashable {

    /** ID. */
    public var id: Int?
    /** Ключ. */
    public var key: String?
    /** Значение. */
    public var value: String?
    public var regExp: RegExpList?
    public var valueType: ConfigValueType?
    /** Минмальное значение. */
    public var minValue: Int64?
    /** Максимальное значение. */
    public var maxValue: Int64?
    /** Время изменения. */
    public var changeDate: Date?
    public var lastEditByPerson: SystemUserViewModel?
    public var source: ConfigurationSource?

    public init(id: Int? = nil, key: String? = nil, value: String? = nil, regExp: RegExpList? = nil, valueType: ConfigValueType? = nil, minValue: Int64? = nil, maxValue: Int64? = nil, changeDate: Date? = nil, lastEditByPerson: SystemUserViewModel? = nil, source: ConfigurationSource? = nil) {
        self.id = id
        self.key = key
        self.value = value
        self.regExp = regExp
        self.valueType = valueType
        self.minValue = minValue
        self.maxValue = maxValue
        self.changeDate = changeDate
        self.lastEditByPerson = lastEditByPerson
        self.source = source
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case key
        case value
        case regExp
        case valueType
        case minValue
        case maxValue
        case changeDate
        case lastEditByPerson
        case source
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(key, forKey: .key)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(regExp, forKey: .regExp)
        try container.encodeIfPresent(valueType, forKey: .valueType)
        try container.encodeIfPresent(minValue, forKey: .minValue)
        try container.encodeIfPresent(maxValue, forKey: .maxValue)
        try container.encodeIfPresent(changeDate, forKey: .changeDate)
        try container.encodeIfPresent(lastEditByPerson, forKey: .lastEditByPerson)
        try container.encodeIfPresent(source, forKey: .source)
    }
}

