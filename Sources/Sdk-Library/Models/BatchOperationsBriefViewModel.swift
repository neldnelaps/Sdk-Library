//
// BatchOperationsBriefViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель пакетного начисления/списания. */
public struct BatchOperationsBriefViewModel: Codable, JSONEncodable, Hashable {

    /** Внутренний идентификатор пакетного начисления/списания. */
    public var id: Int?
    /** Дата создания. */
    public var creationDate: Date?
    /** Описание начисления/списания. */
    public var description: String?
    /** Системное описание начисления/списания. */
    public var internalDescription: String?
    public var type: BatchType?
    public var state: BatchState?
    public var legal: LegalViewModel?
    /** Сумма начисления/списания. */
    public var deferredOperationsAmmountSum: Double?
    public var loyaltyProgram: PartnerLoyaltyProgramModel?
    public var partner: PartnerViewModel?
    public var marketingCampaign: MarketingCampaignSimpleViewModel?

    public init(id: Int? = nil, creationDate: Date? = nil, description: String? = nil, internalDescription: String? = nil, type: BatchType? = nil, state: BatchState? = nil, legal: LegalViewModel? = nil, deferredOperationsAmmountSum: Double? = nil, loyaltyProgram: PartnerLoyaltyProgramModel? = nil, partner: PartnerViewModel? = nil, marketingCampaign: MarketingCampaignSimpleViewModel? = nil) {
        self.id = id
        self.creationDate = creationDate
        self.description = description
        self.internalDescription = internalDescription
        self.type = type
        self.state = state
        self.legal = legal
        self.deferredOperationsAmmountSum = deferredOperationsAmmountSum
        self.loyaltyProgram = loyaltyProgram
        self.partner = partner
        self.marketingCampaign = marketingCampaign
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case creationDate
        case description
        case internalDescription
        case type
        case state
        case legal
        case deferredOperationsAmmountSum
        case loyaltyProgram
        case partner
        case marketingCampaign
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(internalDescription, forKey: .internalDescription)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(legal, forKey: .legal)
        try container.encodeIfPresent(deferredOperationsAmmountSum, forKey: .deferredOperationsAmmountSum)
        try container.encodeIfPresent(loyaltyProgram, forKey: .loyaltyProgram)
        try container.encodeIfPresent(partner, forKey: .partner)
        try container.encodeIfPresent(marketingCampaign, forKey: .marketingCampaign)
    }
}

