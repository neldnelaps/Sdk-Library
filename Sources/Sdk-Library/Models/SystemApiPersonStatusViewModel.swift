//
// SystemApiPersonStatusViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель статусной системы и статуса клиента. */
public struct SystemApiPersonStatusViewModel: Codable, JSONEncodable, Hashable {

    /** Название статусной системы. */
    public var name: String?
    /** Логическое название статуса. */
    public var logicalName: String?
    /** Описание статуса. */
    public var description: String?
    /** Статусы. */
    public var statuses: [StatusViewModel]?
    public var currentStatus: StatusViewModel?
    /** Идентификатор счетчика. */
    public var counterUid: String?
    /** Текущее значение счетчика. */
    public var currentValue: Double?
    /** Следующие значение счетчика. */
    public var nextStatusValue: Double?
    /** Идентификатор файла с описанием. */
    public var fileExternalId: UUID?
    /** Дата следующего проставления статусов. */
    public var statusUpdateDate: Date?
    /** Внутренний идентификатор статусной системы. */
    public var id: Int?

    public init(name: String? = nil, logicalName: String? = nil, description: String? = nil, statuses: [StatusViewModel]? = nil, currentStatus: StatusViewModel? = nil, counterUid: String? = nil, currentValue: Double? = nil, nextStatusValue: Double? = nil, fileExternalId: UUID? = nil, statusUpdateDate: Date? = nil, id: Int? = nil) {
        self.name = name
        self.logicalName = logicalName
        self.description = description
        self.statuses = statuses
        self.currentStatus = currentStatus
        self.counterUid = counterUid
        self.currentValue = currentValue
        self.nextStatusValue = nextStatusValue
        self.fileExternalId = fileExternalId
        self.statusUpdateDate = statusUpdateDate
        self.id = id
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case logicalName
        case description
        case statuses
        case currentStatus
        case counterUid
        case currentValue
        case nextStatusValue
        case fileExternalId
        case statusUpdateDate
        case id
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(logicalName, forKey: .logicalName)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(statuses, forKey: .statuses)
        try container.encodeIfPresent(currentStatus, forKey: .currentStatus)
        try container.encodeIfPresent(counterUid, forKey: .counterUid)
        try container.encodeIfPresent(currentValue, forKey: .currentValue)
        try container.encodeIfPresent(nextStatusValue, forKey: .nextStatusValue)
        try container.encodeIfPresent(fileExternalId, forKey: .fileExternalId)
        try container.encodeIfPresent(statusUpdateDate, forKey: .statusUpdateDate)
        try container.encodeIfPresent(id, forKey: .id)
    }
}

