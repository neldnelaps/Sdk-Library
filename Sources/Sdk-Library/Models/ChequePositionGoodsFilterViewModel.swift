//
// ChequePositionGoodsFilterViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ViewModel для фильтра \&quot;Товар\&quot;. */
public struct ChequePositionGoodsFilterViewModel: Codable, JSONEncodable, Hashable {

    public var id: Int?
    public var name: String?
    public var isDeletedFilterType: Bool?
    public var processParameters: String?
    /** Список выбранных групп товаров. */
    public var goodsGroups: [GoodsGroupViewModel]?
    /** Идентификатор атрибута \"Персональное предложение\". */
    public var personalOfferAttributeId: Int?
    public var type: ChequeGoodsFilterType?
    public var operation: FilterOperation?
    /** Первое значение для операции. */
    public var firstValue: Double?
    /** Второе значение для операции. */
    public var secondValue: Double?
    /** Делить позиции по условиям. */
    public var dividePositions: Bool?
    public var chequeGoodsSortType: ChequeGoodsSortType?

    public init(id: Int? = nil, name: String? = nil, isDeletedFilterType: Bool? = nil, processParameters: String? = nil, goodsGroups: [GoodsGroupViewModel]? = nil, personalOfferAttributeId: Int? = nil, type: ChequeGoodsFilterType? = nil, operation: FilterOperation? = nil, firstValue: Double? = nil, secondValue: Double? = nil, dividePositions: Bool? = nil, chequeGoodsSortType: ChequeGoodsSortType? = nil) {
        self.id = id
        self.name = name
        self.isDeletedFilterType = isDeletedFilterType
        self.processParameters = processParameters
        self.goodsGroups = goodsGroups
        self.personalOfferAttributeId = personalOfferAttributeId
        self.type = type
        self.operation = operation
        self.firstValue = firstValue
        self.secondValue = secondValue
        self.dividePositions = dividePositions
        self.chequeGoodsSortType = chequeGoodsSortType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case isDeletedFilterType
        case processParameters
        case goodsGroups
        case personalOfferAttributeId
        case type
        case operation
        case firstValue
        case secondValue
        case dividePositions
        case chequeGoodsSortType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isDeletedFilterType, forKey: .isDeletedFilterType)
        try container.encodeIfPresent(processParameters, forKey: .processParameters)
        try container.encodeIfPresent(goodsGroups, forKey: .goodsGroups)
        try container.encodeIfPresent(personalOfferAttributeId, forKey: .personalOfferAttributeId)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(operation, forKey: .operation)
        try container.encodeIfPresent(firstValue, forKey: .firstValue)
        try container.encodeIfPresent(secondValue, forKey: .secondValue)
        try container.encodeIfPresent(dividePositions, forKey: .dividePositions)
        try container.encodeIfPresent(chequeGoodsSortType, forKey: .chequeGoodsSortType)
    }
}

