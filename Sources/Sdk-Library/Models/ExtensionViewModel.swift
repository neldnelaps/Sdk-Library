//
// ExtensionViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель представления для плагина. */
public struct ExtensionViewModel: Codable, JSONEncodable, Hashable {

    /** Идентификатор плагина. */
    public var id: Int?
    /** Имя плагина. */
    public var className: String?
    /** Имя класса плагина. */
    public var name: String?
    /** Версия плагина. */
    public var version: String?
    /** Включен плагин или нет. */
    public var isDisabled: Bool?

    public init(id: Int? = nil, className: String? = nil, name: String? = nil, version: String? = nil, isDisabled: Bool? = nil) {
        self.id = id
        self.className = className
        self.name = name
        self.version = version
        self.isDisabled = isDisabled
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case className
        case name
        case version
        case isDisabled
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(className, forKey: .className)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(isDisabled, forKey: .isDisabled)
    }
}

