//
// MetricsViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель представления показателей. */
public struct MetricsViewModel: Codable, JSONEncodable, Hashable {

    /** Товарооборот. */
    public var turnover: Double?
    /** Выручка. */
    public var proceeds: Double?
    /** Скидка. */
    public var discount: Double?
    /** Скидка в %. */
    public var discountPercent: Double?
    /** Начисленно бонусов. */
    public var accruedSum: Double?
    /** Начислено бонусов в %. */
    public var accruedPercent: Double?
    /** Оплата бонусами. */
    public var paymentBonusesSum: Double?
    /** Оплата валютой кассы. */
    public var paymentMoneySum: Double?
    /** Кол-во покупателей. */
    public var activeClientsCount: Double?
    /** Кол-во чеков. */
    public var chequesCount: Double?
    /** Кол-во покупок на 1ого клиента. */
    public var purchasesPerClient: Double?
    /** Средняя сумма чека. */
    public var averageChequeSum: Double?
    /** Сумма покупок на 1ого клиента. */
    public var purchasesSumPerClient: Double?
    /** Сумма скидок на 1ого клиента. */
    public var discountsSumPerClient: Double?
    /** Сумма начислений на 1ого клиента. */
    public var cashbacksSumPerClient: Double?
    /** Сумма оплаты бонусами на 1ого клиента. */
    public var paymentsSumPerClient: Double?
    /** Бонусов списано от товарооборота. */
    public var withdrawsPercentByTurnover: Double?
    /** Кол-во списанных бонусов к кол-ву начисленных. */
    public var withdrawsPercentByAccruals: Double?

    public init(turnover: Double? = nil, proceeds: Double? = nil, discount: Double? = nil, discountPercent: Double? = nil, accruedSum: Double? = nil, accruedPercent: Double? = nil, paymentBonusesSum: Double? = nil, paymentMoneySum: Double? = nil, activeClientsCount: Double? = nil, chequesCount: Double? = nil, purchasesPerClient: Double? = nil, averageChequeSum: Double? = nil, purchasesSumPerClient: Double? = nil, discountsSumPerClient: Double? = nil, cashbacksSumPerClient: Double? = nil, paymentsSumPerClient: Double? = nil, withdrawsPercentByTurnover: Double? = nil, withdrawsPercentByAccruals: Double? = nil) {
        self.turnover = turnover
        self.proceeds = proceeds
        self.discount = discount
        self.discountPercent = discountPercent
        self.accruedSum = accruedSum
        self.accruedPercent = accruedPercent
        self.paymentBonusesSum = paymentBonusesSum
        self.paymentMoneySum = paymentMoneySum
        self.activeClientsCount = activeClientsCount
        self.chequesCount = chequesCount
        self.purchasesPerClient = purchasesPerClient
        self.averageChequeSum = averageChequeSum
        self.purchasesSumPerClient = purchasesSumPerClient
        self.discountsSumPerClient = discountsSumPerClient
        self.cashbacksSumPerClient = cashbacksSumPerClient
        self.paymentsSumPerClient = paymentsSumPerClient
        self.withdrawsPercentByTurnover = withdrawsPercentByTurnover
        self.withdrawsPercentByAccruals = withdrawsPercentByAccruals
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case turnover
        case proceeds
        case discount
        case discountPercent
        case accruedSum
        case accruedPercent
        case paymentBonusesSum
        case paymentMoneySum
        case activeClientsCount
        case chequesCount
        case purchasesPerClient
        case averageChequeSum
        case purchasesSumPerClient
        case discountsSumPerClient
        case cashbacksSumPerClient
        case paymentsSumPerClient
        case withdrawsPercentByTurnover
        case withdrawsPercentByAccruals
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(turnover, forKey: .turnover)
        try container.encodeIfPresent(proceeds, forKey: .proceeds)
        try container.encodeIfPresent(discount, forKey: .discount)
        try container.encodeIfPresent(discountPercent, forKey: .discountPercent)
        try container.encodeIfPresent(accruedSum, forKey: .accruedSum)
        try container.encodeIfPresent(accruedPercent, forKey: .accruedPercent)
        try container.encodeIfPresent(paymentBonusesSum, forKey: .paymentBonusesSum)
        try container.encodeIfPresent(paymentMoneySum, forKey: .paymentMoneySum)
        try container.encodeIfPresent(activeClientsCount, forKey: .activeClientsCount)
        try container.encodeIfPresent(chequesCount, forKey: .chequesCount)
        try container.encodeIfPresent(purchasesPerClient, forKey: .purchasesPerClient)
        try container.encodeIfPresent(averageChequeSum, forKey: .averageChequeSum)
        try container.encodeIfPresent(purchasesSumPerClient, forKey: .purchasesSumPerClient)
        try container.encodeIfPresent(discountsSumPerClient, forKey: .discountsSumPerClient)
        try container.encodeIfPresent(cashbacksSumPerClient, forKey: .cashbacksSumPerClient)
        try container.encodeIfPresent(paymentsSumPerClient, forKey: .paymentsSumPerClient)
        try container.encodeIfPresent(withdrawsPercentByTurnover, forKey: .withdrawsPercentByTurnover)
        try container.encodeIfPresent(withdrawsPercentByAccruals, forKey: .withdrawsPercentByAccruals)
    }
}

