//
// MerchantFilterViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ViewModel для фильтра \&quot;Магазины\&quot;. */
public struct MerchantFilterViewModel: Codable, JSONEncodable, Hashable {

    public var id: Int?
    public var name: String?
    public var isDeletedFilterType: Bool?
    public var processParameters: String?
    /** Список выбранных магазинов. */
    public var merchants: [MerchantViewModel]?
    public var merchantAttributeName: String?
    public var merchantAttributeValues: [String]?
    public var useAttributeMode: Bool?

    public init(id: Int? = nil, name: String? = nil, isDeletedFilterType: Bool? = nil, processParameters: String? = nil, merchants: [MerchantViewModel]? = nil, merchantAttributeName: String? = nil, merchantAttributeValues: [String]? = nil, useAttributeMode: Bool? = nil) {
        self.id = id
        self.name = name
        self.isDeletedFilterType = isDeletedFilterType
        self.processParameters = processParameters
        self.merchants = merchants
        self.merchantAttributeName = merchantAttributeName
        self.merchantAttributeValues = merchantAttributeValues
        self.useAttributeMode = useAttributeMode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case isDeletedFilterType
        case processParameters
        case merchants
        case merchantAttributeName
        case merchantAttributeValues
        case useAttributeMode
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isDeletedFilterType, forKey: .isDeletedFilterType)
        try container.encodeIfPresent(processParameters, forKey: .processParameters)
        try container.encodeIfPresent(merchants, forKey: .merchants)
        try container.encodeIfPresent(merchantAttributeName, forKey: .merchantAttributeName)
        try container.encodeIfPresent(merchantAttributeValues, forKey: .merchantAttributeValues)
        try container.encodeIfPresent(useAttributeMode, forKey: .useAttributeMode)
    }
}

