//
// CampaignMetricsViewModelAnyOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CampaignMetricsViewModelAnyOf: Codable, JSONEncodable, Hashable {

    /** Численность ЦА. */
    public var targetGroupCapacity: Int?
    /** Затраты рекламы и коммуникации на 1ого клиента. */
    public var advertisingExpensesPerClient: Double?
    /** Затраты рекламы и коммуникации на 1ого клиента в %. */
    public var advertisingExpensesPerClientPercent: Double?
    /** Стоимость привлечения 1ого клиента. */
    public var attractionExpensesPerClient: Double?
    /** Стоимость привлечения 1ого клиента в %. */
    public var attractionExpensesPerClientPercent: Double?
    /** Конверсия. */
    public var conversion: Double?
    /** Затраты ИТОГ. */
    public var expensesSum: Double?
    /** Затраты ИТОГ в %. */
    public var expensesPercent: Double?
    /** Затраты на коммуникацию. */
    public var communicationExpenses: Double?
    /** Затраты на рекламные материалы. */
    public var advertisingExpenses: Double?

    public init(targetGroupCapacity: Int? = nil, advertisingExpensesPerClient: Double? = nil, advertisingExpensesPerClientPercent: Double? = nil, attractionExpensesPerClient: Double? = nil, attractionExpensesPerClientPercent: Double? = nil, conversion: Double? = nil, expensesSum: Double? = nil, expensesPercent: Double? = nil, communicationExpenses: Double? = nil, advertisingExpenses: Double? = nil) {
        self.targetGroupCapacity = targetGroupCapacity
        self.advertisingExpensesPerClient = advertisingExpensesPerClient
        self.advertisingExpensesPerClientPercent = advertisingExpensesPerClientPercent
        self.attractionExpensesPerClient = attractionExpensesPerClient
        self.attractionExpensesPerClientPercent = attractionExpensesPerClientPercent
        self.conversion = conversion
        self.expensesSum = expensesSum
        self.expensesPercent = expensesPercent
        self.communicationExpenses = communicationExpenses
        self.advertisingExpenses = advertisingExpenses
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case targetGroupCapacity
        case advertisingExpensesPerClient
        case advertisingExpensesPerClientPercent
        case attractionExpensesPerClient
        case attractionExpensesPerClientPercent
        case conversion
        case expensesSum
        case expensesPercent
        case communicationExpenses
        case advertisingExpenses
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(targetGroupCapacity, forKey: .targetGroupCapacity)
        try container.encodeIfPresent(advertisingExpensesPerClient, forKey: .advertisingExpensesPerClient)
        try container.encodeIfPresent(advertisingExpensesPerClientPercent, forKey: .advertisingExpensesPerClientPercent)
        try container.encodeIfPresent(attractionExpensesPerClient, forKey: .attractionExpensesPerClient)
        try container.encodeIfPresent(attractionExpensesPerClientPercent, forKey: .attractionExpensesPerClientPercent)
        try container.encodeIfPresent(conversion, forKey: .conversion)
        try container.encodeIfPresent(expensesSum, forKey: .expensesSum)
        try container.encodeIfPresent(expensesPercent, forKey: .expensesPercent)
        try container.encodeIfPresent(communicationExpenses, forKey: .communicationExpenses)
        try container.encodeIfPresent(advertisingExpenses, forKey: .advertisingExpenses)
    }
}

