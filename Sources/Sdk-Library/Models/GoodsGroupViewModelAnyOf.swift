//
// GoodsGroupViewModelAnyOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GoodsGroupViewModelAnyOf: Codable, JSONEncodable, Hashable {

    /** Идентификатор. */
    public var id: Int?
    /** Название. */
    public var name: String?
    /** Дата создания. */
    public var creationDate: Date?
    /** Дата изменения. */
    public var changeDate: Date?
    public var partner: PartnerModel?
    public var ownerDescription: CreatorModel?
    /** Количество товаров. */
    public var goodsCount: Int?
    public var lastChangeUserDescription: CreatorModel?
    /** Зафиксирована или нет. */
    public var isFixed: Bool?
    /** Дата фиксации. */
    public var fixDate: Date?
    public var fixUserDescription: CreatorModel?
    /** Количество зафиксированных товаров. */
    public var fixedGoodsCount: Int?
    /** Принята или нет. */
    public var isAccepted: Bool?
    public var acceptor: CreatorModel?
    /** Признак архивной группы товаров. */
    public var isArchived: Bool?
    /** Внешний идентификатор. */
    public var externalId: UUID?

    public init(id: Int? = nil, name: String? = nil, creationDate: Date? = nil, changeDate: Date? = nil, partner: PartnerModel? = nil, ownerDescription: CreatorModel? = nil, goodsCount: Int? = nil, lastChangeUserDescription: CreatorModel? = nil, isFixed: Bool? = nil, fixDate: Date? = nil, fixUserDescription: CreatorModel? = nil, fixedGoodsCount: Int? = nil, isAccepted: Bool? = nil, acceptor: CreatorModel? = nil, isArchived: Bool? = nil, externalId: UUID? = nil) {
        self.id = id
        self.name = name
        self.creationDate = creationDate
        self.changeDate = changeDate
        self.partner = partner
        self.ownerDescription = ownerDescription
        self.goodsCount = goodsCount
        self.lastChangeUserDescription = lastChangeUserDescription
        self.isFixed = isFixed
        self.fixDate = fixDate
        self.fixUserDescription = fixUserDescription
        self.fixedGoodsCount = fixedGoodsCount
        self.isAccepted = isAccepted
        self.acceptor = acceptor
        self.isArchived = isArchived
        self.externalId = externalId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case creationDate
        case changeDate
        case partner
        case ownerDescription
        case goodsCount
        case lastChangeUserDescription
        case isFixed
        case fixDate
        case fixUserDescription
        case fixedGoodsCount
        case isAccepted
        case acceptor
        case isArchived
        case externalId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(changeDate, forKey: .changeDate)
        try container.encodeIfPresent(partner, forKey: .partner)
        try container.encodeIfPresent(ownerDescription, forKey: .ownerDescription)
        try container.encodeIfPresent(goodsCount, forKey: .goodsCount)
        try container.encodeIfPresent(lastChangeUserDescription, forKey: .lastChangeUserDescription)
        try container.encodeIfPresent(isFixed, forKey: .isFixed)
        try container.encodeIfPresent(fixDate, forKey: .fixDate)
        try container.encodeIfPresent(fixUserDescription, forKey: .fixUserDescription)
        try container.encodeIfPresent(fixedGoodsCount, forKey: .fixedGoodsCount)
        try container.encodeIfPresent(isAccepted, forKey: .isAccepted)
        try container.encodeIfPresent(acceptor, forKey: .acceptor)
        try container.encodeIfPresent(isArchived, forKey: .isArchived)
        try container.encodeIfPresent(externalId, forKey: .externalId)
    }
}

