//
// CardCategoryModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CardCategoryModel: Codable, JSONEncodable, Hashable {

    public var id: Int?
    public var logicalName: String?
    public var name: String?
    public var description: String?
    public var type: CardCategoryType?
    public var cardCount: Int?
    public var cardExpiryPeriodType: CardExpiryPeriodType?
    public var cardExpiryPeriodValue: Int?
    public var cardExpiryDateType: CardExpiryDateType?

    public init(id: Int? = nil, logicalName: String? = nil, name: String? = nil, description: String? = nil, type: CardCategoryType? = nil, cardCount: Int? = nil, cardExpiryPeriodType: CardExpiryPeriodType? = nil, cardExpiryPeriodValue: Int? = nil, cardExpiryDateType: CardExpiryDateType? = nil) {
        self.id = id
        self.logicalName = logicalName
        self.name = name
        self.description = description
        self.type = type
        self.cardCount = cardCount
        self.cardExpiryPeriodType = cardExpiryPeriodType
        self.cardExpiryPeriodValue = cardExpiryPeriodValue
        self.cardExpiryDateType = cardExpiryDateType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case logicalName
        case name
        case description
        case type
        case cardCount
        case cardExpiryPeriodType
        case cardExpiryPeriodValue
        case cardExpiryDateType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(logicalName, forKey: .logicalName)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(cardCount, forKey: .cardCount)
        try container.encodeIfPresent(cardExpiryPeriodType, forKey: .cardExpiryPeriodType)
        try container.encodeIfPresent(cardExpiryPeriodValue, forKey: .cardExpiryPeriodValue)
        try container.encodeIfPresent(cardExpiryDateType, forKey: .cardExpiryDateType)
    }
}

