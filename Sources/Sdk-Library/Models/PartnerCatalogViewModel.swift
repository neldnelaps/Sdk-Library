//
// PartnerCatalogViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель каталога Партнера. */
public struct PartnerCatalogViewModel: Codable, JSONEncodable, Hashable {

    /** Внутренний идентификатор каталога. */
    public var id: Int?
    /** Внешний идентификатор каталога. */
    public var uid: UUID?
    /** Код каталога. */
    public var code: String?
    /** Название каталога. */
    public var name: String?
    public var urlAddress: UrlAuthViewModel?
    /** Параметр не используется, необходимо оставлять значение по умолчанию. */
    public var guid: UUID?
    /** Является ли каталог этого партнера общим. */
    public var isCommon: Bool?

    public init(id: Int? = nil, uid: UUID? = nil, code: String? = nil, name: String? = nil, urlAddress: UrlAuthViewModel? = nil, guid: UUID? = nil, isCommon: Bool? = nil) {
        self.id = id
        self.uid = uid
        self.code = code
        self.name = name
        self.urlAddress = urlAddress
        self.guid = guid
        self.isCommon = isCommon
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case uid
        case code
        case name
        case urlAddress
        case guid
        case isCommon
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(uid, forKey: .uid)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(urlAddress, forKey: .urlAddress)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(isCommon, forKey: .isCommon)
    }
}

