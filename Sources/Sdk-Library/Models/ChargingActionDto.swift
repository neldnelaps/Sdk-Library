//
// ChargingActionDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Действие акции \&quot;Доп. бонусы\&quot;. */
public struct ChargingActionDto: Codable, JSONEncodable, Hashable {

    /** Порядковый номер действия в цепочке. */
    public var order: Int?
    /** Id действия в цепочке. */
    public var id: String?
    /** Идентификатор времени жизни бонусов. */
    public var lifeTimeDefinitionId: Int?
    /** Фиксированная сумма. */
    public var amount: String?
    /** Внешний id Юридического лица. */
    public var legalCode: String?
    /** Логическое имя дебетовой кассы. */
    public var deviceId: String?
    /** Uid валюты. */
    public var currencyUid: String?
    /** Для совместимости, использовать CurrencyUid: Uid валюты. */
    public var currencyExternalId: String?

    public init(order: Int? = nil, id: String? = nil, lifeTimeDefinitionId: Int? = nil, amount: String? = nil, legalCode: String? = nil, deviceId: String? = nil, currencyUid: String? = nil, currencyExternalId: String? = nil) {
        self.order = order
        self.id = id
        self.lifeTimeDefinitionId = lifeTimeDefinitionId
        self.amount = amount
        self.legalCode = legalCode
        self.deviceId = deviceId
        self.currencyUid = currencyUid
        self.currencyExternalId = currencyExternalId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case order
        case id
        case lifeTimeDefinitionId
        case amount
        case legalCode
        case deviceId
        case currencyUid
        case currencyExternalId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(lifeTimeDefinitionId, forKey: .lifeTimeDefinitionId)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(legalCode, forKey: .legalCode)
        try container.encodeIfPresent(deviceId, forKey: .deviceId)
        try container.encodeIfPresent(currencyUid, forKey: .currencyUid)
        try container.encodeIfPresent(currencyExternalId, forKey: .currencyExternalId)
    }
}

