//
// CreateOfferModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель для создания акции. */
public struct CreateOfferModel: Codable, JSONEncodable, Hashable {

    /** Название акции. */
    public var name: String?
    /** Дата начала действия акции. */
    public var dateFrom: Date?
    /** Дата окончания действия акции. */
    public var dateTo: Date?
    /** Внутренний идентификатор Партнера. */
    public var partnerId: Int?
    /** Описание акции. */
    public var description: String?
    /** Признак суммируемости акции с другими (true — суммируется, false — не суммируется). */
    public var isSum: Bool?
    /** Приоритет акции. */
    public var priority: Int?
    /** Внутренний идентификатор Программы лояльности. */
    public var loyaltyProgramId: Int?

    public init(name: String? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, partnerId: Int? = nil, description: String? = nil, isSum: Bool? = nil, priority: Int? = nil, loyaltyProgramId: Int? = nil) {
        self.name = name
        self.dateFrom = dateFrom
        self.dateTo = dateTo
        self.partnerId = partnerId
        self.description = description
        self.isSum = isSum
        self.priority = priority
        self.loyaltyProgramId = loyaltyProgramId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case dateFrom
        case dateTo
        case partnerId
        case description
        case isSum
        case priority
        case loyaltyProgramId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(dateFrom, forKey: .dateFrom)
        try container.encodeIfPresent(dateTo, forKey: .dateTo)
        try container.encodeIfPresent(partnerId, forKey: .partnerId)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(isSum, forKey: .isSum)
        try container.encodeIfPresent(priority, forKey: .priority)
        try container.encodeIfPresent(loyaltyProgramId, forKey: .loyaltyProgramId)
    }
}

