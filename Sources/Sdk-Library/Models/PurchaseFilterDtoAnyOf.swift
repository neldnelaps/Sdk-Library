//
// PurchaseFilterDtoAnyOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PurchaseFilterDtoAnyOf: Codable, JSONEncodable, Hashable {

    public var merchants: PurchaseFilterMerchants?
    public var date: PurchaseFilterDate?
    public var dateInterval: PurchaseFilterDateInterval?
    public var daysOfWeek: PurchaseFilterDaysOfWeek?
    public var time: PurchaseFilterTime?
    public var chequeSum: PurchaseFilterChequeSum?
    /** Фильтровать позиции в соответсвии с выбранными товарами. */
    public var filterPositions: Bool?
    /** Включить текущую покупку в расчет, если она удовлетворяет условиям. */
    public var includeCurrentPurchase: Bool?
    public var aggregationType: FilterPurchaseGroupType?
    public var _operator: ComparisonOperator?
    /** Первое значение. */
    public var firstValue: Double?
    /** Второе значение. */
    public var secondValue: Double?

    public init(merchants: PurchaseFilterMerchants? = nil, date: PurchaseFilterDate? = nil, dateInterval: PurchaseFilterDateInterval? = nil, daysOfWeek: PurchaseFilterDaysOfWeek? = nil, time: PurchaseFilterTime? = nil, chequeSum: PurchaseFilterChequeSum? = nil, filterPositions: Bool? = nil, includeCurrentPurchase: Bool? = nil, aggregationType: FilterPurchaseGroupType? = nil, _operator: ComparisonOperator? = nil, firstValue: Double? = nil, secondValue: Double? = nil) {
        self.merchants = merchants
        self.date = date
        self.dateInterval = dateInterval
        self.daysOfWeek = daysOfWeek
        self.time = time
        self.chequeSum = chequeSum
        self.filterPositions = filterPositions
        self.includeCurrentPurchase = includeCurrentPurchase
        self.aggregationType = aggregationType
        self._operator = _operator
        self.firstValue = firstValue
        self.secondValue = secondValue
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case merchants
        case date
        case dateInterval
        case daysOfWeek
        case time
        case chequeSum
        case filterPositions
        case includeCurrentPurchase
        case aggregationType
        case _operator = "operator"
        case firstValue
        case secondValue
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(merchants, forKey: .merchants)
        try container.encodeIfPresent(date, forKey: .date)
        try container.encodeIfPresent(dateInterval, forKey: .dateInterval)
        try container.encodeIfPresent(daysOfWeek, forKey: .daysOfWeek)
        try container.encodeIfPresent(time, forKey: .time)
        try container.encodeIfPresent(chequeSum, forKey: .chequeSum)
        try container.encodeIfPresent(filterPositions, forKey: .filterPositions)
        try container.encodeIfPresent(includeCurrentPurchase, forKey: .includeCurrentPurchase)
        try container.encodeIfPresent(aggregationType, forKey: .aggregationType)
        try container.encodeIfPresent(_operator, forKey: ._operator)
        try container.encodeIfPresent(firstValue, forKey: .firstValue)
        try container.encodeIfPresent(secondValue, forKey: .secondValue)
    }
}

