//
// BusinessEventListFilter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель фильтра для получения расчёта событий. */
public struct BusinessEventListFilter: Codable, JSONEncodable, Hashable {

    /** С какого элемента брать. */
    public var from: Int?
    /** Сколько элементов брать. */
    public var count: Int?
    /** Дата создания с. */
    public var activityDateFrom: Date?
    /** Дата создания по. */
    public var activityDateTo: Date?
    /** Идентификатор пользователя. */
    public var personId: Int?
    /** Идентификатор покупки. */
    public var purchaseId: Int?
    public var contextType: BusinessActivityContextType?

    public init(from: Int? = nil, count: Int? = nil, activityDateFrom: Date? = nil, activityDateTo: Date? = nil, personId: Int? = nil, purchaseId: Int? = nil, contextType: BusinessActivityContextType? = nil) {
        self.from = from
        self.count = count
        self.activityDateFrom = activityDateFrom
        self.activityDateTo = activityDateTo
        self.personId = personId
        self.purchaseId = purchaseId
        self.contextType = contextType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case from
        case count
        case activityDateFrom
        case activityDateTo
        case personId
        case purchaseId
        case contextType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(activityDateFrom, forKey: .activityDateFrom)
        try container.encodeIfPresent(activityDateTo, forKey: .activityDateTo)
        try container.encodeIfPresent(personId, forKey: .personId)
        try container.encodeIfPresent(purchaseId, forKey: .purchaseId)
        try container.encodeIfPresent(contextType, forKey: .contextType)
    }
}

