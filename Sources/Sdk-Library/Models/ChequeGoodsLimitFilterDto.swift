//
// ChequeGoodsLimitFilterDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Фильтр \&quot;Ограничение количества товара\&quot;. */
public struct ChequeGoodsLimitFilterDto: Codable, JSONEncodable, Hashable {

    /** Имя фильтра. */
    public var name: String?
    /** Параметры обработки. */
    public var processParameters: String?
    /** Группы товаров. */
    public var goodsGroups: [AnyCodable]?
    /** Логическое имя атрибута \"Персональное предложение\". */
    public var personalOfferAttributeLogicalName: String?
    public var period: DateTimeLimitPeriod?
    /** Количество товара, которое можно приобрести за период. */
    public var quantity: Double?

    public init(name: String? = nil, processParameters: String? = nil, goodsGroups: [AnyCodable]? = nil, personalOfferAttributeLogicalName: String? = nil, period: DateTimeLimitPeriod? = nil, quantity: Double? = nil) {
        self.name = name
        self.processParameters = processParameters
        self.goodsGroups = goodsGroups
        self.personalOfferAttributeLogicalName = personalOfferAttributeLogicalName
        self.period = period
        self.quantity = quantity
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case processParameters
        case goodsGroups
        case personalOfferAttributeLogicalName
        case period
        case quantity
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(processParameters, forKey: .processParameters)
        try container.encodeIfPresent(goodsGroups, forKey: .goodsGroups)
        try container.encodeIfPresent(personalOfferAttributeLogicalName, forKey: .personalOfferAttributeLogicalName)
        try container.encodeIfPresent(period, forKey: .period)
        try container.encodeIfPresent(quantity, forKey: .quantity)
    }
}

