//
// PurchaseFilterViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ViewModel для фильтра \&quot;Покупки\&quot;. */
public struct PurchaseFilterViewModel: Codable, JSONEncodable, Hashable {

    public var id: Int?
    public var name: String?
    public var isDeletedFilterType: Bool?
    public var processParameters: String?
    /** Список выбранных магазинов. */
    public var merchants: [MerchantViewModel]?
    public var dateFixedPeriod: FixedPurchaseFilterPeriodViewModel?
    public var dateFloatingPeriod: FloatingPurchaseFilterPeriodViewModel?
    /** Дни недели покупок. */
    public var daysOfWeek: [DayOfWeek]?
    public var beginTime: HourMinuteModel?
    public var endTime: HourMinuteModel?
    public var chequeSumOperation: FilterOperation?
    /** Первое значение суммы чека. */
    public var chequeSumFirstValue: Double?
    /** Второе значение суммы чека. */
    public var chequeSumSecondValue: Double?
    /** Товары, хотябы один из которых должены присутствовать в чеке. */
    public var goodsGroups: [GoodsGroupViewModel]?
    /** Фильтровать позиции в соответсвии с выбранными товарами. */
    public var filterPositions: Bool?
    /** Включить текущую покупку в расчет, если она удовлетворяет условиям. */
    public var includeCurrentPurchase: Bool?
    public var aggregationType: FilterPurchaseGroupType?
    public var operation: FilterOperation?
    /** Первое значение для сравнения. */
    public var firstValue: Double?
    /** Второе значение для сравнения. */
    public var secondValue: Double?

    public init(id: Int? = nil, name: String? = nil, isDeletedFilterType: Bool? = nil, processParameters: String? = nil, merchants: [MerchantViewModel]? = nil, dateFixedPeriod: FixedPurchaseFilterPeriodViewModel? = nil, dateFloatingPeriod: FloatingPurchaseFilterPeriodViewModel? = nil, daysOfWeek: [DayOfWeek]? = nil, beginTime: HourMinuteModel? = nil, endTime: HourMinuteModel? = nil, chequeSumOperation: FilterOperation? = nil, chequeSumFirstValue: Double? = nil, chequeSumSecondValue: Double? = nil, goodsGroups: [GoodsGroupViewModel]? = nil, filterPositions: Bool? = nil, includeCurrentPurchase: Bool? = nil, aggregationType: FilterPurchaseGroupType? = nil, operation: FilterOperation? = nil, firstValue: Double? = nil, secondValue: Double? = nil) {
        self.id = id
        self.name = name
        self.isDeletedFilterType = isDeletedFilterType
        self.processParameters = processParameters
        self.merchants = merchants
        self.dateFixedPeriod = dateFixedPeriod
        self.dateFloatingPeriod = dateFloatingPeriod
        self.daysOfWeek = daysOfWeek
        self.beginTime = beginTime
        self.endTime = endTime
        self.chequeSumOperation = chequeSumOperation
        self.chequeSumFirstValue = chequeSumFirstValue
        self.chequeSumSecondValue = chequeSumSecondValue
        self.goodsGroups = goodsGroups
        self.filterPositions = filterPositions
        self.includeCurrentPurchase = includeCurrentPurchase
        self.aggregationType = aggregationType
        self.operation = operation
        self.firstValue = firstValue
        self.secondValue = secondValue
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case isDeletedFilterType
        case processParameters
        case merchants
        case dateFixedPeriod
        case dateFloatingPeriod
        case daysOfWeek
        case beginTime
        case endTime
        case chequeSumOperation
        case chequeSumFirstValue
        case chequeSumSecondValue
        case goodsGroups
        case filterPositions
        case includeCurrentPurchase
        case aggregationType
        case operation
        case firstValue
        case secondValue
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isDeletedFilterType, forKey: .isDeletedFilterType)
        try container.encodeIfPresent(processParameters, forKey: .processParameters)
        try container.encodeIfPresent(merchants, forKey: .merchants)
        try container.encodeIfPresent(dateFixedPeriod, forKey: .dateFixedPeriod)
        try container.encodeIfPresent(dateFloatingPeriod, forKey: .dateFloatingPeriod)
        try container.encodeIfPresent(daysOfWeek, forKey: .daysOfWeek)
        try container.encodeIfPresent(beginTime, forKey: .beginTime)
        try container.encodeIfPresent(endTime, forKey: .endTime)
        try container.encodeIfPresent(chequeSumOperation, forKey: .chequeSumOperation)
        try container.encodeIfPresent(chequeSumFirstValue, forKey: .chequeSumFirstValue)
        try container.encodeIfPresent(chequeSumSecondValue, forKey: .chequeSumSecondValue)
        try container.encodeIfPresent(goodsGroups, forKey: .goodsGroups)
        try container.encodeIfPresent(filterPositions, forKey: .filterPositions)
        try container.encodeIfPresent(includeCurrentPurchase, forKey: .includeCurrentPurchase)
        try container.encodeIfPresent(aggregationType, forKey: .aggregationType)
        try container.encodeIfPresent(operation, forKey: .operation)
        try container.encodeIfPresent(firstValue, forKey: .firstValue)
        try container.encodeIfPresent(secondValue, forKey: .secondValue)
    }
}

