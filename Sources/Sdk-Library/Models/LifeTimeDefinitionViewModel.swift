//
// LifeTimeDefinitionViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель времени жизни бонусов. */
public struct LifeTimeDefinitionViewModel: Codable, JSONEncodable, Hashable {

    /** Id определения. */
    public var id: Int?
    /** Название. */
    public var name: String?
    /** Активация через (в минутах). */
    public var activationDelay: Int?
    /** Отмена через (в минутах). */
    public var expirationDelay: Int?
    /** Признак состояния времени жизни бонусов (true - архивные, false - неархивные). */
    public var isDeleted: Bool?
    public var activationPeriodType: PeriodType?
    public var expirationPeriodType: PeriodType?
    /** Смещение часового пояса относительно UTC. */
    public var offset: Int?
    /** Логическое имя. */
    public var logicalName: String?
    /** Точное время активации. */
    public var certainActivationDate: Date?
    /** Точное время сгорания. */
    public var certainExpirationDate: Date?
    /** Внутренний идентификатор Партнера. */
    public var partnerID: Int?
    /** Название Партнера. */
    public var partnerName: String?
    /** Внешний идентификатор времени жизни бонусов. */
    public var uid: UUID?

    public init(id: Int? = nil, name: String? = nil, activationDelay: Int? = nil, expirationDelay: Int? = nil, isDeleted: Bool? = nil, activationPeriodType: PeriodType? = nil, expirationPeriodType: PeriodType? = nil, offset: Int? = nil, logicalName: String? = nil, certainActivationDate: Date? = nil, certainExpirationDate: Date? = nil, partnerID: Int? = nil, partnerName: String? = nil, uid: UUID? = nil) {
        self.id = id
        self.name = name
        self.activationDelay = activationDelay
        self.expirationDelay = expirationDelay
        self.isDeleted = isDeleted
        self.activationPeriodType = activationPeriodType
        self.expirationPeriodType = expirationPeriodType
        self.offset = offset
        self.logicalName = logicalName
        self.certainActivationDate = certainActivationDate
        self.certainExpirationDate = certainExpirationDate
        self.partnerID = partnerID
        self.partnerName = partnerName
        self.uid = uid
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case activationDelay
        case expirationDelay
        case isDeleted
        case activationPeriodType
        case expirationPeriodType
        case offset
        case logicalName
        case certainActivationDate
        case certainExpirationDate
        case partnerID
        case partnerName
        case uid
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(activationDelay, forKey: .activationDelay)
        try container.encodeIfPresent(expirationDelay, forKey: .expirationDelay)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(activationPeriodType, forKey: .activationPeriodType)
        try container.encodeIfPresent(expirationPeriodType, forKey: .expirationPeriodType)
        try container.encodeIfPresent(offset, forKey: .offset)
        try container.encodeIfPresent(logicalName, forKey: .logicalName)
        try container.encodeIfPresent(certainActivationDate, forKey: .certainActivationDate)
        try container.encodeIfPresent(certainExpirationDate, forKey: .certainExpirationDate)
        try container.encodeIfPresent(partnerID, forKey: .partnerID)
        try container.encodeIfPresent(partnerName, forKey: .partnerName)
        try container.encodeIfPresent(uid, forKey: .uid)
    }
}

