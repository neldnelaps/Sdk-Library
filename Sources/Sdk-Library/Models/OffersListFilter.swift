//
// OffersListFilter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель фильтра для списка акций. */
public struct OffersListFilter: Codable, JSONEncodable, Hashable {

    /** Начальная дата периода в формате 0000-00-00T00:00:00Z. */
    public var fromDate: Date?
    /** Конечная дата периода в формате 0000-00-00T00:00:00Z. */
    public var toDate: Date?
    /** Порядковый номер начального элемента выборки. */
    public var from: Int?
    /** Количество возвращаемых элементов выборки. */
    public var count: Int?
    /** Подстрока для поиска по названию акции. */
    public var name: String?
    /** Внутренние идентификаторы торговых точек через запятую, для которых созданы акции. */
    public var merchantIds: [Int]?
    /** Внутренние идентификаторы пользователей через запятую, создавших акции. */
    public var creatorIds: [Int]?
    /** Состояния акций по времени действия (Future — будущие, Present — действуют, Past — прошедшие). */
    public var viewStates: [OfferViewState]?
    public var sortColumn: OfferSortColumn?
    /** Направление сортировки (true - по возрастанию, false - по убыванию). */
    public var direction: Bool?
    /** Состояние акции (Run — запущена, Stop — остановлена, Archived — в архиве). */
    public var states: [OfferState]?
    /** Внутренние идентификаторы Партнеров через запятую, для которых созданы акции. */
    public var partnerIds: [Int]?
    /** Внутренние идентификаторы категорий акций через запятую. */
    public var categoryIds: [Int]?
    public var priority: PriorityRange?
    /** Внутренний идентификатор маркетинговой кампании, в рамках которой созданы акции. */
    public var marketingCampaignId: Int?
    /** Признак включения в список акций, входящих в указанную маркетинговую кампанию (true — включать, false — исключать). */
    public var includeMarketingCampaignId: Bool?
    /** Внутренние идентификаторы Программ лояльности через запятую. */
    public var loyaltyProgramIds: [Int]?
    /** Признак исключения из списка всех акций, входящих в какую-либо маркетинговую кампанию (true — исключить, false — не исключать). */
    public var excludeMarketingCampaign: Bool?

    public init(fromDate: Date? = nil, toDate: Date? = nil, from: Int? = nil, count: Int? = nil, name: String? = nil, merchantIds: [Int]? = nil, creatorIds: [Int]? = nil, viewStates: [OfferViewState]? = nil, sortColumn: OfferSortColumn? = nil, direction: Bool? = nil, states: [OfferState]? = nil, partnerIds: [Int]? = nil, categoryIds: [Int]? = nil, priority: PriorityRange? = nil, marketingCampaignId: Int? = nil, includeMarketingCampaignId: Bool? = nil, loyaltyProgramIds: [Int]? = nil, excludeMarketingCampaign: Bool? = nil) {
        self.fromDate = fromDate
        self.toDate = toDate
        self.from = from
        self.count = count
        self.name = name
        self.merchantIds = merchantIds
        self.creatorIds = creatorIds
        self.viewStates = viewStates
        self.sortColumn = sortColumn
        self.direction = direction
        self.states = states
        self.partnerIds = partnerIds
        self.categoryIds = categoryIds
        self.priority = priority
        self.marketingCampaignId = marketingCampaignId
        self.includeMarketingCampaignId = includeMarketingCampaignId
        self.loyaltyProgramIds = loyaltyProgramIds
        self.excludeMarketingCampaign = excludeMarketingCampaign
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fromDate
        case toDate
        case from
        case count
        case name
        case merchantIds
        case creatorIds
        case viewStates
        case sortColumn
        case direction
        case states
        case partnerIds
        case categoryIds
        case priority
        case marketingCampaignId
        case includeMarketingCampaignId
        case loyaltyProgramIds
        case excludeMarketingCampaign
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fromDate, forKey: .fromDate)
        try container.encodeIfPresent(toDate, forKey: .toDate)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(merchantIds, forKey: .merchantIds)
        try container.encodeIfPresent(creatorIds, forKey: .creatorIds)
        try container.encodeIfPresent(viewStates, forKey: .viewStates)
        try container.encodeIfPresent(sortColumn, forKey: .sortColumn)
        try container.encodeIfPresent(direction, forKey: .direction)
        try container.encodeIfPresent(states, forKey: .states)
        try container.encodeIfPresent(partnerIds, forKey: .partnerIds)
        try container.encodeIfPresent(categoryIds, forKey: .categoryIds)
        try container.encodeIfPresent(priority, forKey: .priority)
        try container.encodeIfPresent(marketingCampaignId, forKey: .marketingCampaignId)
        try container.encodeIfPresent(includeMarketingCampaignId, forKey: .includeMarketingCampaignId)
        try container.encodeIfPresent(loyaltyProgramIds, forKey: .loyaltyProgramIds)
        try container.encodeIfPresent(excludeMarketingCampaign, forKey: .excludeMarketingCampaign)
    }
}

