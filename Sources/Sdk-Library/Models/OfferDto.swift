//
// OfferDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Акция. */
public struct OfferDto: Codable, JSONEncodable, Hashable {

    /** Внешний идентификатор акции. */
    public var id: String?
    /** Наименование. */
    public var title: String?
    /** Дата, начиная с которой акция начинает действовать, если она в состоянии \"Running\" (pure xml).  TODO: в xsd определить свой тип для даты (строка с регулярным выражением \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}. */
    public var applyChangesDateValue: String?
    /** Дата, начиная с которой акция заканчивает действовать (pure xml).  TODO: в xsd определить свой тип для даты (строка с регулярным выражением \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}. */
    public var expirationDateValue: String?
    public var workingState: OfferWorkingState?
    public var changesState: OfferChangesState?
    /** Приоритет акции. */
    public var priority: Int?
    /** Суммируемая акция. */
    public var isSum: Bool?
    public var timeRefinement: TimeRefinementDto?
    /** Описание. */
    public var description: String?
    /** Категория. */
    public var category: String?
    /** Маркетинговая кампания. */
    public var marketingCampaign: Int?
    public var partners: OfferPartners?
    public var loyaltyPrograms: OfferLoyaltyPrograms?
    public var pointsOfSales: MerchantsSubFilter?
    /** Список ЦА. */
    public var targetGroups: [AnyCodable]?
    public var rules: OfferRules?
    /** Дата, начиная с которой акция начинает действовать, если она в состоянии \"Running\". */
    public var applyChangesDate: Date?
    /** Дата, начиная с которой акция заканчивает действовать. */
    public var expirationDate: Date?

    public init(id: String? = nil, title: String? = nil, applyChangesDateValue: String? = nil, expirationDateValue: String? = nil, workingState: OfferWorkingState? = nil, changesState: OfferChangesState? = nil, priority: Int? = nil, isSum: Bool? = nil, timeRefinement: TimeRefinementDto? = nil, description: String? = nil, category: String? = nil, marketingCampaign: Int? = nil, partners: OfferPartners? = nil, loyaltyPrograms: OfferLoyaltyPrograms? = nil, pointsOfSales: MerchantsSubFilter? = nil, targetGroups: [AnyCodable]? = nil, rules: OfferRules? = nil, applyChangesDate: Date? = nil, expirationDate: Date? = nil) {
        self.id = id
        self.title = title
        self.applyChangesDateValue = applyChangesDateValue
        self.expirationDateValue = expirationDateValue
        self.workingState = workingState
        self.changesState = changesState
        self.priority = priority
        self.isSum = isSum
        self.timeRefinement = timeRefinement
        self.description = description
        self.category = category
        self.marketingCampaign = marketingCampaign
        self.partners = partners
        self.loyaltyPrograms = loyaltyPrograms
        self.pointsOfSales = pointsOfSales
        self.targetGroups = targetGroups
        self.rules = rules
        self.applyChangesDate = applyChangesDate
        self.expirationDate = expirationDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case applyChangesDateValue
        case expirationDateValue
        case workingState
        case changesState
        case priority
        case isSum
        case timeRefinement
        case description
        case category
        case marketingCampaign
        case partners
        case loyaltyPrograms
        case pointsOfSales
        case targetGroups
        case rules
        case applyChangesDate
        case expirationDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(applyChangesDateValue, forKey: .applyChangesDateValue)
        try container.encodeIfPresent(expirationDateValue, forKey: .expirationDateValue)
        try container.encodeIfPresent(workingState, forKey: .workingState)
        try container.encodeIfPresent(changesState, forKey: .changesState)
        try container.encodeIfPresent(priority, forKey: .priority)
        try container.encodeIfPresent(isSum, forKey: .isSum)
        try container.encodeIfPresent(timeRefinement, forKey: .timeRefinement)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(marketingCampaign, forKey: .marketingCampaign)
        try container.encodeIfPresent(partners, forKey: .partners)
        try container.encodeIfPresent(loyaltyPrograms, forKey: .loyaltyPrograms)
        try container.encodeIfPresent(pointsOfSales, forKey: .pointsOfSales)
        try container.encodeIfPresent(targetGroups, forKey: .targetGroups)
        try container.encodeIfPresent(rules, forKey: .rules)
        try container.encodeIfPresent(applyChangesDate, forKey: .applyChangesDate)
        try container.encodeIfPresent(expirationDate, forKey: .expirationDate)
    }
}

