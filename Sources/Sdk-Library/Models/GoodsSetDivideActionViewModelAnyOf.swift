//
// GoodsSetDivideActionViewModelAnyOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GoodsSetDivideActionViewModelAnyOf: Codable, JSONEncodable, Hashable {

    /** Источник данных о товарах, из который будет формироваться набор. */
    public var compositionInfo: [GoodsSetItemInfoViewModel]?
    public var targetFieldType: ChequeGoodsSetType?
    public var chequeGoodsSortType: ChequeGoodsSortType?
    /** Идентификатор атрибута персональных предложений. */
    public var personalAttributeId: Int?
    /** Идентификатор атрибута товара. */
    public var goodsAttributeId: Int?

    public init(compositionInfo: [GoodsSetItemInfoViewModel]? = nil, targetFieldType: ChequeGoodsSetType? = nil, chequeGoodsSortType: ChequeGoodsSortType? = nil, personalAttributeId: Int? = nil, goodsAttributeId: Int? = nil) {
        self.compositionInfo = compositionInfo
        self.targetFieldType = targetFieldType
        self.chequeGoodsSortType = chequeGoodsSortType
        self.personalAttributeId = personalAttributeId
        self.goodsAttributeId = goodsAttributeId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case compositionInfo
        case targetFieldType
        case chequeGoodsSortType
        case personalAttributeId
        case goodsAttributeId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(compositionInfo, forKey: .compositionInfo)
        try container.encodeIfPresent(targetFieldType, forKey: .targetFieldType)
        try container.encodeIfPresent(chequeGoodsSortType, forKey: .chequeGoodsSortType)
        try container.encodeIfPresent(personalAttributeId, forKey: .personalAttributeId)
        try container.encodeIfPresent(goodsAttributeId, forKey: .goodsAttributeId)
    }
}

