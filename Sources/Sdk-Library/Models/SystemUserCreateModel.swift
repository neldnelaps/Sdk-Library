//
// SystemUserCreateModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель идентификатора. */
public struct SystemUserCreateModel: Codable, JSONEncodable, Hashable {

    /** Имя. */
    public var firstName: String?
    /** Фамилия. */
    public var lastName: String?
    /** Отчество. */
    public var patronymicName: String?
    /** Телефон. */
    public var phone: String?
    /** Email. */
    public var email: String?
    /** Часовой пояс. */
    public var timeZone: Int?
    /** Текст идентификатора. */
    public var login: String?
    /** Пароль. */
    public var password: String?
    /** Признак ограниченного количества сеансов. */
    public var isLimited: Bool?

    public init(firstName: String? = nil, lastName: String? = nil, patronymicName: String? = nil, phone: String? = nil, email: String? = nil, timeZone: Int? = nil, login: String? = nil, password: String? = nil, isLimited: Bool? = nil) {
        self.firstName = firstName
        self.lastName = lastName
        self.patronymicName = patronymicName
        self.phone = phone
        self.email = email
        self.timeZone = timeZone
        self.login = login
        self.password = password
        self.isLimited = isLimited
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case firstName
        case lastName
        case patronymicName
        case phone
        case email
        case timeZone
        case login
        case password
        case isLimited
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(patronymicName, forKey: .patronymicName)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(timeZone, forKey: .timeZone)
        try container.encodeIfPresent(login, forKey: .login)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(isLimited, forKey: .isLimited)
    }
}

