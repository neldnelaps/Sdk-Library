//
// CommonAttributeFilterDtoAnyOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CommonAttributeFilterDtoAnyOf: Codable, JSONEncodable, Hashable {

    /** Массив выбранных элементов для radioString типа атрибута. */
    public var radioStringValues: [String]?
    public var _operator: ComparisonOperator?
    /** Первое значение. */
    public var firstValue: Double?
    /** Второе значение. */
    public var secondValue: Double?
    /** Идентификатор атрибута. */
    public var attributeId: Int?
    /** Значение атрибута. */
    public var attributeValue: String?
    /** Существует ли атрибут. */
    public var attributeIsExists: Bool?

    public init(radioStringValues: [String]? = nil, _operator: ComparisonOperator? = nil, firstValue: Double? = nil, secondValue: Double? = nil, attributeId: Int? = nil, attributeValue: String? = nil, attributeIsExists: Bool? = nil) {
        self.radioStringValues = radioStringValues
        self._operator = _operator
        self.firstValue = firstValue
        self.secondValue = secondValue
        self.attributeId = attributeId
        self.attributeValue = attributeValue
        self.attributeIsExists = attributeIsExists
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case radioStringValues
        case _operator = "operator"
        case firstValue
        case secondValue
        case attributeId
        case attributeValue
        case attributeIsExists
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(radioStringValues, forKey: .radioStringValues)
        try container.encodeIfPresent(_operator, forKey: ._operator)
        try container.encodeIfPresent(firstValue, forKey: .firstValue)
        try container.encodeIfPresent(secondValue, forKey: .secondValue)
        try container.encodeIfPresent(attributeId, forKey: .attributeId)
        try container.encodeIfPresent(attributeValue, forKey: .attributeValue)
        try container.encodeIfPresent(attributeIsExists, forKey: .attributeIsExists)
    }
}

