//
// BusinessActivityViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** View-модель для счётчика. */
public struct BusinessActivityViewModel: Codable, JSONEncodable, Hashable {

    /** Идентификатор счётчика. */
    public var id: Int64?
    /** Дата активности (локальное время + временная зона запроса или пользователя). */
    public var activityDate: Date?
    /** Время создания записи в UTC. */
    public var creationDate: Date?
    /** Время обработки (по времени покупателя). */
    public var localProcessingTime: Date?
    public var contextType: BusinessActivityContextType?
    /** Идентификатор пользователя. */
    public var personId: Int?
    /** Идентификаторы связанных расчётов. */
    public var calculationIds: [Int64]?
    /** Идентификатор покупки. */
    public var purchaseId: Int?
    public var purchaseOperationType: PurchaseOperationType?
    /** Время расчёта. */
    public var calculationDuration: Double?

    public init(id: Int64? = nil, activityDate: Date? = nil, creationDate: Date? = nil, localProcessingTime: Date? = nil, contextType: BusinessActivityContextType? = nil, personId: Int? = nil, calculationIds: [Int64]? = nil, purchaseId: Int? = nil, purchaseOperationType: PurchaseOperationType? = nil, calculationDuration: Double? = nil) {
        self.id = id
        self.activityDate = activityDate
        self.creationDate = creationDate
        self.localProcessingTime = localProcessingTime
        self.contextType = contextType
        self.personId = personId
        self.calculationIds = calculationIds
        self.purchaseId = purchaseId
        self.purchaseOperationType = purchaseOperationType
        self.calculationDuration = calculationDuration
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case activityDate
        case creationDate
        case localProcessingTime
        case contextType
        case personId
        case calculationIds
        case purchaseId
        case purchaseOperationType
        case calculationDuration
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(activityDate, forKey: .activityDate)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(localProcessingTime, forKey: .localProcessingTime)
        try container.encodeIfPresent(contextType, forKey: .contextType)
        try container.encodeIfPresent(personId, forKey: .personId)
        try container.encodeIfPresent(calculationIds, forKey: .calculationIds)
        try container.encodeIfPresent(purchaseId, forKey: .purchaseId)
        try container.encodeIfPresent(purchaseOperationType, forKey: .purchaseOperationType)
        try container.encodeIfPresent(calculationDuration, forKey: .calculationDuration)
    }
}

