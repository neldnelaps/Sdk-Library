//
// MailingTaskViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Задача рассылки. */
public struct MailingTaskViewModel: Codable, JSONEncodable, Hashable {

    /** Идентификатор задачи. */
    public var id: Int?
    /** Идентификатор рассылки. */
    public var mailingId: Int?
    /** Дата старта. */
    public var startDate: Date?
    /** Шлюз. */
    public var gateway: String?
    public var state: MailingTaskState?
    public var statistic: MailingTaskStatisticViewModel?
    /** Возможно ли отменить задачу. */
    public var isAbleToCancel: Bool?
    /** Тестовая ли задача. */
    public var isTest: Bool?
    public var message: MailingMessageViewModel?
    /** Целевая группа. */
    public var targetGroups: [Int]?

    public init(id: Int? = nil, mailingId: Int? = nil, startDate: Date? = nil, gateway: String? = nil, state: MailingTaskState? = nil, statistic: MailingTaskStatisticViewModel? = nil, isAbleToCancel: Bool? = nil, isTest: Bool? = nil, message: MailingMessageViewModel? = nil, targetGroups: [Int]? = nil) {
        self.id = id
        self.mailingId = mailingId
        self.startDate = startDate
        self.gateway = gateway
        self.state = state
        self.statistic = statistic
        self.isAbleToCancel = isAbleToCancel
        self.isTest = isTest
        self.message = message
        self.targetGroups = targetGroups
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case mailingId
        case startDate
        case gateway
        case state
        case statistic
        case isAbleToCancel
        case isTest
        case message
        case targetGroups
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(mailingId, forKey: .mailingId)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(gateway, forKey: .gateway)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(statistic, forKey: .statistic)
        try container.encodeIfPresent(isAbleToCancel, forKey: .isAbleToCancel)
        try container.encodeIfPresent(isTest, forKey: .isTest)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(targetGroups, forKey: .targetGroups)
    }
}

