//
// FinishRegistrationResultModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Результат окончания регистрации. */
public struct FinishRegistrationResultModel: Codable, JSONEncodable, Hashable {

    /** Тип маркера доступа. */
    public var tokenType: String?
    /** Маркер доступа. */
    public var accessToken: String?
    /** Маркер обновления доступа. */
    public var refreshToken: String?
    /** Срок действия маркера доступа. */
    public var expiresIn: Int?
    /** Закончена ли регистрация пользователя. */
    public var registrationCompleted: Bool?
    /** Список невыполненых действий клиента. */
    public var uncompletedActions: [UserActionModel]?

    public init(tokenType: String? = nil, accessToken: String? = nil, refreshToken: String? = nil, expiresIn: Int? = nil, registrationCompleted: Bool? = nil, uncompletedActions: [UserActionModel]? = nil) {
        self.tokenType = tokenType
        self.accessToken = accessToken
        self.refreshToken = refreshToken
        self.expiresIn = expiresIn
        self.registrationCompleted = registrationCompleted
        self.uncompletedActions = uncompletedActions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case tokenType = "token_type"
        case accessToken = "access_token"
        case refreshToken = "refresh_token"
        case expiresIn = "expires_in"
        case registrationCompleted
        case uncompletedActions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(tokenType, forKey: .tokenType)
        try container.encodeIfPresent(accessToken, forKey: .accessToken)
        try container.encodeIfPresent(refreshToken, forKey: .refreshToken)
        try container.encodeIfPresent(expiresIn, forKey: .expiresIn)
        try container.encodeIfPresent(registrationCompleted, forKey: .registrationCompleted)
        try container.encodeIfPresent(uncompletedActions, forKey: .uncompletedActions)
    }
}

