//
// OAuthSettingsViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** View-model для настроек клиентов социальных сетей. */
public struct OAuthSettingsViewModel: Codable, JSONEncodable, Hashable {

    public var providerType: OAuthProviderType?
    public var id: Int?
    public var clientId: String?
    public var clientSecret: String?
    public var token: String?
    public var name: String?
    public var isActive: Bool?
    public var _protocol: OAuthProtocolType?
    public var scope: String?
    public var requestTokenUri: OAuthUriSettings?
    public var authorizeUri: OAuthUriSettings?
    public var accessTokenUri: OAuthUriSettings?
    public var redirectUri: String?
    public var apiSettings: ClientApiSettings?
    /** URL API метода привязки социального аккаунта. */
    public var socialSetUri: String?
    /** URL API метода логина социального аккаунта. */
    public var socialLoginUri: String?

    public init(providerType: OAuthProviderType? = nil, id: Int? = nil, clientId: String? = nil, clientSecret: String? = nil, token: String? = nil, name: String? = nil, isActive: Bool? = nil, _protocol: OAuthProtocolType? = nil, scope: String? = nil, requestTokenUri: OAuthUriSettings? = nil, authorizeUri: OAuthUriSettings? = nil, accessTokenUri: OAuthUriSettings? = nil, redirectUri: String? = nil, apiSettings: ClientApiSettings? = nil, socialSetUri: String? = nil, socialLoginUri: String? = nil) {
        self.providerType = providerType
        self.id = id
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.token = token
        self.name = name
        self.isActive = isActive
        self._protocol = _protocol
        self.scope = scope
        self.requestTokenUri = requestTokenUri
        self.authorizeUri = authorizeUri
        self.accessTokenUri = accessTokenUri
        self.redirectUri = redirectUri
        self.apiSettings = apiSettings
        self.socialSetUri = socialSetUri
        self.socialLoginUri = socialLoginUri
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case providerType
        case id
        case clientId
        case clientSecret
        case token
        case name
        case isActive
        case _protocol = "protocol"
        case scope
        case requestTokenUri
        case authorizeUri
        case accessTokenUri
        case redirectUri
        case apiSettings
        case socialSetUri
        case socialLoginUri
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(providerType, forKey: .providerType)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(clientSecret, forKey: .clientSecret)
        try container.encodeIfPresent(token, forKey: .token)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(_protocol, forKey: ._protocol)
        try container.encodeIfPresent(scope, forKey: .scope)
        try container.encodeIfPresent(requestTokenUri, forKey: .requestTokenUri)
        try container.encodeIfPresent(authorizeUri, forKey: .authorizeUri)
        try container.encodeIfPresent(accessTokenUri, forKey: .accessTokenUri)
        try container.encodeIfPresent(redirectUri, forKey: .redirectUri)
        try container.encodeIfPresent(apiSettings, forKey: .apiSettings)
        try container.encodeIfPresent(socialSetUri, forKey: .socialSetUri)
        try container.encodeIfPresent(socialLoginUri, forKey: .socialLoginUri)
    }
}

