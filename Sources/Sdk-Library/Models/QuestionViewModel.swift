//
// QuestionViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель вопроса анкеты. */
public struct QuestionViewModel: Codable, JSONEncodable, Hashable {

    /** Идентификатор. */
    public var id: Int?
    /** Уникальный Id в рамках коллекции. */
    public var collectionId: Int?
    /** Наименование. */
    public var name: String?
    /** Порядок. */
    public var order: Int?
    /** Удален. */
    public var isDeleted: Bool?
    /** Это вопрос. */
    public var isQuestion: Bool?
    /** Логическое имя вопроса. */
    public var logicalName: String?
    /** Внутренний идентификатор группы вопросов. */
    public var questionGroupId: Int?
    public var questionType: QuestionType?
    /** Регулярное выражение. */
    public var regexp: String?
    /** Текст сообщения об ошибке, получаемого при неудачной валидации через регулярное выражение. */
    public var regexpErrorMessage: String?
    /** Период времени в днях, в течение которого редактирование ответа на вопрос недоступно. */
    public var changePeriod: Int?
    /** Обязательность ответа на вопрос (true — да, false — нет). */
    public var isRequired: Bool?
    /** Отображение вопроса в анкете (true — да, false — нет). */
    public var isVisible: Bool?
    /** Возможность выбора строкового значения из нескольких (true — да, false — нет). */
    public var isMultiSelect: Bool?
    /** Обработчики ответа. */
    public var answerHandlers: [AnswerHandlerViewModel]?
    /** Отображение вопроса в анкете при регистрации (true — да, false — нет). */
    public var isVisibleInRegistration: Bool?
    /** Запись в истории (true — включена, false — выключена). */
    public var historyIsRecorded: Bool?

    public init(id: Int? = nil, collectionId: Int? = nil, name: String? = nil, order: Int? = nil, isDeleted: Bool? = nil, isQuestion: Bool? = nil, logicalName: String? = nil, questionGroupId: Int? = nil, questionType: QuestionType? = nil, regexp: String? = nil, regexpErrorMessage: String? = nil, changePeriod: Int? = nil, isRequired: Bool? = nil, isVisible: Bool? = nil, isMultiSelect: Bool? = nil, answerHandlers: [AnswerHandlerViewModel]? = nil, isVisibleInRegistration: Bool? = nil, historyIsRecorded: Bool? = nil) {
        self.id = id
        self.collectionId = collectionId
        self.name = name
        self.order = order
        self.isDeleted = isDeleted
        self.isQuestion = isQuestion
        self.logicalName = logicalName
        self.questionGroupId = questionGroupId
        self.questionType = questionType
        self.regexp = regexp
        self.regexpErrorMessage = regexpErrorMessage
        self.changePeriod = changePeriod
        self.isRequired = isRequired
        self.isVisible = isVisible
        self.isMultiSelect = isMultiSelect
        self.answerHandlers = answerHandlers
        self.isVisibleInRegistration = isVisibleInRegistration
        self.historyIsRecorded = historyIsRecorded
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case collectionId
        case name
        case order
        case isDeleted
        case isQuestion
        case logicalName
        case questionGroupId
        case questionType
        case regexp
        case regexpErrorMessage
        case changePeriod
        case isRequired
        case isVisible
        case isMultiSelect
        case answerHandlers
        case isVisibleInRegistration
        case historyIsRecorded
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(collectionId, forKey: .collectionId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(isQuestion, forKey: .isQuestion)
        try container.encodeIfPresent(logicalName, forKey: .logicalName)
        try container.encodeIfPresent(questionGroupId, forKey: .questionGroupId)
        try container.encodeIfPresent(questionType, forKey: .questionType)
        try container.encodeIfPresent(regexp, forKey: .regexp)
        try container.encodeIfPresent(regexpErrorMessage, forKey: .regexpErrorMessage)
        try container.encodeIfPresent(changePeriod, forKey: .changePeriod)
        try container.encodeIfPresent(isRequired, forKey: .isRequired)
        try container.encodeIfPresent(isVisible, forKey: .isVisible)
        try container.encodeIfPresent(isMultiSelect, forKey: .isMultiSelect)
        try container.encodeIfPresent(answerHandlers, forKey: .answerHandlers)
        try container.encodeIfPresent(isVisibleInRegistration, forKey: .isVisibleInRegistration)
        try container.encodeIfPresent(historyIsRecorded, forKey: .historyIsRecorded)
    }
}

