//
// StatusSystemAttributeViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ViewModel для статусной системы. */
public struct StatusSystemAttributeViewModel: Codable, JSONEncodable, Hashable {

    /** Идентификатор. */
    public var id: Int?
    /** Имя. */
    public var name: String?
    /** Порядковый номер. */
    public var order: Int?
    /** Логическое имя. */
    public var logicalName: String?
    /** История записывается. */
    public var historyIsRecorded: Bool?
    /** Статусы. */
    public var statuses: [SystemApiStatusViewModel]?
    /** Видимость. */
    public var isHidden: Bool?
    public var mergeMode: AttributesMergeMode?
    /** Удален ли атрибут. */
    public var isDeleted: Bool?
    /** Описание. */
    public var description: String?
    /** Идентификатор файла с описанием. */
    public var fileExternalId: UUID?
    public var statusUpdatePeriod: TimeUnit?
    public var counter: CounterViewModel?

    public init(id: Int? = nil, name: String? = nil, order: Int? = nil, logicalName: String? = nil, historyIsRecorded: Bool? = nil, statuses: [SystemApiStatusViewModel]? = nil, isHidden: Bool? = nil, mergeMode: AttributesMergeMode? = nil, isDeleted: Bool? = nil, description: String? = nil, fileExternalId: UUID? = nil, statusUpdatePeriod: TimeUnit? = nil, counter: CounterViewModel? = nil) {
        self.id = id
        self.name = name
        self.order = order
        self.logicalName = logicalName
        self.historyIsRecorded = historyIsRecorded
        self.statuses = statuses
        self.isHidden = isHidden
        self.mergeMode = mergeMode
        self.isDeleted = isDeleted
        self.description = description
        self.fileExternalId = fileExternalId
        self.statusUpdatePeriod = statusUpdatePeriod
        self.counter = counter
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case order
        case logicalName
        case historyIsRecorded
        case statuses
        case isHidden
        case mergeMode
        case isDeleted
        case description
        case fileExternalId
        case statusUpdatePeriod
        case counter
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(logicalName, forKey: .logicalName)
        try container.encodeIfPresent(historyIsRecorded, forKey: .historyIsRecorded)
        try container.encodeIfPresent(statuses, forKey: .statuses)
        try container.encodeIfPresent(isHidden, forKey: .isHidden)
        try container.encodeIfPresent(mergeMode, forKey: .mergeMode)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(fileExternalId, forKey: .fileExternalId)
        try container.encodeIfPresent(statusUpdatePeriod, forKey: .statusUpdatePeriod)
        try container.encodeIfPresent(counter, forKey: .counter)
    }
}

