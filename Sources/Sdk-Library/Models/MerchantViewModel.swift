//
// MerchantViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель с информацией о торговой точке. */
public struct MerchantViewModel: Codable, JSONEncodable, Hashable {

    /** Внутренний идентификатор торговой точки. */
    public var id: Int?
    /** Название торговой точки. */
    public var name: String?
    /** Внутреннее название торговой точки. */
    public var internalName: String?
    /** Uid (устаревший параметр, не использовать). */
    public var guid: UUID?
    /** Внутренний идентификатор торговой точки. */
    public var uid: UUID?
    /** Код торговой точки. */
    public var code: String?
    /** Внутренний идентификатор бренда. */
    public var brandId: Int?
    /** Внутренний идентификатор Партнера. */
    public var partnerId: Int?
    /** Название бренда. */
    public var brandName: String?
    /** Внутренний идентификатор каталога Партнера. */
    public var partnerCatalogId: Int?
    public var location: LocationDataModel?
    /** Признак архивности (true — архивная, false — неархивная). */
    public var isDeleted: Bool?
    /** URL сайта торговой точки. */
    public var url: String?
    /** Порядковый номер торговой точки. */
    public var order: Int?
    /** Описание торговой точки. */
    public var description: String?
    /** График работы торговой точки. */
    public var schedule: String?
    /** Контакты торговой точки. */
    public var contacts: String?
    /** Изображение торговой точки. */
    public var image: String?
    public var refundNegativeType: RefundNegativeType?
    /** Дополнительная информация о торговой точке. */
    public var additionalInfo: [MerchantAdditionalInfoViewModel]?
    /** The {Loymax.Api.Models.Partner.PaymentLimitViewModel}. */
    public var paymentLimits: [PaymentLimitViewModel]?

    public init(id: Int? = nil, name: String? = nil, internalName: String? = nil, guid: UUID? = nil, uid: UUID? = nil, code: String? = nil, brandId: Int? = nil, partnerId: Int? = nil, brandName: String? = nil, partnerCatalogId: Int? = nil, location: LocationDataModel? = nil, isDeleted: Bool? = nil, url: String? = nil, order: Int? = nil, description: String? = nil, schedule: String? = nil, contacts: String? = nil, image: String? = nil, refundNegativeType: RefundNegativeType? = nil, additionalInfo: [MerchantAdditionalInfoViewModel]? = nil, paymentLimits: [PaymentLimitViewModel]? = nil) {
        self.id = id
        self.name = name
        self.internalName = internalName
        self.guid = guid
        self.uid = uid
        self.code = code
        self.brandId = brandId
        self.partnerId = partnerId
        self.brandName = brandName
        self.partnerCatalogId = partnerCatalogId
        self.location = location
        self.isDeleted = isDeleted
        self.url = url
        self.order = order
        self.description = description
        self.schedule = schedule
        self.contacts = contacts
        self.image = image
        self.refundNegativeType = refundNegativeType
        self.additionalInfo = additionalInfo
        self.paymentLimits = paymentLimits
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case internalName
        case guid
        case uid
        case code
        case brandId
        case partnerId
        case brandName
        case partnerCatalogId
        case location
        case isDeleted
        case url
        case order
        case description
        case schedule
        case contacts
        case image
        case refundNegativeType
        case additionalInfo
        case paymentLimits
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(internalName, forKey: .internalName)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(uid, forKey: .uid)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(brandId, forKey: .brandId)
        try container.encodeIfPresent(partnerId, forKey: .partnerId)
        try container.encodeIfPresent(brandName, forKey: .brandName)
        try container.encodeIfPresent(partnerCatalogId, forKey: .partnerCatalogId)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(schedule, forKey: .schedule)
        try container.encodeIfPresent(contacts, forKey: .contacts)
        try container.encodeIfPresent(image, forKey: .image)
        try container.encodeIfPresent(refundNegativeType, forKey: .refundNegativeType)
        try container.encodeIfPresent(additionalInfo, forKey: .additionalInfo)
        try container.encodeIfPresent(paymentLimits, forKey: .paymentLimits)
    }
}

