//
// QuestionViewModelAnyOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct QuestionViewModelAnyOf: Codable, JSONEncodable, Hashable {

    /** Логическое имя вопроса. */
    public var logicalName: String?
    /** Внутренний идентификатор группы вопросов. */
    public var questionGroupId: Int?
    public var questionType: QuestionType?
    /** Регулярное выражение. */
    public var regexp: String?
    /** Текст сообщения об ошибке, получаемого при неудачной валидации через регулярное выражение. */
    public var regexpErrorMessage: String?
    /** Период времени в днях, в течение которого редактирование ответа на вопрос недоступно. */
    public var changePeriod: Int?
    /** Обязательность ответа на вопрос (true — да, false — нет). */
    public var isRequired: Bool?
    /** Отображение вопроса в анкете (true — да, false — нет). */
    public var isVisible: Bool?
    /** Возможность выбора строкового значения из нескольких (true — да, false — нет). */
    public var isMultiSelect: Bool?
    /** Обработчики ответа. */
    public var answerHandlers: [AnswerHandlerViewModel]?
    /** Отображение вопроса в анкете при регистрации (true — да, false — нет). */
    public var isVisibleInRegistration: Bool?
    /** Запись в истории (true — включена, false — выключена). */
    public var historyIsRecorded: Bool?

    public init(logicalName: String? = nil, questionGroupId: Int? = nil, questionType: QuestionType? = nil, regexp: String? = nil, regexpErrorMessage: String? = nil, changePeriod: Int? = nil, isRequired: Bool? = nil, isVisible: Bool? = nil, isMultiSelect: Bool? = nil, answerHandlers: [AnswerHandlerViewModel]? = nil, isVisibleInRegistration: Bool? = nil, historyIsRecorded: Bool? = nil) {
        self.logicalName = logicalName
        self.questionGroupId = questionGroupId
        self.questionType = questionType
        self.regexp = regexp
        self.regexpErrorMessage = regexpErrorMessage
        self.changePeriod = changePeriod
        self.isRequired = isRequired
        self.isVisible = isVisible
        self.isMultiSelect = isMultiSelect
        self.answerHandlers = answerHandlers
        self.isVisibleInRegistration = isVisibleInRegistration
        self.historyIsRecorded = historyIsRecorded
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case logicalName
        case questionGroupId
        case questionType
        case regexp
        case regexpErrorMessage
        case changePeriod
        case isRequired
        case isVisible
        case isMultiSelect
        case answerHandlers
        case isVisibleInRegistration
        case historyIsRecorded
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(logicalName, forKey: .logicalName)
        try container.encodeIfPresent(questionGroupId, forKey: .questionGroupId)
        try container.encodeIfPresent(questionType, forKey: .questionType)
        try container.encodeIfPresent(regexp, forKey: .regexp)
        try container.encodeIfPresent(regexpErrorMessage, forKey: .regexpErrorMessage)
        try container.encodeIfPresent(changePeriod, forKey: .changePeriod)
        try container.encodeIfPresent(isRequired, forKey: .isRequired)
        try container.encodeIfPresent(isVisible, forKey: .isVisible)
        try container.encodeIfPresent(isMultiSelect, forKey: .isMultiSelect)
        try container.encodeIfPresent(answerHandlers, forKey: .answerHandlers)
        try container.encodeIfPresent(isVisibleInRegistration, forKey: .isVisibleInRegistration)
        try container.encodeIfPresent(historyIsRecorded, forKey: .historyIsRecorded)
    }
}

