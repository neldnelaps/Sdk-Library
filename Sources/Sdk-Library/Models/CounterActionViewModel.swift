//
// CounterActionViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель для редактирования действия \&quot;Счётчик\&quot;. */
public struct CounterActionViewModel: Codable, JSONEncodable, Hashable {

    /** Id действия. Если указан, редактируется действие, иначе создается новое. */
    public var actionId: Int?
    public var actionType: ActionTypeViewModel?
    /** Порядок действия. */
    public var order: Int?
    /** Привязанный счётчик. */
    public var counterId: Int?
    /** Список моделей для счётчика. */
    public var targets: [String]?
    /** Величина изменения счётчика. */
    public var increment: Double?
    public var incrementType: IncrementType?
    public var variable: OfferEventContextVariableViewModel?
    public var operation: CounterOperationType?

    public init(actionId: Int? = nil, actionType: ActionTypeViewModel? = nil, order: Int? = nil, counterId: Int? = nil, targets: [String]? = nil, increment: Double? = nil, incrementType: IncrementType? = nil, variable: OfferEventContextVariableViewModel? = nil, operation: CounterOperationType? = nil) {
        self.actionId = actionId
        self.actionType = actionType
        self.order = order
        self.counterId = counterId
        self.targets = targets
        self.increment = increment
        self.incrementType = incrementType
        self.variable = variable
        self.operation = operation
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case actionId
        case actionType
        case order
        case counterId
        case targets
        case increment
        case incrementType
        case variable
        case operation
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(actionId, forKey: .actionId)
        try container.encodeIfPresent(actionType, forKey: .actionType)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(counterId, forKey: .counterId)
        try container.encodeIfPresent(targets, forKey: .targets)
        try container.encodeIfPresent(increment, forKey: .increment)
        try container.encodeIfPresent(incrementType, forKey: .incrementType)
        try container.encodeIfPresent(variable, forKey: .variable)
        try container.encodeIfPresent(operation, forKey: .operation)
    }
}

