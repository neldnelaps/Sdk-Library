//
// LimitTypeModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ViewModel типа лимита. */
public struct LimitTypeModel: Codable, JSONEncodable, Hashable {

    /** Название типа. */
    public var typeName: String?
    /** Описание. */
    public var title: String?
    /** Требует ли этот тип лимита указания валюты при настройке. */
    public var requireCurrency: Bool?
    /** Может ли этот на лимит быть настроен период. */
    public var canBeSettedPeriod: Bool?
    /** Может ли этот лимит быть настроен на конкретную карту. */
    public var canBeSettedOnCard: Bool?
    /** Может ли этот лимит быть настроен на конкретную кассу. */
    public var canBeSettedOnDevice: Bool?
    /** Может ли этот лимит быть настроен на конкретный телефон. */
    public var canBeSettedOnPhone: Bool?
    /** Может ли этот лимит быть настроен на конкретного пользователя. */
    public var canBeSettedOnUser: Bool?
    /** Зависит ли этот лимит от карты пользователя. */
    public var canWorkWithCard: Bool?
    /** Зависит ли этот лимит от идентификаторов пользователя. */
    public var canWorkWithIdentifiers: Bool?
    /** Зависит от наименования аpi метода. */
    public var canWorkWithApiMethod: Bool?
    /** Может ли этот лимит быть настроен на конкретное юридическое лицо. */
    public var canBeSettedOnLegal: Bool?
    /** Может ли этот лимит быть настроен на конкретный магазин. */
    public var canBeSettedOnMerchant: Bool?
    /** Зависит от зоны идентификатора. */
    public var canWorkWithIdentifierArea: Bool?
    /** Зависит от типа подписки. */
    public var canWorkWithSubscription: Bool?
    /** Зависит от канала рассылки. */
    public var canWorkWithChannel: Bool?
    /** Явный флаг, указывающий на наличие действия \"Блокировка счета\" у данного лимита. */
    public var canBlockAccounts: Bool?

    public init(typeName: String? = nil, title: String? = nil, requireCurrency: Bool? = nil, canBeSettedPeriod: Bool? = nil, canBeSettedOnCard: Bool? = nil, canBeSettedOnDevice: Bool? = nil, canBeSettedOnPhone: Bool? = nil, canBeSettedOnUser: Bool? = nil, canWorkWithCard: Bool? = nil, canWorkWithIdentifiers: Bool? = nil, canWorkWithApiMethod: Bool? = nil, canBeSettedOnLegal: Bool? = nil, canBeSettedOnMerchant: Bool? = nil, canWorkWithIdentifierArea: Bool? = nil, canWorkWithSubscription: Bool? = nil, canWorkWithChannel: Bool? = nil, canBlockAccounts: Bool? = nil) {
        self.typeName = typeName
        self.title = title
        self.requireCurrency = requireCurrency
        self.canBeSettedPeriod = canBeSettedPeriod
        self.canBeSettedOnCard = canBeSettedOnCard
        self.canBeSettedOnDevice = canBeSettedOnDevice
        self.canBeSettedOnPhone = canBeSettedOnPhone
        self.canBeSettedOnUser = canBeSettedOnUser
        self.canWorkWithCard = canWorkWithCard
        self.canWorkWithIdentifiers = canWorkWithIdentifiers
        self.canWorkWithApiMethod = canWorkWithApiMethod
        self.canBeSettedOnLegal = canBeSettedOnLegal
        self.canBeSettedOnMerchant = canBeSettedOnMerchant
        self.canWorkWithIdentifierArea = canWorkWithIdentifierArea
        self.canWorkWithSubscription = canWorkWithSubscription
        self.canWorkWithChannel = canWorkWithChannel
        self.canBlockAccounts = canBlockAccounts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case typeName
        case title
        case requireCurrency
        case canBeSettedPeriod
        case canBeSettedOnCard
        case canBeSettedOnDevice
        case canBeSettedOnPhone
        case canBeSettedOnUser
        case canWorkWithCard
        case canWorkWithIdentifiers
        case canWorkWithApiMethod
        case canBeSettedOnLegal
        case canBeSettedOnMerchant
        case canWorkWithIdentifierArea
        case canWorkWithSubscription
        case canWorkWithChannel
        case canBlockAccounts
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(typeName, forKey: .typeName)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(requireCurrency, forKey: .requireCurrency)
        try container.encodeIfPresent(canBeSettedPeriod, forKey: .canBeSettedPeriod)
        try container.encodeIfPresent(canBeSettedOnCard, forKey: .canBeSettedOnCard)
        try container.encodeIfPresent(canBeSettedOnDevice, forKey: .canBeSettedOnDevice)
        try container.encodeIfPresent(canBeSettedOnPhone, forKey: .canBeSettedOnPhone)
        try container.encodeIfPresent(canBeSettedOnUser, forKey: .canBeSettedOnUser)
        try container.encodeIfPresent(canWorkWithCard, forKey: .canWorkWithCard)
        try container.encodeIfPresent(canWorkWithIdentifiers, forKey: .canWorkWithIdentifiers)
        try container.encodeIfPresent(canWorkWithApiMethod, forKey: .canWorkWithApiMethod)
        try container.encodeIfPresent(canBeSettedOnLegal, forKey: .canBeSettedOnLegal)
        try container.encodeIfPresent(canBeSettedOnMerchant, forKey: .canBeSettedOnMerchant)
        try container.encodeIfPresent(canWorkWithIdentifierArea, forKey: .canWorkWithIdentifierArea)
        try container.encodeIfPresent(canWorkWithSubscription, forKey: .canWorkWithSubscription)
        try container.encodeIfPresent(canWorkWithChannel, forKey: .canWorkWithChannel)
        try container.encodeIfPresent(canBlockAccounts, forKey: .canBlockAccounts)
    }
}

