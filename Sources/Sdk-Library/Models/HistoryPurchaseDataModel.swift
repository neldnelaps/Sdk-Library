//
// HistoryPurchaseDataModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ViewModel исторической записи о покупке. */
public struct HistoryPurchaseDataModel: Codable, JSONEncodable, Hashable {

    public var amount: MoneyViewModel?
    /** Идентификатор покупки во внешних системах. */
    public var externalPurchaseId: String?
    /** Информация по товарам в чеке. */
    public var chequeItems: [HistoryChequeItemModel]?
    /** Информация о атрибутах чека. */
    public var chequeAdditionalAttributes: [HistoryChequeAdditionalAttributeModel]?
    /** Списания. */
    public var withdraws: [WithdrawDataModel]?
    /** Вознаграждения. */
    public var rewards: [RewardDataModel]?
    /** Является ли покупка \"Возвратом\". */
    public var isRefund: Bool?
    /** Номер чека. */
    public var chequeNumber: String?

    public init(amount: MoneyViewModel? = nil, externalPurchaseId: String? = nil, chequeItems: [HistoryChequeItemModel]? = nil, chequeAdditionalAttributes: [HistoryChequeAdditionalAttributeModel]? = nil, withdraws: [WithdrawDataModel]? = nil, rewards: [RewardDataModel]? = nil, isRefund: Bool? = nil, chequeNumber: String? = nil) {
        self.amount = amount
        self.externalPurchaseId = externalPurchaseId
        self.chequeItems = chequeItems
        self.chequeAdditionalAttributes = chequeAdditionalAttributes
        self.withdraws = withdraws
        self.rewards = rewards
        self.isRefund = isRefund
        self.chequeNumber = chequeNumber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amount
        case externalPurchaseId
        case chequeItems
        case chequeAdditionalAttributes
        case withdraws
        case rewards
        case isRefund
        case chequeNumber
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(externalPurchaseId, forKey: .externalPurchaseId)
        try container.encodeIfPresent(chequeItems, forKey: .chequeItems)
        try container.encodeIfPresent(chequeAdditionalAttributes, forKey: .chequeAdditionalAttributes)
        try container.encodeIfPresent(withdraws, forKey: .withdraws)
        try container.encodeIfPresent(rewards, forKey: .rewards)
        try container.encodeIfPresent(isRefund, forKey: .isRefund)
        try container.encodeIfPresent(chequeNumber, forKey: .chequeNumber)
    }
}

