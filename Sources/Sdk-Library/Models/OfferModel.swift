//
// OfferModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель акции. */
public struct OfferModel: Codable, JSONEncodable, Hashable {

    /** Идентификатор. */
    public var id: Int?
    /** Приоритет рекламных материалов. */
    public var priority: Int?
    /** Заголовок. */
    public var title: String?
    /** Детальное описание. */
    public var description: String?
    /** Краткое описание. */
    public var shortDescription: String?
    /** Начало действия. */
    public var begin: Date?
    /** Окончание действия. */
    public var end: Date?
    /** Вознаграждение. */
    public var rewardThumbnail: AnyCodable?
    /** Дополнительное изображение для вознаграждения. */
    public var rewardImageId: UUID?
    /** Бренды. */
    public var brandIds: [UUID]?
    /** Краткая информация о брендах. */
    public var brands: [BrandShortModel]?
    /** Бренд. */
    public var brandId: UUID?
    /** Изображения.  TODO: подумать о вынесе в отдельный REST метод: v1/communication/offers/{id}/images. */
    public var images: [ImageViewModel]?
    /** Условия акции. */
    public var instructions: [String]?
    /** Количество магазинов, в которых проходит акция. */
    public var merchantsCount: Int?

    public init(id: Int? = nil, priority: Int? = nil, title: String? = nil, description: String? = nil, shortDescription: String? = nil, begin: Date? = nil, end: Date? = nil, rewardThumbnail: AnyCodable? = nil, rewardImageId: UUID? = nil, brandIds: [UUID]? = nil, brands: [BrandShortModel]? = nil, brandId: UUID? = nil, images: [ImageViewModel]? = nil, instructions: [String]? = nil, merchantsCount: Int? = nil) {
        self.id = id
        self.priority = priority
        self.title = title
        self.description = description
        self.shortDescription = shortDescription
        self.begin = begin
        self.end = end
        self.rewardThumbnail = rewardThumbnail
        self.rewardImageId = rewardImageId
        self.brandIds = brandIds
        self.brands = brands
        self.brandId = brandId
        self.images = images
        self.instructions = instructions
        self.merchantsCount = merchantsCount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case priority
        case title
        case description
        case shortDescription
        case begin
        case end
        case rewardThumbnail
        case rewardImageId
        case brandIds
        case brands
        case brandId
        case images
        case instructions
        case merchantsCount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(priority, forKey: .priority)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(shortDescription, forKey: .shortDescription)
        try container.encodeIfPresent(begin, forKey: .begin)
        try container.encodeIfPresent(end, forKey: .end)
        try container.encodeIfPresent(rewardThumbnail, forKey: .rewardThumbnail)
        try container.encodeIfPresent(rewardImageId, forKey: .rewardImageId)
        try container.encodeIfPresent(brandIds, forKey: .brandIds)
        try container.encodeIfPresent(brands, forKey: .brands)
        try container.encodeIfPresent(brandId, forKey: .brandId)
        try container.encodeIfPresent(images, forKey: .images)
        try container.encodeIfPresent(instructions, forKey: .instructions)
        try container.encodeIfPresent(merchantsCount, forKey: .merchantsCount)
    }
}

