//
// CurrencyFilter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Фильтр для валют. */
public struct CurrencyFilter: Codable, JSONEncodable, Hashable {

    /** Начало выборки. */
    public var from: Int?
    /** Количество. */
    public var count: Int?
    /** Подстрока для поиска по имени. */
    public var name: String?
    public var type: CurrencyTypeEnum?
    public var mode: ArchivedState?
    /** Список партнеров, по которым будут отфильтрованны валюты. */
    public var partnerIds: [Int]?
    /** Признак, что первой в списке будет возвращаться валюта по умолчанию. */
    public var defaultFirst: Bool?
    /** Список идентификаторов для первоочередного выбора. */
    public var sortingIds: [Int]?
    /** Внешний идентификатор валюты. */
    public var externalId: String?

    public init(from: Int? = nil, count: Int? = nil, name: String? = nil, type: CurrencyTypeEnum? = nil, mode: ArchivedState? = nil, partnerIds: [Int]? = nil, defaultFirst: Bool? = nil, sortingIds: [Int]? = nil, externalId: String? = nil) {
        self.from = from
        self.count = count
        self.name = name
        self.type = type
        self.mode = mode
        self.partnerIds = partnerIds
        self.defaultFirst = defaultFirst
        self.sortingIds = sortingIds
        self.externalId = externalId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case from
        case count
        case name
        case type
        case mode
        case partnerIds
        case defaultFirst
        case sortingIds
        case externalId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(mode, forKey: .mode)
        try container.encodeIfPresent(partnerIds, forKey: .partnerIds)
        try container.encodeIfPresent(defaultFirst, forKey: .defaultFirst)
        try container.encodeIfPresent(sortingIds, forKey: .sortingIds)
        try container.encodeIfPresent(externalId, forKey: .externalId)
    }
}

