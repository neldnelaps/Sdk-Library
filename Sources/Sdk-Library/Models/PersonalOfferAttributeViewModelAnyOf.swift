//
// PersonalOfferAttributeViewModelAnyOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PersonalOfferAttributeViewModelAnyOf: Codable, JSONEncodable, Hashable {

    /** Дата начала формирования пользовательского списка товаров. */
    public var startFillDate: Date?
    /** Дата окончания формирования пользовательского списка товаров. */
    public var endFillDate: Date?
    /** Максимальное количество товаров, которые может выбрать пользователь. */
    public var maxGoodsCount: Int?
    /** Количество товаров, которые может выбрать пользователь по умолчанию. */
    public var defaultGoodsCount: Int?
    public var goodsGroup: GoodsGroupViewModel?
    public var periodType: TimePeriodType?
    public var periodClearCell: PeriodClearCell?
    public var dayOfWeek: DayOfWeek?
    /** День месяца. */
    public var dayOfMonth: Int?
    /** Дней в периоде. */
    public var daysOfPeriod: Int?
    /** Количество выбранных товаров. */
    public var goodsCount: Int?
    public var brand: BrandViewModel?

    public init(startFillDate: Date? = nil, endFillDate: Date? = nil, maxGoodsCount: Int? = nil, defaultGoodsCount: Int? = nil, goodsGroup: GoodsGroupViewModel? = nil, periodType: TimePeriodType? = nil, periodClearCell: PeriodClearCell? = nil, dayOfWeek: DayOfWeek? = nil, dayOfMonth: Int? = nil, daysOfPeriod: Int? = nil, goodsCount: Int? = nil, brand: BrandViewModel? = nil) {
        self.startFillDate = startFillDate
        self.endFillDate = endFillDate
        self.maxGoodsCount = maxGoodsCount
        self.defaultGoodsCount = defaultGoodsCount
        self.goodsGroup = goodsGroup
        self.periodType = periodType
        self.periodClearCell = periodClearCell
        self.dayOfWeek = dayOfWeek
        self.dayOfMonth = dayOfMonth
        self.daysOfPeriod = daysOfPeriod
        self.goodsCount = goodsCount
        self.brand = brand
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case startFillDate
        case endFillDate
        case maxGoodsCount
        case defaultGoodsCount
        case goodsGroup
        case periodType
        case periodClearCell
        case dayOfWeek
        case dayOfMonth
        case daysOfPeriod
        case goodsCount
        case brand
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(startFillDate, forKey: .startFillDate)
        try container.encodeIfPresent(endFillDate, forKey: .endFillDate)
        try container.encodeIfPresent(maxGoodsCount, forKey: .maxGoodsCount)
        try container.encodeIfPresent(defaultGoodsCount, forKey: .defaultGoodsCount)
        try container.encodeIfPresent(goodsGroup, forKey: .goodsGroup)
        try container.encodeIfPresent(periodType, forKey: .periodType)
        try container.encodeIfPresent(periodClearCell, forKey: .periodClearCell)
        try container.encodeIfPresent(dayOfWeek, forKey: .dayOfWeek)
        try container.encodeIfPresent(dayOfMonth, forKey: .dayOfMonth)
        try container.encodeIfPresent(daysOfPeriod, forKey: .daysOfPeriod)
        try container.encodeIfPresent(goodsCount, forKey: .goodsCount)
        try container.encodeIfPresent(brand, forKey: .brand)
    }
}

