//
// ChequePositionParameterFilterViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель для фильтра по дополнительным параметрам чековых позиций. */
public struct ChequePositionParameterFilterViewModel: Codable, JSONEncodable, Hashable {

    public var id: Int?
    public var name: String?
    public var isDeletedFilterType: Bool?
    public var processParameters: String?
    /** Имя параметра. */
    public var parameterName: String?
    /** Ожидаемые значения параметра. */
    public var parameterExpectedValues: [String]?
    /** Отрицание (значение параметра не должно быть среди ожидаемых). */
    public var negative: Bool?

    public init(id: Int? = nil, name: String? = nil, isDeletedFilterType: Bool? = nil, processParameters: String? = nil, parameterName: String? = nil, parameterExpectedValues: [String]? = nil, negative: Bool? = nil) {
        self.id = id
        self.name = name
        self.isDeletedFilterType = isDeletedFilterType
        self.processParameters = processParameters
        self.parameterName = parameterName
        self.parameterExpectedValues = parameterExpectedValues
        self.negative = negative
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case isDeletedFilterType
        case processParameters
        case parameterName
        case parameterExpectedValues
        case negative
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isDeletedFilterType, forKey: .isDeletedFilterType)
        try container.encodeIfPresent(processParameters, forKey: .processParameters)
        try container.encodeIfPresent(parameterName, forKey: .parameterName)
        try container.encodeIfPresent(parameterExpectedValues, forKey: .parameterExpectedValues)
        try container.encodeIfPresent(negative, forKey: .negative)
    }
}

