//
// DeviceBriefViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Краткая модель представления кассы. */
public struct DeviceBriefViewModel: Codable, JSONEncodable, Hashable {

    /** Id девайса. */
    public var id: Int?
    /** Код. */
    public var code: String?
    /** Uid. */
    public var uid: UUID?
    /** Код. */
    public var logicalId: String?
    /** Название устройства. */
    public var name: String?
    /** Статус устройства (true — архивный, false — неархивный). */
    public var isDeleted: Bool?
    /** Внутренний идентификатор Партнера. */
    public var partnerId: Int?
    /** Внутренний идентификатор магазина. */
    public var merchantId: Int?

    public init(id: Int? = nil, code: String? = nil, uid: UUID? = nil, logicalId: String? = nil, name: String? = nil, isDeleted: Bool? = nil, partnerId: Int? = nil, merchantId: Int? = nil) {
        self.id = id
        self.code = code
        self.uid = uid
        self.logicalId = logicalId
        self.name = name
        self.isDeleted = isDeleted
        self.partnerId = partnerId
        self.merchantId = merchantId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case code
        case uid
        case logicalId
        case name
        case isDeleted
        case partnerId
        case merchantId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(uid, forKey: .uid)
        try container.encodeIfPresent(logicalId, forKey: .logicalId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(partnerId, forKey: .partnerId)
        try container.encodeIfPresent(merchantId, forKey: .merchantId)
    }
}

