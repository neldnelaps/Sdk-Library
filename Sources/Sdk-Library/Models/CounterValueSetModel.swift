//
// CounterValueSetModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель для обновления значения счетчика. */
public struct CounterValueSetModel: Codable, JSONEncodable, Hashable {

    public var targetsValues: CounterValueTargetsModel?
    public var counterValueOperation: CounterOperationType?
    /** Текущее значение счетчика. */
    public var expectedCurrentValue: Double?
    /** Новое значение счетчика. */
    public var value: Double?
    /** Комментарий. */
    public var comment: String?

    public init(targetsValues: CounterValueTargetsModel? = nil, counterValueOperation: CounterOperationType? = nil, expectedCurrentValue: Double? = nil, value: Double? = nil, comment: String? = nil) {
        self.targetsValues = targetsValues
        self.counterValueOperation = counterValueOperation
        self.expectedCurrentValue = expectedCurrentValue
        self.value = value
        self.comment = comment
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case targetsValues
        case counterValueOperation
        case expectedCurrentValue
        case value
        case comment
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(targetsValues, forKey: .targetsValues)
        try container.encodeIfPresent(counterValueOperation, forKey: .counterValueOperation)
        try container.encodeIfPresent(expectedCurrentValue, forKey: .expectedCurrentValue)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(comment, forKey: .comment)
    }
}

