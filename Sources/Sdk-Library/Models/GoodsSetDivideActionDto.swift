//
// GoodsSetDivideActionDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Действие \&quot;Разбиение по наборам\&quot;. */
public struct GoodsSetDivideActionDto: Codable, JSONEncodable, Hashable {

    /** Порядковый номер действия в цепочке. */
    public var order: Int?
    /** Id действия в цепочке. */
    public var id: String?
    public var actionCreateMeEvent: ActionCreateMeEventDto?
    public var event: GoodsSetProcessEventDto?
    /** Источник данных о товарах, из который будет формироваться набор. */
    public var compositionInfo: [GoodsSetItemDto]?
    public var targetFieldType: ChequeGoodsSetType?
    public var chequeGoodsSortType: ChequeGoodsSortType?
    /** Логическое имя персонального атрибута. */
    public var personalAttribute: String?
    /** Идентификатор атрибута товара. */
    public var goodsAttributeId: Int?

    public init(order: Int? = nil, id: String? = nil, actionCreateMeEvent: ActionCreateMeEventDto? = nil, event: GoodsSetProcessEventDto? = nil, compositionInfo: [GoodsSetItemDto]? = nil, targetFieldType: ChequeGoodsSetType? = nil, chequeGoodsSortType: ChequeGoodsSortType? = nil, personalAttribute: String? = nil, goodsAttributeId: Int? = nil) {
        self.order = order
        self.id = id
        self.actionCreateMeEvent = actionCreateMeEvent
        self.event = event
        self.compositionInfo = compositionInfo
        self.targetFieldType = targetFieldType
        self.chequeGoodsSortType = chequeGoodsSortType
        self.personalAttribute = personalAttribute
        self.goodsAttributeId = goodsAttributeId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case order
        case id
        case actionCreateMeEvent
        case event
        case compositionInfo
        case targetFieldType
        case chequeGoodsSortType
        case personalAttribute
        case goodsAttributeId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(actionCreateMeEvent, forKey: .actionCreateMeEvent)
        try container.encodeIfPresent(event, forKey: .event)
        try container.encodeIfPresent(compositionInfo, forKey: .compositionInfo)
        try container.encodeIfPresent(targetFieldType, forKey: .targetFieldType)
        try container.encodeIfPresent(chequeGoodsSortType, forKey: .chequeGoodsSortType)
        try container.encodeIfPresent(personalAttribute, forKey: .personalAttribute)
        try container.encodeIfPresent(goodsAttributeId, forKey: .goodsAttributeId)
    }
}

