//
// IteratorActionDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Действие \&quot;Итератор\&quot;. */
public struct IteratorActionDto: Codable, JSONEncodable, Hashable {

    /** Порядковый номер действия в цепочке. */
    public var order: Int?
    /** Id действия в цепочке. */
    public var id: String?
    public var actionCreateMeEvent: ActionCreateMeEventDto?
    /** Значение. */
    public var value: String?
    /** Имя переменной итерации. */
    public var iterationVariableName: String?
    public var iteratorProcess: IteratorProcessEventDto?

    public init(order: Int? = nil, id: String? = nil, actionCreateMeEvent: ActionCreateMeEventDto? = nil, value: String? = nil, iterationVariableName: String? = nil, iteratorProcess: IteratorProcessEventDto? = nil) {
        self.order = order
        self.id = id
        self.actionCreateMeEvent = actionCreateMeEvent
        self.value = value
        self.iterationVariableName = iterationVariableName
        self.iteratorProcess = iteratorProcess
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case order
        case id
        case actionCreateMeEvent
        case value
        case iterationVariableName
        case iteratorProcess
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(actionCreateMeEvent, forKey: .actionCreateMeEvent)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(iterationVariableName, forKey: .iterationVariableName)
        try container.encodeIfPresent(iteratorProcess, forKey: .iteratorProcess)
    }
}

