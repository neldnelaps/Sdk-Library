//
// ConfigurationDeployFilter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Фильтр для деплоя. */
public struct ConfigurationDeployFilter: Codable, JSONEncodable, Hashable {

    /** Дата С. */
    public var fromDate: Date?
    /** Дата По. */
    public var toDate: Date?
    /** Подстрока для поиска по версионности. */
    public var packageVersionSubstring: String?
    /** Успешность выполнения. */
    public var isSuccess: Bool?
    /** Подстрока для поиска по автору. */
    public var authorSubstring: String?
    /** Внешний идентификатор. */
    public var externalId: UUID?

    public init(fromDate: Date? = nil, toDate: Date? = nil, packageVersionSubstring: String? = nil, isSuccess: Bool? = nil, authorSubstring: String? = nil, externalId: UUID? = nil) {
        self.fromDate = fromDate
        self.toDate = toDate
        self.packageVersionSubstring = packageVersionSubstring
        self.isSuccess = isSuccess
        self.authorSubstring = authorSubstring
        self.externalId = externalId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fromDate
        case toDate
        case packageVersionSubstring
        case isSuccess
        case authorSubstring
        case externalId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fromDate, forKey: .fromDate)
        try container.encodeIfPresent(toDate, forKey: .toDate)
        try container.encodeIfPresent(packageVersionSubstring, forKey: .packageVersionSubstring)
        try container.encodeIfPresent(isSuccess, forKey: .isSuccess)
        try container.encodeIfPresent(authorSubstring, forKey: .authorSubstring)
        try container.encodeIfPresent(externalId, forKey: .externalId)
    }
}

