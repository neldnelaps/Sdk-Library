//
// GoodsCatalogLeafViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель узла каталога товаров. */
public struct GoodsCatalogLeafViewModel: Codable, JSONEncodable, Hashable {

    /** Название. */
    public var name: String?
    /** Id. */
    public var id: Int?
    /** Код товара. */
    public var goodsCode: String?
    /** Id родительского каталога. */
    public var parentID: Int?
    /** Включено или нет. */
    public var isEnabled: Bool?
    public var checkState: CheckState?
    /** Идентификатор партнера. */
    public var partnerId: String?
    /** Идентификатор каталога. */
    public var catalogId: Int?
    /** Список значений атрибутов. */
    public var attributeValues: [GoodsAttributeValueViewModel]?
    /** Дата загрузки. */
    public var loadDate: Date?
    /** Список штрихкодов. */
    public var barCodes: [String]?
    /** Путь к элементу в каталоге товаров. */
    public var path: String?
    /** Общий код товара, если таковой имеется. */
    public var commonCode: String?

    public init(name: String? = nil, id: Int? = nil, goodsCode: String? = nil, parentID: Int? = nil, isEnabled: Bool? = nil, checkState: CheckState? = nil, partnerId: String? = nil, catalogId: Int? = nil, attributeValues: [GoodsAttributeValueViewModel]? = nil, loadDate: Date? = nil, barCodes: [String]? = nil, path: String? = nil, commonCode: String? = nil) {
        self.name = name
        self.id = id
        self.goodsCode = goodsCode
        self.parentID = parentID
        self.isEnabled = isEnabled
        self.checkState = checkState
        self.partnerId = partnerId
        self.catalogId = catalogId
        self.attributeValues = attributeValues
        self.loadDate = loadDate
        self.barCodes = barCodes
        self.path = path
        self.commonCode = commonCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case id
        case goodsCode
        case parentID
        case isEnabled
        case checkState
        case partnerId
        case catalogId
        case attributeValues
        case loadDate
        case barCodes
        case path
        case commonCode
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(goodsCode, forKey: .goodsCode)
        try container.encodeIfPresent(parentID, forKey: .parentID)
        try container.encodeIfPresent(isEnabled, forKey: .isEnabled)
        try container.encodeIfPresent(checkState, forKey: .checkState)
        try container.encodeIfPresent(partnerId, forKey: .partnerId)
        try container.encodeIfPresent(catalogId, forKey: .catalogId)
        try container.encodeIfPresent(attributeValues, forKey: .attributeValues)
        try container.encodeIfPresent(loadDate, forKey: .loadDate)
        try container.encodeIfPresent(barCodes, forKey: .barCodes)
        try container.encodeIfPresent(path, forKey: .path)
        try container.encodeIfPresent(commonCode, forKey: .commonCode)
    }
}

