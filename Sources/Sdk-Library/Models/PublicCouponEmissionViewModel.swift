//
// PublicCouponEmissionViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ViewModel публичного выпуска купонов. */
public struct PublicCouponEmissionViewModel: Codable, JSONEncodable, Hashable {

    /** Внутренний идентификатор выпуска купонов. */
    public var id: Int?
    /** Название выпуска купонов. */
    public var title: String?
    public var partner: PartnerViewModel?
    /** Признак состояния выпуска купонов (true - удален, false - не удален). */
    public var isArchived: Bool?
    /** Дата создания выпуска купонов. */
    public var creationDate: Date?
    /** Дата изменения выпуска купонов. */
    public var changeDate: Date?
    /** Краткое описание выпуск купонов. */
    public var shortDescription: String?
    /** Детальное описание выпуск купонов. */
    public var description: String?
    public var createdByPerson: SystemUserViewModel?
    public var lastEditByPerson: SystemUserViewModel?
    /** Количество купонов в выпуске. */
    public var counts: [KeyValuePairOfCouponStateAndInt32]?
    public var loyaltyProgram: LoyaltyProgramInfoViewModel?
    /** Время активации (в минутах). */
    public var activationDelay: Int?
    /** Время сгорания (в минутах). */
    public var expirationDelay: Int?
    public var activationPeriodType: PeriodType?
    public var expirationPeriodType: PeriodType?
    /** Точное время активации. */
    public var certainActivationDate: Date?
    /** Точное время сгорания. */
    public var certainExpirationDate: Date?
    /** Внешний идентификатор выпуска купонов. */
    public var uid: UUID?
    /** Код. */
    public var code: String?

    public init(id: Int? = nil, title: String? = nil, partner: PartnerViewModel? = nil, isArchived: Bool? = nil, creationDate: Date? = nil, changeDate: Date? = nil, shortDescription: String? = nil, description: String? = nil, createdByPerson: SystemUserViewModel? = nil, lastEditByPerson: SystemUserViewModel? = nil, counts: [KeyValuePairOfCouponStateAndInt32]? = nil, loyaltyProgram: LoyaltyProgramInfoViewModel? = nil, activationDelay: Int? = nil, expirationDelay: Int? = nil, activationPeriodType: PeriodType? = nil, expirationPeriodType: PeriodType? = nil, certainActivationDate: Date? = nil, certainExpirationDate: Date? = nil, uid: UUID? = nil, code: String? = nil) {
        self.id = id
        self.title = title
        self.partner = partner
        self.isArchived = isArchived
        self.creationDate = creationDate
        self.changeDate = changeDate
        self.shortDescription = shortDescription
        self.description = description
        self.createdByPerson = createdByPerson
        self.lastEditByPerson = lastEditByPerson
        self.counts = counts
        self.loyaltyProgram = loyaltyProgram
        self.activationDelay = activationDelay
        self.expirationDelay = expirationDelay
        self.activationPeriodType = activationPeriodType
        self.expirationPeriodType = expirationPeriodType
        self.certainActivationDate = certainActivationDate
        self.certainExpirationDate = certainExpirationDate
        self.uid = uid
        self.code = code
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case partner
        case isArchived
        case creationDate
        case changeDate
        case shortDescription
        case description
        case createdByPerson
        case lastEditByPerson
        case counts
        case loyaltyProgram
        case activationDelay
        case expirationDelay
        case activationPeriodType
        case expirationPeriodType
        case certainActivationDate
        case certainExpirationDate
        case uid
        case code
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(partner, forKey: .partner)
        try container.encodeIfPresent(isArchived, forKey: .isArchived)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(changeDate, forKey: .changeDate)
        try container.encodeIfPresent(shortDescription, forKey: .shortDescription)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(createdByPerson, forKey: .createdByPerson)
        try container.encodeIfPresent(lastEditByPerson, forKey: .lastEditByPerson)
        try container.encodeIfPresent(counts, forKey: .counts)
        try container.encodeIfPresent(loyaltyProgram, forKey: .loyaltyProgram)
        try container.encodeIfPresent(activationDelay, forKey: .activationDelay)
        try container.encodeIfPresent(expirationDelay, forKey: .expirationDelay)
        try container.encodeIfPresent(activationPeriodType, forKey: .activationPeriodType)
        try container.encodeIfPresent(expirationPeriodType, forKey: .expirationPeriodType)
        try container.encodeIfPresent(certainActivationDate, forKey: .certainActivationDate)
        try container.encodeIfPresent(certainExpirationDate, forKey: .certainExpirationDate)
        try container.encodeIfPresent(uid, forKey: .uid)
        try container.encodeIfPresent(code, forKey: .code)
    }
}

