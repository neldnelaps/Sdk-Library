//
// SystemApiCardInfoModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация о карте. */
public struct SystemApiCardInfoModel: Codable, JSONEncodable, Hashable {

    /** Ифентификатор. */
    public var id: Int?
    public var state: CardState?
    /** Номер карты. */
    public var number: String?
    /** Баркод. */
    public var barCode: String?
    /** Заблокирована или нет. */
    public var block: Bool?
    /** Дата истечения карты. */
    public var expiryDate: Date?
    public var cardCategory: CardCategoryInfoBriefModel?
    public var cardOwnerInfo: UserInfoBase?
    /** Признак необходимости проверки пароля (true-проверка необходима, false-проверка не требуется). */
    public var passwordRequired: Bool?
    /** Является ли карта удаленной (true-карта удалена, false-карта не удалена). */
    public var isDeleted: Bool?
    /** Дата замены карты. */
    public var replacementDate: Date?
    public var replacementSource: ReplaceCardSource?
    /** PIN-код. */
    public var pinCode: String?
    public var strips: StripNumbers?
    /** Возможна ли разблокировка карты (true-разблокировка возможна, false-разблокировка невозможна). */
    public var canUnBlocking: Bool?
    /** Признак необходимости CVC-кода для проверки карты (true-CVC-код необходим, false-CVC-код не требуется). */
    public var isCvcCodeRequired: Bool?

    public init(id: Int? = nil, state: CardState? = nil, number: String? = nil, barCode: String? = nil, block: Bool? = nil, expiryDate: Date? = nil, cardCategory: CardCategoryInfoBriefModel? = nil, cardOwnerInfo: UserInfoBase? = nil, passwordRequired: Bool? = nil, isDeleted: Bool? = nil, replacementDate: Date? = nil, replacementSource: ReplaceCardSource? = nil, pinCode: String? = nil, strips: StripNumbers? = nil, canUnBlocking: Bool? = nil, isCvcCodeRequired: Bool? = nil) {
        self.id = id
        self.state = state
        self.number = number
        self.barCode = barCode
        self.block = block
        self.expiryDate = expiryDate
        self.cardCategory = cardCategory
        self.cardOwnerInfo = cardOwnerInfo
        self.passwordRequired = passwordRequired
        self.isDeleted = isDeleted
        self.replacementDate = replacementDate
        self.replacementSource = replacementSource
        self.pinCode = pinCode
        self.strips = strips
        self.canUnBlocking = canUnBlocking
        self.isCvcCodeRequired = isCvcCodeRequired
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case state
        case number
        case barCode
        case block
        case expiryDate
        case cardCategory
        case cardOwnerInfo
        case passwordRequired
        case isDeleted
        case replacementDate
        case replacementSource
        case pinCode
        case strips
        case canUnBlocking
        case isCvcCodeRequired
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(barCode, forKey: .barCode)
        try container.encodeIfPresent(block, forKey: .block)
        try container.encodeIfPresent(expiryDate, forKey: .expiryDate)
        try container.encodeIfPresent(cardCategory, forKey: .cardCategory)
        try container.encodeIfPresent(cardOwnerInfo, forKey: .cardOwnerInfo)
        try container.encodeIfPresent(passwordRequired, forKey: .passwordRequired)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(replacementDate, forKey: .replacementDate)
        try container.encodeIfPresent(replacementSource, forKey: .replacementSource)
        try container.encodeIfPresent(pinCode, forKey: .pinCode)
        try container.encodeIfPresent(strips, forKey: .strips)
        try container.encodeIfPresent(canUnBlocking, forKey: .canUnBlocking)
        try container.encodeIfPresent(isCvcCodeRequired, forKey: .isCvcCodeRequired)
    }
}

