//
// FavoriteGoodsActionViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** View модель дейтвия сообщение на чек. */
public struct FavoriteGoodsActionViewModel: Codable, JSONEncodable, Hashable {

    /** Id действия. Если указан, редактируется действие, иначе создается новое. */
    public var actionId: Int?
    public var actionType: ActionTypeViewModel?
    /** Порядок действия. */
    public var order: Int?
    public var changeType: FavoriteGoodsChangeType?
    /** Значение. */
    public var value: Int?
    /** Флаг очистки ячеек. */
    public var clearCells: Bool?
    /** Идентификатор атрибута персонального предложения. */
    public var attributeId: Int?

    public init(actionId: Int? = nil, actionType: ActionTypeViewModel? = nil, order: Int? = nil, changeType: FavoriteGoodsChangeType? = nil, value: Int? = nil, clearCells: Bool? = nil, attributeId: Int? = nil) {
        self.actionId = actionId
        self.actionType = actionType
        self.order = order
        self.changeType = changeType
        self.value = value
        self.clearCells = clearCells
        self.attributeId = attributeId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case actionId
        case actionType
        case order
        case changeType
        case value
        case clearCells
        case attributeId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(actionId, forKey: .actionId)
        try container.encodeIfPresent(actionType, forKey: .actionType)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(changeType, forKey: .changeType)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(clearCells, forKey: .clearCells)
        try container.encodeIfPresent(attributeId, forKey: .attributeId)
    }
}

