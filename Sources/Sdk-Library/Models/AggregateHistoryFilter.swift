//
// AggregateHistoryFilter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Параметры получения агрегированной истории. */
public struct AggregateHistoryFilter: Codable, JSONEncodable, Hashable {

    /** Начальная дата периода в формате 0000-00-00T00 00 00Z, с которой необходимо вывести историю. */
    public var fromDate: Date?
    /** Конечная дата периода в формате 0000-00-00T00 00 00Z, до которой необходимо вывести историю. */
    public var toDate: Date?
    /** Внутренний идентификатор карты (будет получена история только по этой карте). */
    public var cardId: Int?
    public var historyItemType: HistoryItemType?
    /** По текущему клиенту (true), по группе клиента (false). */
    public var currentUser: Bool?

    public init(fromDate: Date? = nil, toDate: Date? = nil, cardId: Int? = nil, historyItemType: HistoryItemType? = nil, currentUser: Bool? = nil) {
        self.fromDate = fromDate
        self.toDate = toDate
        self.cardId = cardId
        self.historyItemType = historyItemType
        self.currentUser = currentUser
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fromDate
        case toDate
        case cardId
        case historyItemType
        case currentUser
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fromDate, forKey: .fromDate)
        try container.encodeIfPresent(toDate, forKey: .toDate)
        try container.encodeIfPresent(cardId, forKey: .cardId)
        try container.encodeIfPresent(historyItemType, forKey: .historyItemType)
        try container.encodeIfPresent(currentUser, forKey: .currentUser)
    }
}

