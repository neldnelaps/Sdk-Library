//
// CalculationModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CalculationModel: Codable, JSONEncodable, Hashable {

    public var calculationState: CalculationState?
    public var isAbleToCalculate: Bool?
    public var calculationDate: Date?
    public var personsCount: Int?
    public var errorReason: String?
    public var isCalculated: Bool?

    public init(calculationState: CalculationState? = nil, isAbleToCalculate: Bool? = nil, calculationDate: Date? = nil, personsCount: Int? = nil, errorReason: String? = nil, isCalculated: Bool? = nil) {
        self.calculationState = calculationState
        self.isAbleToCalculate = isAbleToCalculate
        self.calculationDate = calculationDate
        self.personsCount = personsCount
        self.errorReason = errorReason
        self.isCalculated = isCalculated
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case calculationState
        case isAbleToCalculate
        case calculationDate
        case personsCount
        case errorReason
        case isCalculated
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(calculationState, forKey: .calculationState)
        try container.encodeIfPresent(isAbleToCalculate, forKey: .isAbleToCalculate)
        try container.encodeIfPresent(calculationDate, forKey: .calculationDate)
        try container.encodeIfPresent(personsCount, forKey: .personsCount)
        try container.encodeIfPresent(errorReason, forKey: .errorReason)
        try container.encodeIfPresent(isCalculated, forKey: .isCalculated)
    }
}

