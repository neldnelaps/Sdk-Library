//
// SubscriptionViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель подписки. */
public struct SubscriptionViewModel: Codable, JSONEncodable, Hashable {

    /** Тип подписки. */
    public var typeId: Int?
    /** Название типа подписки. */
    public var typeName: String?
    /** Внешний идентификатор рассылки. */
    public var externalId: String?
    public var smsNotification: SubscriptionNotificationStateModel?
    public var emailNotification: SubscriptionNotificationStateModel?
    public var pushNotification: SubscriptionNotificationStateModel?
    public var viberNotification: SubscriptionNotificationStateModel?
    public var socialNetworksNotification: SubscriptionNotificationStateModel?
    public var chatBotNotification: SubscriptionNotificationStateModel?

    public init(typeId: Int? = nil, typeName: String? = nil, externalId: String? = nil, smsNotification: SubscriptionNotificationStateModel? = nil, emailNotification: SubscriptionNotificationStateModel? = nil, pushNotification: SubscriptionNotificationStateModel? = nil, viberNotification: SubscriptionNotificationStateModel? = nil, socialNetworksNotification: SubscriptionNotificationStateModel? = nil, chatBotNotification: SubscriptionNotificationStateModel? = nil) {
        self.typeId = typeId
        self.typeName = typeName
        self.externalId = externalId
        self.smsNotification = smsNotification
        self.emailNotification = emailNotification
        self.pushNotification = pushNotification
        self.viberNotification = viberNotification
        self.socialNetworksNotification = socialNetworksNotification
        self.chatBotNotification = chatBotNotification
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case typeId
        case typeName
        case externalId
        case smsNotification
        case emailNotification
        case pushNotification
        case viberNotification
        case socialNetworksNotification
        case chatBotNotification
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(typeId, forKey: .typeId)
        try container.encodeIfPresent(typeName, forKey: .typeName)
        try container.encodeIfPresent(externalId, forKey: .externalId)
        try container.encodeIfPresent(smsNotification, forKey: .smsNotification)
        try container.encodeIfPresent(emailNotification, forKey: .emailNotification)
        try container.encodeIfPresent(pushNotification, forKey: .pushNotification)
        try container.encodeIfPresent(viberNotification, forKey: .viberNotification)
        try container.encodeIfPresent(socialNetworksNotification, forKey: .socialNetworksNotification)
        try container.encodeIfPresent(chatBotNotification, forKey: .chatBotNotification)
    }
}

