//
// ChequePositionViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель чековой позиции по покупке. */
public struct ChequePositionViewModel: Codable, JSONEncodable, Hashable {

    /** Имя. */
    public var gooodName: String?
    /** Номер позиции. */
    public var posId: Int?
    /** Код. */
    public var barcode: String?
    /** Количество. */
    public var quantity: Double?
    public var amount: MoneyViewModel?
    public var correction: MoneyViewModel?
    /** Начисления/скидки. */
    public var discounts: [PositionDiscountViewModel]?
    /** Возвраты. */
    public var refunds: [PositionRefundsViewModel]?
    /** Атрибуты. */
    public var attributes: [ChequePositionAttributeViewModel]?

    public init(gooodName: String? = nil, posId: Int? = nil, barcode: String? = nil, quantity: Double? = nil, amount: MoneyViewModel? = nil, correction: MoneyViewModel? = nil, discounts: [PositionDiscountViewModel]? = nil, refunds: [PositionRefundsViewModel]? = nil, attributes: [ChequePositionAttributeViewModel]? = nil) {
        self.gooodName = gooodName
        self.posId = posId
        self.barcode = barcode
        self.quantity = quantity
        self.amount = amount
        self.correction = correction
        self.discounts = discounts
        self.refunds = refunds
        self.attributes = attributes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case gooodName
        case posId
        case barcode
        case quantity
        case amount
        case correction
        case discounts
        case refunds
        case attributes
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(gooodName, forKey: .gooodName)
        try container.encodeIfPresent(posId, forKey: .posId)
        try container.encodeIfPresent(barcode, forKey: .barcode)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(correction, forKey: .correction)
        try container.encodeIfPresent(discounts, forKey: .discounts)
        try container.encodeIfPresent(refunds, forKey: .refunds)
        try container.encodeIfPresent(attributes, forKey: .attributes)
    }
}

