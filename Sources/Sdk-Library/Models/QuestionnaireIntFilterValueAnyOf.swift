//
// QuestionnaireIntFilterValueAnyOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct QuestionnaireIntFilterValueAnyOf: Codable, JSONEncodable, Hashable {

    public var _operator: ComparisonOperator?
    public var mode: DateMode?
    public var periodicity: DatePeriodicity?
    public var unit: DateUnit?
    public var startOfPeriod: DateUnit?
    /** Первое значение. */
    public var firstValue: Int?
    /** Второе значение. */
    public var secondValue: Int?

    public init(_operator: ComparisonOperator? = nil, mode: DateMode? = nil, periodicity: DatePeriodicity? = nil, unit: DateUnit? = nil, startOfPeriod: DateUnit? = nil, firstValue: Int? = nil, secondValue: Int? = nil) {
        self._operator = _operator
        self.mode = mode
        self.periodicity = periodicity
        self.unit = unit
        self.startOfPeriod = startOfPeriod
        self.firstValue = firstValue
        self.secondValue = secondValue
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _operator = "operator"
        case mode
        case periodicity
        case unit
        case startOfPeriod
        case firstValue
        case secondValue
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_operator, forKey: ._operator)
        try container.encodeIfPresent(mode, forKey: .mode)
        try container.encodeIfPresent(periodicity, forKey: .periodicity)
        try container.encodeIfPresent(unit, forKey: .unit)
        try container.encodeIfPresent(startOfPeriod, forKey: .startOfPeriod)
        try container.encodeIfPresent(firstValue, forKey: .firstValue)
        try container.encodeIfPresent(secondValue, forKey: .secondValue)
    }
}

