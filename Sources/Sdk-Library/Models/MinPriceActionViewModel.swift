//
// MinPriceActionViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель для редактирования действия \&quot;Установка мин. цены\&quot;. */
public struct MinPriceActionViewModel: Codable, JSONEncodable, Hashable {

    /** Id действия. Если указан, редактируется действие, иначе создается новое. */
    public var actionId: Int?
    public var actionType: ActionTypeViewModel?
    /** Порядок действия. */
    public var order: Int?
    /** Процент. */
    public var percent: Double?
    /** Фиксированная сумма. */
    public var fixedAmount: Double?
    /** Фиксированная цена. */
    public var fixedPrice: Double?
    /** Идентификатор атрибута каталога. */
    public var goodsAttributeId: Int?

    public init(actionId: Int? = nil, actionType: ActionTypeViewModel? = nil, order: Int? = nil, percent: Double? = nil, fixedAmount: Double? = nil, fixedPrice: Double? = nil, goodsAttributeId: Int? = nil) {
        self.actionId = actionId
        self.actionType = actionType
        self.order = order
        self.percent = percent
        self.fixedAmount = fixedAmount
        self.fixedPrice = fixedPrice
        self.goodsAttributeId = goodsAttributeId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case actionId
        case actionType
        case order
        case percent
        case fixedAmount
        case fixedPrice
        case goodsAttributeId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(actionId, forKey: .actionId)
        try container.encodeIfPresent(actionType, forKey: .actionType)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(percent, forKey: .percent)
        try container.encodeIfPresent(fixedAmount, forKey: .fixedAmount)
        try container.encodeIfPresent(fixedPrice, forKey: .fixedPrice)
        try container.encodeIfPresent(goodsAttributeId, forKey: .goodsAttributeId)
    }
}

