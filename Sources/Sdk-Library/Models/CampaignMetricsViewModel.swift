//
// CampaignMetricsViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** View-модель показателей кампании. */
public struct CampaignMetricsViewModel: Codable, JSONEncodable, Hashable {

    /** Товарооборот. */
    public var turnover: Double?
    /** Выручка. */
    public var proceeds: Double?
    /** Скидка. */
    public var discount: Double?
    /** Скидка в %. */
    public var discountPercent: Double?
    /** Начисленно бонусов. */
    public var accruedSum: Double?
    /** Начислено бонусов в %. */
    public var accruedPercent: Double?
    /** Оплата бонусами. */
    public var paymentBonusesSum: Double?
    /** Оплата валютой кассы. */
    public var paymentMoneySum: Double?
    /** Кол-во покупателей. */
    public var activeClientsCount: Double?
    /** Кол-во чеков. */
    public var chequesCount: Double?
    /** Кол-во покупок на 1ого клиента. */
    public var purchasesPerClient: Double?
    /** Средняя сумма чека. */
    public var averageChequeSum: Double?
    /** Сумма покупок на 1ого клиента. */
    public var purchasesSumPerClient: Double?
    /** Сумма скидок на 1ого клиента. */
    public var discountsSumPerClient: Double?
    /** Сумма начислений на 1ого клиента. */
    public var cashbacksSumPerClient: Double?
    /** Сумма оплаты бонусами на 1ого клиента. */
    public var paymentsSumPerClient: Double?
    /** Бонусов списано от товарооборота. */
    public var withdrawsPercentByTurnover: Double?
    /** Кол-во списанных бонусов к кол-ву начисленных. */
    public var withdrawsPercentByAccruals: Double?
    /** Численность ЦА. */
    public var targetGroupCapacity: Int?
    /** Затраты рекламы и коммуникации на 1ого клиента. */
    public var advertisingExpensesPerClient: Double?
    /** Затраты рекламы и коммуникации на 1ого клиента в %. */
    public var advertisingExpensesPerClientPercent: Double?
    /** Стоимость привлечения 1ого клиента. */
    public var attractionExpensesPerClient: Double?
    /** Стоимость привлечения 1ого клиента в %. */
    public var attractionExpensesPerClientPercent: Double?
    /** Конверсия. */
    public var conversion: Double?
    /** Затраты ИТОГ. */
    public var expensesSum: Double?
    /** Затраты ИТОГ в %. */
    public var expensesPercent: Double?
    /** Затраты на коммуникацию. */
    public var communicationExpenses: Double?
    /** Затраты на рекламные материалы. */
    public var advertisingExpenses: Double?

    public init(turnover: Double? = nil, proceeds: Double? = nil, discount: Double? = nil, discountPercent: Double? = nil, accruedSum: Double? = nil, accruedPercent: Double? = nil, paymentBonusesSum: Double? = nil, paymentMoneySum: Double? = nil, activeClientsCount: Double? = nil, chequesCount: Double? = nil, purchasesPerClient: Double? = nil, averageChequeSum: Double? = nil, purchasesSumPerClient: Double? = nil, discountsSumPerClient: Double? = nil, cashbacksSumPerClient: Double? = nil, paymentsSumPerClient: Double? = nil, withdrawsPercentByTurnover: Double? = nil, withdrawsPercentByAccruals: Double? = nil, targetGroupCapacity: Int? = nil, advertisingExpensesPerClient: Double? = nil, advertisingExpensesPerClientPercent: Double? = nil, attractionExpensesPerClient: Double? = nil, attractionExpensesPerClientPercent: Double? = nil, conversion: Double? = nil, expensesSum: Double? = nil, expensesPercent: Double? = nil, communicationExpenses: Double? = nil, advertisingExpenses: Double? = nil) {
        self.turnover = turnover
        self.proceeds = proceeds
        self.discount = discount
        self.discountPercent = discountPercent
        self.accruedSum = accruedSum
        self.accruedPercent = accruedPercent
        self.paymentBonusesSum = paymentBonusesSum
        self.paymentMoneySum = paymentMoneySum
        self.activeClientsCount = activeClientsCount
        self.chequesCount = chequesCount
        self.purchasesPerClient = purchasesPerClient
        self.averageChequeSum = averageChequeSum
        self.purchasesSumPerClient = purchasesSumPerClient
        self.discountsSumPerClient = discountsSumPerClient
        self.cashbacksSumPerClient = cashbacksSumPerClient
        self.paymentsSumPerClient = paymentsSumPerClient
        self.withdrawsPercentByTurnover = withdrawsPercentByTurnover
        self.withdrawsPercentByAccruals = withdrawsPercentByAccruals
        self.targetGroupCapacity = targetGroupCapacity
        self.advertisingExpensesPerClient = advertisingExpensesPerClient
        self.advertisingExpensesPerClientPercent = advertisingExpensesPerClientPercent
        self.attractionExpensesPerClient = attractionExpensesPerClient
        self.attractionExpensesPerClientPercent = attractionExpensesPerClientPercent
        self.conversion = conversion
        self.expensesSum = expensesSum
        self.expensesPercent = expensesPercent
        self.communicationExpenses = communicationExpenses
        self.advertisingExpenses = advertisingExpenses
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case turnover
        case proceeds
        case discount
        case discountPercent
        case accruedSum
        case accruedPercent
        case paymentBonusesSum
        case paymentMoneySum
        case activeClientsCount
        case chequesCount
        case purchasesPerClient
        case averageChequeSum
        case purchasesSumPerClient
        case discountsSumPerClient
        case cashbacksSumPerClient
        case paymentsSumPerClient
        case withdrawsPercentByTurnover
        case withdrawsPercentByAccruals
        case targetGroupCapacity
        case advertisingExpensesPerClient
        case advertisingExpensesPerClientPercent
        case attractionExpensesPerClient
        case attractionExpensesPerClientPercent
        case conversion
        case expensesSum
        case expensesPercent
        case communicationExpenses
        case advertisingExpenses
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(turnover, forKey: .turnover)
        try container.encodeIfPresent(proceeds, forKey: .proceeds)
        try container.encodeIfPresent(discount, forKey: .discount)
        try container.encodeIfPresent(discountPercent, forKey: .discountPercent)
        try container.encodeIfPresent(accruedSum, forKey: .accruedSum)
        try container.encodeIfPresent(accruedPercent, forKey: .accruedPercent)
        try container.encodeIfPresent(paymentBonusesSum, forKey: .paymentBonusesSum)
        try container.encodeIfPresent(paymentMoneySum, forKey: .paymentMoneySum)
        try container.encodeIfPresent(activeClientsCount, forKey: .activeClientsCount)
        try container.encodeIfPresent(chequesCount, forKey: .chequesCount)
        try container.encodeIfPresent(purchasesPerClient, forKey: .purchasesPerClient)
        try container.encodeIfPresent(averageChequeSum, forKey: .averageChequeSum)
        try container.encodeIfPresent(purchasesSumPerClient, forKey: .purchasesSumPerClient)
        try container.encodeIfPresent(discountsSumPerClient, forKey: .discountsSumPerClient)
        try container.encodeIfPresent(cashbacksSumPerClient, forKey: .cashbacksSumPerClient)
        try container.encodeIfPresent(paymentsSumPerClient, forKey: .paymentsSumPerClient)
        try container.encodeIfPresent(withdrawsPercentByTurnover, forKey: .withdrawsPercentByTurnover)
        try container.encodeIfPresent(withdrawsPercentByAccruals, forKey: .withdrawsPercentByAccruals)
        try container.encodeIfPresent(targetGroupCapacity, forKey: .targetGroupCapacity)
        try container.encodeIfPresent(advertisingExpensesPerClient, forKey: .advertisingExpensesPerClient)
        try container.encodeIfPresent(advertisingExpensesPerClientPercent, forKey: .advertisingExpensesPerClientPercent)
        try container.encodeIfPresent(attractionExpensesPerClient, forKey: .attractionExpensesPerClient)
        try container.encodeIfPresent(attractionExpensesPerClientPercent, forKey: .attractionExpensesPerClientPercent)
        try container.encodeIfPresent(conversion, forKey: .conversion)
        try container.encodeIfPresent(expensesSum, forKey: .expensesSum)
        try container.encodeIfPresent(expensesPercent, forKey: .expensesPercent)
        try container.encodeIfPresent(communicationExpenses, forKey: .communicationExpenses)
        try container.encodeIfPresent(advertisingExpenses, forKey: .advertisingExpenses)
    }
}

