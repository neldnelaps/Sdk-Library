//
// OfferBriefModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель для списка акций. */
public struct OfferBriefModel: Codable, JSONEncodable, Hashable {

    /** Внутренний идентификатор акции. */
    public var id: Int?
    /** Внутренний идентификатор версии акции. */
    public var versionId: Int?
    /** Название акции. */
    public var name: String?
    /** Дата начала действия акции. */
    public var beginTime: Date?
    /** Дата окончания действия акции. (Null — если акция действует бесконечно долго, начиная с BeginTime). */
    public var endTime: Date?
    public var operations: Operation?
    /** Дата создания акции. */
    public var creationDate: Date?
    /** Дата последних изменений. */
    public var lastChangeDate: Date?
    /** Пользователь, создавший акцию. */
    public var creator: String?
    /** Пользователь, который последним редактировал акцию. */
    public var lastChangeUser: String?
    /** Описание акции. */
    public var description: String?
    /** Список Партнеров акции. */
    public var partners: [PartnerModel]?
    /** Признак суммируемости акции (true — акция суммируемая, false — акция несуммируемая). */
    public var isSum: Bool?
    /** Приоритет акции. */
    public var priority: Int?
    /** Является ли акция черновиком (true — акция является черновиком, false — акция не является черновиком). */
    public var isDraft: Bool?
    /** Является ли акция базовой (для управления базовыми акциями требуется специальное право. True — акция базовая, false — акция не базовая). */
    public var isDefault: Bool?
    public var offerCategory: OfferCategoryViewModel?
    public var draftState: OfferDraftState?
    /** Дата последнего сохранения черновика. */
    public var draftLastChangeDate: Date?
    /** Внешний идентификатор акции (например, если акция была загружена через шлюз). */
    public var externalID: String?
    public var viewState: OfferViewState?
    public var state: OfferState?
    /** Признак наличия подтвержденных версий акции (true — акция еще не имеет подтвержденных версий и в периоде требуется выводить слово \"Планируется\"). */
    public var planned: Bool?
    /** Причина отклонения версии как черновика акции. */
    public var draftRejectReason: String?
    /** Программы лояльности. */
    public var loyaltyPrograms: [PartnerLoyaltyProgramModel]?

    public init(id: Int? = nil, versionId: Int? = nil, name: String? = nil, beginTime: Date? = nil, endTime: Date? = nil, operations: Operation? = nil, creationDate: Date? = nil, lastChangeDate: Date? = nil, creator: String? = nil, lastChangeUser: String? = nil, description: String? = nil, partners: [PartnerModel]? = nil, isSum: Bool? = nil, priority: Int? = nil, isDraft: Bool? = nil, isDefault: Bool? = nil, offerCategory: OfferCategoryViewModel? = nil, draftState: OfferDraftState? = nil, draftLastChangeDate: Date? = nil, externalID: String? = nil, viewState: OfferViewState? = nil, state: OfferState? = nil, planned: Bool? = nil, draftRejectReason: String? = nil, loyaltyPrograms: [PartnerLoyaltyProgramModel]? = nil) {
        self.id = id
        self.versionId = versionId
        self.name = name
        self.beginTime = beginTime
        self.endTime = endTime
        self.operations = operations
        self.creationDate = creationDate
        self.lastChangeDate = lastChangeDate
        self.creator = creator
        self.lastChangeUser = lastChangeUser
        self.description = description
        self.partners = partners
        self.isSum = isSum
        self.priority = priority
        self.isDraft = isDraft
        self.isDefault = isDefault
        self.offerCategory = offerCategory
        self.draftState = draftState
        self.draftLastChangeDate = draftLastChangeDate
        self.externalID = externalID
        self.viewState = viewState
        self.state = state
        self.planned = planned
        self.draftRejectReason = draftRejectReason
        self.loyaltyPrograms = loyaltyPrograms
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case versionId
        case name
        case beginTime
        case endTime
        case operations
        case creationDate
        case lastChangeDate
        case creator
        case lastChangeUser
        case description
        case partners
        case isSum
        case priority
        case isDraft
        case isDefault
        case offerCategory
        case draftState
        case draftLastChangeDate
        case externalID
        case viewState
        case state
        case planned
        case draftRejectReason
        case loyaltyPrograms
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(versionId, forKey: .versionId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(beginTime, forKey: .beginTime)
        try container.encodeIfPresent(endTime, forKey: .endTime)
        try container.encodeIfPresent(operations, forKey: .operations)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(lastChangeDate, forKey: .lastChangeDate)
        try container.encodeIfPresent(creator, forKey: .creator)
        try container.encodeIfPresent(lastChangeUser, forKey: .lastChangeUser)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(partners, forKey: .partners)
        try container.encodeIfPresent(isSum, forKey: .isSum)
        try container.encodeIfPresent(priority, forKey: .priority)
        try container.encodeIfPresent(isDraft, forKey: .isDraft)
        try container.encodeIfPresent(isDefault, forKey: .isDefault)
        try container.encodeIfPresent(offerCategory, forKey: .offerCategory)
        try container.encodeIfPresent(draftState, forKey: .draftState)
        try container.encodeIfPresent(draftLastChangeDate, forKey: .draftLastChangeDate)
        try container.encodeIfPresent(externalID, forKey: .externalID)
        try container.encodeIfPresent(viewState, forKey: .viewState)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(planned, forKey: .planned)
        try container.encodeIfPresent(draftRejectReason, forKey: .draftRejectReason)
        try container.encodeIfPresent(loyaltyPrograms, forKey: .loyaltyPrograms)
    }
}

