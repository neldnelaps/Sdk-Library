//
// CommunicationOfferFilter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Фильтр для акции. */
public struct CommunicationOfferFilter: Codable, JSONEncodable, Hashable {

    public var communicationOfferState: CommunicationOfferState?
    /** Дата С. */
    public var fromDate: Date?
    /** Дата По. */
    public var toDate: Date?
    /** Набор идентификаторов брендов. */
    public var brandIds: [Int]?
    /** Набор идентификаторов категорий рекламных материалов. */
    public var categoriesIds: [Int]?
    /** Подстрока для поиска по имени. */
    public var name: String?
    public var isArchived: ArchivedState?
    /** Минимальный приоритет. */
    public var priorityMin: Int?
    /** Максимальный приоритет. */
    public var priorityMax: Int?
    /** Идентификатор маркетинговой кампании. */
    public var marketingCampaignId: Int?
    /** Исключает все акции для которых установлена компания. */
    public var excludeMarketingCampaign: Bool?
    /** Со скольки. */
    public var from: Int?
    /** Сколько. */
    public var count: Int?
    public var type: CommunicationOfferType?

    public init(communicationOfferState: CommunicationOfferState? = nil, fromDate: Date? = nil, toDate: Date? = nil, brandIds: [Int]? = nil, categoriesIds: [Int]? = nil, name: String? = nil, isArchived: ArchivedState? = nil, priorityMin: Int? = nil, priorityMax: Int? = nil, marketingCampaignId: Int? = nil, excludeMarketingCampaign: Bool? = nil, from: Int? = nil, count: Int? = nil, type: CommunicationOfferType? = nil) {
        self.communicationOfferState = communicationOfferState
        self.fromDate = fromDate
        self.toDate = toDate
        self.brandIds = brandIds
        self.categoriesIds = categoriesIds
        self.name = name
        self.isArchived = isArchived
        self.priorityMin = priorityMin
        self.priorityMax = priorityMax
        self.marketingCampaignId = marketingCampaignId
        self.excludeMarketingCampaign = excludeMarketingCampaign
        self.from = from
        self.count = count
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case communicationOfferState
        case fromDate
        case toDate
        case brandIds
        case categoriesIds
        case name
        case isArchived
        case priorityMin
        case priorityMax
        case marketingCampaignId
        case excludeMarketingCampaign
        case from
        case count
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(communicationOfferState, forKey: .communicationOfferState)
        try container.encodeIfPresent(fromDate, forKey: .fromDate)
        try container.encodeIfPresent(toDate, forKey: .toDate)
        try container.encodeIfPresent(brandIds, forKey: .brandIds)
        try container.encodeIfPresent(categoriesIds, forKey: .categoriesIds)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isArchived, forKey: .isArchived)
        try container.encodeIfPresent(priorityMin, forKey: .priorityMin)
        try container.encodeIfPresent(priorityMax, forKey: .priorityMax)
        try container.encodeIfPresent(marketingCampaignId, forKey: .marketingCampaignId)
        try container.encodeIfPresent(excludeMarketingCampaign, forKey: .excludeMarketingCampaign)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(type, forKey: .type)
    }
}

