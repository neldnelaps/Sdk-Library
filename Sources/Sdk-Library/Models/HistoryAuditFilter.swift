//
// HistoryAuditFilter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct HistoryAuditFilter: Codable, JSONEncodable, Hashable {

    public var dateFrom: Date?
    public var dateTo: Date?
    public var cardNumber: String?
    public var auditTypes: [String]?
    public var personId: Int?
    public var isUser: Bool?
    public var clientAuditsRequired: Bool?

    public init(dateFrom: Date? = nil, dateTo: Date? = nil, cardNumber: String? = nil, auditTypes: [String]? = nil, personId: Int? = nil, isUser: Bool? = nil, clientAuditsRequired: Bool? = nil) {
        self.dateFrom = dateFrom
        self.dateTo = dateTo
        self.cardNumber = cardNumber
        self.auditTypes = auditTypes
        self.personId = personId
        self.isUser = isUser
        self.clientAuditsRequired = clientAuditsRequired
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dateFrom
        case dateTo
        case cardNumber
        case auditTypes
        case personId
        case isUser
        case clientAuditsRequired
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(dateFrom, forKey: .dateFrom)
        try container.encodeIfPresent(dateTo, forKey: .dateTo)
        try container.encodeIfPresent(cardNumber, forKey: .cardNumber)
        try container.encodeIfPresent(auditTypes, forKey: .auditTypes)
        try container.encodeIfPresent(personId, forKey: .personId)
        try container.encodeIfPresent(isUser, forKey: .isUser)
        try container.encodeIfPresent(clientAuditsRequired, forKey: .clientAuditsRequired)
    }
}

