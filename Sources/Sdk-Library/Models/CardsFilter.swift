//
// CardsFilter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Фильтр для выпуска карт. */
public struct CardsFilter: Codable, JSONEncodable, Hashable {

    /** Начало выборки. */
    public var from: Int?
    /** Количество. */
    public var count: Int?
    /** Список ПЛ для фильтра по ПЛ. */
    public var loyaltyPrograms: [Int]?
    /** Текст содержащийся в описании. */
    public var nameText: String?
    public var packingState: CardEmissionPackingState?
    /** Тип активации. */
    public var activationType: Bool?
    public var cardEmissionType: CardEmissionType?

    public init(from: Int? = nil, count: Int? = nil, loyaltyPrograms: [Int]? = nil, nameText: String? = nil, packingState: CardEmissionPackingState? = nil, activationType: Bool? = nil, cardEmissionType: CardEmissionType? = nil) {
        self.from = from
        self.count = count
        self.loyaltyPrograms = loyaltyPrograms
        self.nameText = nameText
        self.packingState = packingState
        self.activationType = activationType
        self.cardEmissionType = cardEmissionType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case from
        case count
        case loyaltyPrograms
        case nameText
        case packingState
        case activationType
        case cardEmissionType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(loyaltyPrograms, forKey: .loyaltyPrograms)
        try container.encodeIfPresent(nameText, forKey: .nameText)
        try container.encodeIfPresent(packingState, forKey: .packingState)
        try container.encodeIfPresent(activationType, forKey: .activationType)
        try container.encodeIfPresent(cardEmissionType, forKey: .cardEmissionType)
    }
}

