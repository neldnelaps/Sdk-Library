//
// RegistrationViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель для регистрации. */
public struct RegistrationViewModel: Codable, JSONEncodable, Hashable {

    public var phone: SetPhoneViewModel?
    public var email: SetEmailViewModel?
    public var acceptTenderOffer: AcceptTenderOfferViewModel?
    public var acceptPersonalDataProcessing: AcceptPersonalDataProcessingViewModel?
    public var questionsAnswer: AnswerQuestionsViewModel?
    /** Признак необходимости выпуска виртуальной карты. */
    public var emitVirtual: Bool?
    public var setCard: SetCardModel?
    public var subscriptionsConfirm: ConfirmSubscriptionsViewModel?
    /** Источник завершения регистрации. */
    public var registrationSourceId: String?
    public var referrer: ReferrerInfo?
    /** Массив общих атрибутов и их значений, устанавливаемых Клиенту после регистрации. */
    public var commonAttributes: [CustomerAttributeValueViewModel]?
    /** Установка статусов в разрезе статусных систем. */
    public var statusSystemAttributes: [CustomerStatusValueViewModel]?
    /** Признак необходимости уведомлять клиента о событиях регистрации (установка пароля, активация карты). */
    public var needToNotify: Bool?

    public init(phone: SetPhoneViewModel? = nil, email: SetEmailViewModel? = nil, acceptTenderOffer: AcceptTenderOfferViewModel? = nil, acceptPersonalDataProcessing: AcceptPersonalDataProcessingViewModel? = nil, questionsAnswer: AnswerQuestionsViewModel? = nil, emitVirtual: Bool? = nil, setCard: SetCardModel? = nil, subscriptionsConfirm: ConfirmSubscriptionsViewModel? = nil, registrationSourceId: String? = nil, referrer: ReferrerInfo? = nil, commonAttributes: [CustomerAttributeValueViewModel]? = nil, statusSystemAttributes: [CustomerStatusValueViewModel]? = nil, needToNotify: Bool? = nil) {
        self.phone = phone
        self.email = email
        self.acceptTenderOffer = acceptTenderOffer
        self.acceptPersonalDataProcessing = acceptPersonalDataProcessing
        self.questionsAnswer = questionsAnswer
        self.emitVirtual = emitVirtual
        self.setCard = setCard
        self.subscriptionsConfirm = subscriptionsConfirm
        self.registrationSourceId = registrationSourceId
        self.referrer = referrer
        self.commonAttributes = commonAttributes
        self.statusSystemAttributes = statusSystemAttributes
        self.needToNotify = needToNotify
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case phone
        case email
        case acceptTenderOffer
        case acceptPersonalDataProcessing
        case questionsAnswer
        case emitVirtual
        case setCard
        case subscriptionsConfirm
        case registrationSourceId
        case referrer
        case commonAttributes
        case statusSystemAttributes
        case needToNotify
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(acceptTenderOffer, forKey: .acceptTenderOffer)
        try container.encodeIfPresent(acceptPersonalDataProcessing, forKey: .acceptPersonalDataProcessing)
        try container.encodeIfPresent(questionsAnswer, forKey: .questionsAnswer)
        try container.encodeIfPresent(emitVirtual, forKey: .emitVirtual)
        try container.encodeIfPresent(setCard, forKey: .setCard)
        try container.encodeIfPresent(subscriptionsConfirm, forKey: .subscriptionsConfirm)
        try container.encodeIfPresent(registrationSourceId, forKey: .registrationSourceId)
        try container.encodeIfPresent(referrer, forKey: .referrer)
        try container.encodeIfPresent(commonAttributes, forKey: .commonAttributes)
        try container.encodeIfPresent(statusSystemAttributes, forKey: .statusSystemAttributes)
        try container.encodeIfPresent(needToNotify, forKey: .needToNotify)
    }
}

