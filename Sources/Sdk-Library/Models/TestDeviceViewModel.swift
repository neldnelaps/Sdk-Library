//
// TestDeviceViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация о тестовой кассе. */
public struct TestDeviceViewModel: Codable, JSONEncodable, Hashable {

    /** Id девайса. */
    public var id: Int?
    /** Код. */
    public var code: String?
    /** Uid. */
    public var uid: UUID?
    /** Код. */
    public var logicalId: String?
    /** Магазин. */
    public var merchantInfo: String?
    /** Юридическое лицо. */
    public var legalInfo: String?
    /** Валюты кассы. */
    public var currency: String?

    public init(id: Int? = nil, code: String? = nil, uid: UUID? = nil, logicalId: String? = nil, merchantInfo: String? = nil, legalInfo: String? = nil, currency: String? = nil) {
        self.id = id
        self.code = code
        self.uid = uid
        self.logicalId = logicalId
        self.merchantInfo = merchantInfo
        self.legalInfo = legalInfo
        self.currency = currency
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case code
        case uid
        case logicalId
        case merchantInfo
        case legalInfo
        case currency
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(uid, forKey: .uid)
        try container.encodeIfPresent(logicalId, forKey: .logicalId)
        try container.encodeIfPresent(merchantInfo, forKey: .merchantInfo)
        try container.encodeIfPresent(legalInfo, forKey: .legalInfo)
        try container.encodeIfPresent(currency, forKey: .currency)
    }
}

