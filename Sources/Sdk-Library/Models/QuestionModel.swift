//
// QuestionModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель вопроса. */
public struct QuestionModel: Codable, JSONEncodable, Hashable {

    public var type: QuestionnaireItemModelType?
    /** Идентификатор. */
    public var id: Int?
    /** Название. */
    public var name: String?
    /** Порядок. */
    public var order: Int?
    public var questionType: QuestionModelType?
    /** Логическое имя. */
    public var logicalName: String?
    /** Регулярное выражение для дополнительной валидации. */
    public var regexp: String?
    /** Сообщение в случае не удачной валидации через регулярное выражение. */
    public var regexpErrorMessage: String?
    /** Обязательный. */
    public var isRequired: Bool?
    /** Только для чтения. */
    public var isReadOnly: Bool?
    /** Множественный выбор. */
    public var isMultiSelect: Bool?
    /** Фиксированные ответы. */
    public var fixedAnswers: [QuestionFixedAnswerModel]?
    public var answer: QuestionAnswerModel?
    /** Видимый при регистрации. */
    public var isVisibleInRegistration: Bool?

    public init(type: QuestionnaireItemModelType? = nil, id: Int? = nil, name: String? = nil, order: Int? = nil, questionType: QuestionModelType? = nil, logicalName: String? = nil, regexp: String? = nil, regexpErrorMessage: String? = nil, isRequired: Bool? = nil, isReadOnly: Bool? = nil, isMultiSelect: Bool? = nil, fixedAnswers: [QuestionFixedAnswerModel]? = nil, answer: QuestionAnswerModel? = nil, isVisibleInRegistration: Bool? = nil) {
        self.type = type
        self.id = id
        self.name = name
        self.order = order
        self.questionType = questionType
        self.logicalName = logicalName
        self.regexp = regexp
        self.regexpErrorMessage = regexpErrorMessage
        self.isRequired = isRequired
        self.isReadOnly = isReadOnly
        self.isMultiSelect = isMultiSelect
        self.fixedAnswers = fixedAnswers
        self.answer = answer
        self.isVisibleInRegistration = isVisibleInRegistration
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case id
        case name
        case order
        case questionType
        case logicalName
        case regexp
        case regexpErrorMessage
        case isRequired
        case isReadOnly
        case isMultiSelect
        case fixedAnswers
        case answer
        case isVisibleInRegistration
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(questionType, forKey: .questionType)
        try container.encodeIfPresent(logicalName, forKey: .logicalName)
        try container.encodeIfPresent(regexp, forKey: .regexp)
        try container.encodeIfPresent(regexpErrorMessage, forKey: .regexpErrorMessage)
        try container.encodeIfPresent(isRequired, forKey: .isRequired)
        try container.encodeIfPresent(isReadOnly, forKey: .isReadOnly)
        try container.encodeIfPresent(isMultiSelect, forKey: .isMultiSelect)
        try container.encodeIfPresent(fixedAnswers, forKey: .fixedAnswers)
        try container.encodeIfPresent(answer, forKey: .answer)
        try container.encodeIfPresent(isVisibleInRegistration, forKey: .isVisibleInRegistration)
    }
}

