//
// RequestPersonIdentifierViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель для отображения. */
public struct RequestPersonIdentifierViewModel: Codable, JSONEncodable, Hashable {

    /** Идентификатор. */
    public var id: Int?
    public var type: IdentifierType?
    /** Маска. */
    public var mask: String?
    /** Позиция. */
    public var checkOrder: Int?
    /** ReplacePattern. */
    public var replacePattern: String?
    /** Идентификатор партнера. */
    public var partnerId: Int?
    /** Флаг логического удаления. */
    public var isDeleted: Bool?
    public var loyaltyProgram: LoyaltyProgramInfoViewModel?

    public init(id: Int? = nil, type: IdentifierType? = nil, mask: String? = nil, checkOrder: Int? = nil, replacePattern: String? = nil, partnerId: Int? = nil, isDeleted: Bool? = nil, loyaltyProgram: LoyaltyProgramInfoViewModel? = nil) {
        self.id = id
        self.type = type
        self.mask = mask
        self.checkOrder = checkOrder
        self.replacePattern = replacePattern
        self.partnerId = partnerId
        self.isDeleted = isDeleted
        self.loyaltyProgram = loyaltyProgram
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case mask
        case checkOrder
        case replacePattern
        case partnerId
        case isDeleted
        case loyaltyProgram
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(mask, forKey: .mask)
        try container.encodeIfPresent(checkOrder, forKey: .checkOrder)
        try container.encodeIfPresent(replacePattern, forKey: .replacePattern)
        try container.encodeIfPresent(partnerId, forKey: .partnerId)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(loyaltyProgram, forKey: .loyaltyProgram)
    }
}

