//
// QuestionGroupViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель группы вопросов анкеты. */
public struct QuestionGroupViewModel: Codable, JSONEncodable, Hashable {

    /** Идентификатор. */
    public var id: Int?
    /** Уникальный Id в рамках коллекции. */
    public var collectionId: Int?
    /** Наименование. */
    public var name: String?
    /** Порядок. */
    public var order: Int?
    /** Удален. */
    public var isDeleted: Bool?
    /** Это вопрос. */
    public var isQuestion: Bool?
    /** Логическое имя. */
    public var logicalName: String?
    /** Список вопросов из группы. */
    public var questions: [QuestionViewModel]?
    /** Возможность добавления нескольких ответов (true — да, false — нет). */
    public var multipleValues: Bool?
    /** Максимальное количество ответов. */
    public var maxAnswersCount: Int?

    public init(id: Int? = nil, collectionId: Int? = nil, name: String? = nil, order: Int? = nil, isDeleted: Bool? = nil, isQuestion: Bool? = nil, logicalName: String? = nil, questions: [QuestionViewModel]? = nil, multipleValues: Bool? = nil, maxAnswersCount: Int? = nil) {
        self.id = id
        self.collectionId = collectionId
        self.name = name
        self.order = order
        self.isDeleted = isDeleted
        self.isQuestion = isQuestion
        self.logicalName = logicalName
        self.questions = questions
        self.multipleValues = multipleValues
        self.maxAnswersCount = maxAnswersCount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case collectionId
        case name
        case order
        case isDeleted
        case isQuestion
        case logicalName
        case questions
        case multipleValues
        case maxAnswersCount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(collectionId, forKey: .collectionId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(isQuestion, forKey: .isQuestion)
        try container.encodeIfPresent(logicalName, forKey: .logicalName)
        try container.encodeIfPresent(questions, forKey: .questions)
        try container.encodeIfPresent(multipleValues, forKey: .multipleValues)
        try container.encodeIfPresent(maxAnswersCount, forKey: .maxAnswersCount)
    }
}

