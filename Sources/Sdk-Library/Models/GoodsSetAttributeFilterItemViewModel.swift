//
// GoodsSetAttributeFilterItemViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель фильтра по атрибутам набора группы товаров. */
public struct GoodsSetAttributeFilterItemViewModel: Codable, JSONEncodable, Hashable {

    /** Идентификатор. */
    public var id: Int?
    /** Название. */
    public var name: String?
    /** Количество товаров в элементе. */
    public var goodsCount: Int?
    public var filterType: GoodsGroupFilterLineItemAttributeType?
    public var attribute: CatalogAttributeViewModel?
    /** Значения. */
    public var values: [GoodsAttributeValueViewModel]?
    /** Строка значений. */
    public var valuesString: String?

    public init(id: Int? = nil, name: String? = nil, goodsCount: Int? = nil, filterType: GoodsGroupFilterLineItemAttributeType? = nil, attribute: CatalogAttributeViewModel? = nil, values: [GoodsAttributeValueViewModel]? = nil, valuesString: String? = nil) {
        self.id = id
        self.name = name
        self.goodsCount = goodsCount
        self.filterType = filterType
        self.attribute = attribute
        self.values = values
        self.valuesString = valuesString
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case goodsCount
        case filterType
        case attribute
        case values
        case valuesString
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(goodsCount, forKey: .goodsCount)
        try container.encodeIfPresent(filterType, forKey: .filterType)
        try container.encodeIfPresent(attribute, forKey: .attribute)
        try container.encodeIfPresent(values, forKey: .values)
        try container.encodeIfPresent(valuesString, forKey: .valuesString)
    }
}

