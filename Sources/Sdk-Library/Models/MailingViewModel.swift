//
// MailingViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель для рассылки. */
public struct MailingViewModel: Codable, JSONEncodable, Hashable {

    /** Идентификатор рассылки. */
    public var id: Int?
    /** Название рассылки. */
    public var name: String?
    public var gateway: MailingGatewayViewModel?
    public var legal: LegalViewModel?
    /** Тип рассылки (моментальная или плановая). */
    public var mailingTypeId: Int?
    /** Список целевых аудиторий. */
    public var targetGroupIds: [Int]?
    public var destinationType: MailingDestinationType?
    /** Возможно ли начать рассылку. */
    public var isAbleToStart: Bool?
    /** Возможно ли редактировать рассылку. */
    public var isAbleToEdit: Bool?
    public var waySendType: MailingWaySendType?
    /** Автор рассылки. */
    public var creator: String?
    /** Дата создания рассылки. */
    public var creationDate: Date?
    /** Автор последних изменений. */
    public var lastChangeUser: String?
    /** Дата изменения. */
    public var changeDate: Date?
    public var messageType: PushMessageType?
    public var mailingMessage: MailingMessageViewModel?
    /** Стоимость одного сообщения. */
    public var priceOneMessage: Double?
    /** Количество пользователей. */
    public var usersCount: Int?
    public var marketingCampaign: MarketingCampaignSimpleViewModel?
    public var loyaltyProgram: LoyaltyProgramInfoViewModel?
    /** Возможна ли отправка на неверифицированный нотификатор или нет. */
    public var includeUnverifiedNotifiers: Bool?

    public init(id: Int? = nil, name: String? = nil, gateway: MailingGatewayViewModel? = nil, legal: LegalViewModel? = nil, mailingTypeId: Int? = nil, targetGroupIds: [Int]? = nil, destinationType: MailingDestinationType? = nil, isAbleToStart: Bool? = nil, isAbleToEdit: Bool? = nil, waySendType: MailingWaySendType? = nil, creator: String? = nil, creationDate: Date? = nil, lastChangeUser: String? = nil, changeDate: Date? = nil, messageType: PushMessageType? = nil, mailingMessage: MailingMessageViewModel? = nil, priceOneMessage: Double? = nil, usersCount: Int? = nil, marketingCampaign: MarketingCampaignSimpleViewModel? = nil, loyaltyProgram: LoyaltyProgramInfoViewModel? = nil, includeUnverifiedNotifiers: Bool? = nil) {
        self.id = id
        self.name = name
        self.gateway = gateway
        self.legal = legal
        self.mailingTypeId = mailingTypeId
        self.targetGroupIds = targetGroupIds
        self.destinationType = destinationType
        self.isAbleToStart = isAbleToStart
        self.isAbleToEdit = isAbleToEdit
        self.waySendType = waySendType
        self.creator = creator
        self.creationDate = creationDate
        self.lastChangeUser = lastChangeUser
        self.changeDate = changeDate
        self.messageType = messageType
        self.mailingMessage = mailingMessage
        self.priceOneMessage = priceOneMessage
        self.usersCount = usersCount
        self.marketingCampaign = marketingCampaign
        self.loyaltyProgram = loyaltyProgram
        self.includeUnverifiedNotifiers = includeUnverifiedNotifiers
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case gateway
        case legal
        case mailingTypeId
        case targetGroupIds
        case destinationType
        case isAbleToStart
        case isAbleToEdit
        case waySendType
        case creator
        case creationDate
        case lastChangeUser
        case changeDate
        case messageType
        case mailingMessage
        case priceOneMessage
        case usersCount
        case marketingCampaign
        case loyaltyProgram
        case includeUnverifiedNotifiers
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(gateway, forKey: .gateway)
        try container.encodeIfPresent(legal, forKey: .legal)
        try container.encodeIfPresent(mailingTypeId, forKey: .mailingTypeId)
        try container.encodeIfPresent(targetGroupIds, forKey: .targetGroupIds)
        try container.encodeIfPresent(destinationType, forKey: .destinationType)
        try container.encodeIfPresent(isAbleToStart, forKey: .isAbleToStart)
        try container.encodeIfPresent(isAbleToEdit, forKey: .isAbleToEdit)
        try container.encodeIfPresent(waySendType, forKey: .waySendType)
        try container.encodeIfPresent(creator, forKey: .creator)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(lastChangeUser, forKey: .lastChangeUser)
        try container.encodeIfPresent(changeDate, forKey: .changeDate)
        try container.encodeIfPresent(messageType, forKey: .messageType)
        try container.encodeIfPresent(mailingMessage, forKey: .mailingMessage)
        try container.encodeIfPresent(priceOneMessage, forKey: .priceOneMessage)
        try container.encodeIfPresent(usersCount, forKey: .usersCount)
        try container.encodeIfPresent(marketingCampaign, forKey: .marketingCampaign)
        try container.encodeIfPresent(loyaltyProgram, forKey: .loyaltyProgram)
        try container.encodeIfPresent(includeUnverifiedNotifiers, forKey: .includeUnverifiedNotifiers)
    }
}

