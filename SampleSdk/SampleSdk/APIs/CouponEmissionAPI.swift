//
// CouponEmissionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CouponEmissionAPI {

    /**
     Получает выпуск купона по идентификатору.
     
     - parameter id: (path) Идентификатор выпуска. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func couponEmissionGetCouponEmissions(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfCouponEmissionViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return couponEmissionGetCouponEmissionsWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает выпуск купона по идентификатору.
     - GET /v1.2/CouponsEmissions/{id}
     - parameter id: (path) Идентификатор выпуска. 
     - returns: RequestBuilder<ResultModelOfCouponEmissionViewModel> 
     */
    open class func couponEmissionGetCouponEmissionsWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfCouponEmissionViewModel> {
        var localVariablePath = "/v1.2/CouponsEmissions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfCouponEmissionViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает список существующих выпусков купонов.
     
     - parameter offset: (query) Начало выборки. (optional)
     - parameter limit: (query) Количество. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func couponEmissionGetCouponsEmissions(offset: Int? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfCouponEmissionViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return couponEmissionGetCouponsEmissionsWithRequestBuilder(offset: offset, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает список существующих выпусков купонов.
     - GET /v1.2/CouponsEmissions
     - parameter offset: (query) Начало выборки. (optional)
     - parameter limit: (query) Количество. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfCouponEmissionViewModel> 
     */
    open class func couponEmissionGetCouponsEmissionsWithRequestBuilder(offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfCouponEmissionViewModel> {
        let localVariablePath = "/v1.2/CouponsEmissions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfCouponEmissionViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
