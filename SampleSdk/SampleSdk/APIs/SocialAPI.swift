//
// SocialAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SocialAPI {

    /**
     Получает список доступных OAuth клиентов.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func socialGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfOAuthSettingsViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return socialGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает список доступных OAuth клиентов.
     - GET /v1.2/Social/Clients
     - returns: RequestBuilder<ResultModelOfListOfOAuthSettingsViewModel> 
     */
    open class func socialGetWithRequestBuilder() -> RequestBuilder<ResultModelOfListOfOAuthSettingsViewModel> {
        let localVariablePath = "/v1.2/Social/Clients"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfOAuthSettingsViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает OAuth клиента для указанного провайдера.
     
     - parameter provider: (path) Провайдер. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func socialGetSocialClientsByProvider(provider: OAuthProviderType, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfOAuthSettingsViewModel?, _ error: Error?) -> Void)) -> RequestTask {
        return socialGetSocialClientsByProviderWithRequestBuilder(provider: provider).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает OAuth клиента для указанного провайдера.
     - GET /v1.2/Social/Clients/{provider}
     - parameter provider: (path) Провайдер. 
     - returns: RequestBuilder<ResultModelOfOAuthSettingsViewModel> 
     */
    open class func socialGetSocialClientsByProviderWithRequestBuilder(provider: OAuthProviderType) -> RequestBuilder<ResultModelOfOAuthSettingsViewModel> {
        var localVariablePath = "/v1.2/Social/Clients/{provider}"
        let providerPreEscape = "\(APIHelper.mapValueToPathItem(provider))"
        let providerPostEscape = providerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{provider}", with: providerPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfOAuthSettingsViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
