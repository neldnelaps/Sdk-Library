//
// UserSocialAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UserSocialAPI {

    /**
     OAuth логин.
     
     - parameter provider: (path) OAuth provider. 
     - parameter code: (query) Код авторизации переданный OAuth провайдером. 
     - parameter redirectUri: (query) OAuth 2.0 redirect_uri для которого был получен авторизационный код. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userSocialLoginSocialV12(provider: OAuthProviderType, code: String, redirectUri: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfAuthResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userSocialLoginSocialV12WithRequestBuilder(provider: provider, code: code, redirectUri: redirectUri).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     OAuth логин.
     - GET /v1.2/User/{provider}/Login
     - parameter provider: (path) OAuth provider. 
     - parameter code: (query) Код авторизации переданный OAuth провайдером. 
     - parameter redirectUri: (query) OAuth 2.0 redirect_uri для которого был получен авторизационный код. (optional)
     - returns: RequestBuilder<ResultModelOfAuthResultModel> 
     */
    open class func userSocialLoginSocialV12WithRequestBuilder(provider: OAuthProviderType, code: String, redirectUri: String? = nil) -> RequestBuilder<ResultModelOfAuthResultModel> {
        var localVariablePath = "/v1.2/User/{provider}/Login"
        let providerPreEscape = "\(APIHelper.mapValueToPathItem(provider))"
        let providerPostEscape = providerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{provider}", with: providerPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "code": code.encodeToJSON(),
            "redirect_uri": redirectUri?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfAuthResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Отвязка социального аккаунта.
     
     - parameter provider: (path) OAuth provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userSocialRemoveSocial(provider: OAuthProviderType, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userSocialRemoveSocialWithRequestBuilder(provider: provider).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Отвязка социального аккаунта.
     - POST /v1.2/User/{provider}/Remove
     - parameter provider: (path) OAuth provider. 
     - returns: RequestBuilder<ResultModel> 
     */
    open class func userSocialRemoveSocialWithRequestBuilder(provider: OAuthProviderType) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/User/{provider}/Remove"
        let providerPreEscape = "\(APIHelper.mapValueToPathItem(provider))"
        let providerPostEscape = providerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{provider}", with: providerPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Привязка аккаунта к социальному сервису.
     
     - parameter provider: (path) OAuth provider. 
     - parameter code: (query) Код авторизации переданный OAuth провайдером. 
     - parameter redirectUri: (query) OAuth 2.0 redirect_uri для которого был получен авторизационный код. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userSocialSetSocial(provider: OAuthProviderType, code: String, redirectUri: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModel?, _ error: Error?) -> Void)) -> RequestTask {
        return userSocialSetSocialWithRequestBuilder(provider: provider, code: code, redirectUri: redirectUri).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Привязка аккаунта к социальному сервису.
     - GET /v1.2/User/{provider}/Set
     - parameter provider: (path) OAuth provider. 
     - parameter code: (query) Код авторизации переданный OAuth провайдером. 
     - parameter redirectUri: (query) OAuth 2.0 redirect_uri для которого был получен авторизационный код. (optional)
     - returns: RequestBuilder<ResultModel> 
     */
    open class func userSocialSetSocialWithRequestBuilder(provider: OAuthProviderType, code: String, redirectUri: String? = nil) -> RequestBuilder<ResultModel> {
        var localVariablePath = "/v1.2/User/{provider}/Set"
        let providerPreEscape = "\(APIHelper.mapValueToPathItem(provider))"
        let providerPostEscape = providerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{provider}", with: providerPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "code": code.encodeToJSON(),
            "redirect_uri": redirectUri?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получить информацию об участии пользователя в группах социальных сетей.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userSocialSocialGroups(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfListOfOAuthUserGroupMember?, _ error: Error?) -> Void)) -> RequestTask {
        return userSocialSocialGroupsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить информацию об участии пользователя в группах социальных сетей.
     - GET /v1.2/User/Social/Groups
     - returns: RequestBuilder<ResultModelOfListOfOAuthUserGroupMember> 
     */
    open class func userSocialSocialGroupsWithRequestBuilder() -> RequestBuilder<ResultModelOfListOfOAuthUserGroupMember> {
        let localVariablePath = "/v1.2/User/Social/Groups"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfListOfOAuthUserGroupMember>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
