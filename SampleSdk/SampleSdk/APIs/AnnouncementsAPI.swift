//
// AnnouncementsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AnnouncementsAPI {

    /**
     Получить рекламу.
     
     - parameter id: (path) Id рекламы. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func announcementsGetAnnouncement(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfAnnouncementModel?, _ error: Error?) -> Void)) -> RequestTask {
        return announcementsGetAnnouncementWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить рекламу.
     - GET /v1.2/Announcements/{id}
     - parameter id: (path) Id рекламы. 
     - returns: RequestBuilder<ResultModelOfAnnouncementModel> 
     */
    open class func announcementsGetAnnouncementWithRequestBuilder(id: Int) -> RequestBuilder<ResultModelOfAnnouncementModel> {
        var localVariablePath = "/v1.2/Announcements/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfAnnouncementModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Получает информацию о рекламе.
     
     - parameter filterSpaceLogicalName: (query) Идентификатор рекламного места. (optional)
     - parameter filterFrom: (query) Со скольки. (optional)
     - parameter filterCount: (query) Сколько. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func announcementsGetAnnouncements(filterSpaceLogicalName: String? = nil, filterFrom: Int? = nil, filterCount: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResultModelOfPagedViewModelOfAnnouncementModel?, _ error: Error?) -> Void)) -> RequestTask {
        return announcementsGetAnnouncementsWithRequestBuilder(filterSpaceLogicalName: filterSpaceLogicalName, filterFrom: filterFrom, filterCount: filterCount).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получает информацию о рекламе.
     - GET /v1.2/Announcements
     - parameter filterSpaceLogicalName: (query) Идентификатор рекламного места. (optional)
     - parameter filterFrom: (query) Со скольки. (optional)
     - parameter filterCount: (query) Сколько. (optional)
     - returns: RequestBuilder<ResultModelOfPagedViewModelOfAnnouncementModel> 
     */
    open class func announcementsGetAnnouncementsWithRequestBuilder(filterSpaceLogicalName: String? = nil, filterFrom: Int? = nil, filterCount: Int? = nil) -> RequestBuilder<ResultModelOfPagedViewModelOfAnnouncementModel> {
        let localVariablePath = "/v1.2/Announcements"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.spaceLogicalName": filterSpaceLogicalName?.encodeToJSON(),
            "filter.from": filterFrom?.encodeToJSON(),
            "filter.count": filterCount?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ResultModelOfPagedViewModelOfAnnouncementModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
