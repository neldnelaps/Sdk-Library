//
// LocationDataModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ViewModel описания места. */
public struct LocationDataModel: Codable, JSONEncodable, Hashable {

    /** ID. */
    public var id: Int?
    /** Идентификатор места. */
    public var locationId: UUID?
    /** Описание. */
    public var description: String?
    /** Широта. */
    public var latitude: Double?
    /** Долгота. */
    public var longitude: Double?
    public var region: RegionDataModel?
    public var city: CityDataModel?
    /** Улица. */
    public var street: String?
    /** Дом. */
    public var house: String?
    /** Здание. */
    public var building: String?
    /** Офис. */
    public var office: String?

    public init(id: Int? = nil, locationId: UUID? = nil, description: String? = nil, latitude: Double? = nil, longitude: Double? = nil, region: RegionDataModel? = nil, city: CityDataModel? = nil, street: String? = nil, house: String? = nil, building: String? = nil, office: String? = nil) {
        self.id = id
        self.locationId = locationId
        self.description = description
        self.latitude = latitude
        self.longitude = longitude
        self.region = region
        self.city = city
        self.street = street
        self.house = house
        self.building = building
        self.office = office
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case locationId
        case description
        case latitude
        case longitude
        case region
        case city
        case street
        case house
        case building
        case office
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(locationId, forKey: .locationId)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(latitude, forKey: .latitude)
        try container.encodeIfPresent(longitude, forKey: .longitude)
        try container.encodeIfPresent(region, forKey: .region)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(street, forKey: .street)
        try container.encodeIfPresent(house, forKey: .house)
        try container.encodeIfPresent(building, forKey: .building)
        try container.encodeIfPresent(office, forKey: .office)
    }
}

