//
// DetailedBalanceItemViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Элемент детализированного баланса. */
public struct DetailedBalanceItemViewModel: Codable, JSONEncodable, Hashable {

    public var currency: CurrencyInfoModel?
    /** Сумма доступных бонусов. */
    public var amount: Double?
    /** Сумма не активированных бонусов. */
    public var notActivatedAmount: Double?
    /** Счет заблокирован. */
    public var accountIsBlocked: Bool?
    /** Время активаций/сгораний. */
    public var lifeTimesByTime: [DetailedBalanceLifeTimeByTimeViewModel]?
    /** Время активаций/сгораний. */
    public var lifeTimesByPeriod: [DetailedBalanceLifeTimeByPeriodViewModel]?

    public init(currency: CurrencyInfoModel? = nil, amount: Double? = nil, notActivatedAmount: Double? = nil, accountIsBlocked: Bool? = nil, lifeTimesByTime: [DetailedBalanceLifeTimeByTimeViewModel]? = nil, lifeTimesByPeriod: [DetailedBalanceLifeTimeByPeriodViewModel]? = nil) {
        self.currency = currency
        self.amount = amount
        self.notActivatedAmount = notActivatedAmount
        self.accountIsBlocked = accountIsBlocked
        self.lifeTimesByTime = lifeTimesByTime
        self.lifeTimesByPeriod = lifeTimesByPeriod
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case currency
        case amount
        case notActivatedAmount
        case accountIsBlocked
        case lifeTimesByTime
        case lifeTimesByPeriod
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(notActivatedAmount, forKey: .notActivatedAmount)
        try container.encodeIfPresent(accountIsBlocked, forKey: .accountIsBlocked)
        try container.encodeIfPresent(lifeTimesByTime, forKey: .lifeTimesByTime)
        try container.encodeIfPresent(lifeTimesByPeriod, forKey: .lifeTimesByPeriod)
    }
}

