//
// CouponViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ViewModel для купона. */
public struct CouponViewModel: Codable, JSONEncodable, Hashable {

    /** Идентификатор купона. */
    public var id: Int?
    /** Код. */
    public var code: String?
    /** Qr код. */
    public var qrContent: String?
    /** Дата создания. */
    public var createDate: Date?
    /** Дата обновления. */
    public var updateDate: Date?
    public var couponState: CouponState?
    /** Название эмиссии. */
    public var emissionTitle: String?
    /** Id выпуска купонов. */
    public var emissionId: Int?

    public init(id: Int? = nil, code: String? = nil, qrContent: String? = nil, createDate: Date? = nil, updateDate: Date? = nil, couponState: CouponState? = nil, emissionTitle: String? = nil, emissionId: Int? = nil) {
        self.id = id
        self.code = code
        self.qrContent = qrContent
        self.createDate = createDate
        self.updateDate = updateDate
        self.couponState = couponState
        self.emissionTitle = emissionTitle
        self.emissionId = emissionId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case code
        case qrContent
        case createDate
        case updateDate
        case couponState
        case emissionTitle
        case emissionId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(qrContent, forKey: .qrContent)
        try container.encodeIfPresent(createDate, forKey: .createDate)
        try container.encodeIfPresent(updateDate, forKey: .updateDate)
        try container.encodeIfPresent(couponState, forKey: .couponState)
        try container.encodeIfPresent(emissionTitle, forKey: .emissionTitle)
        try container.encodeIfPresent(emissionId, forKey: .emissionId)
    }
}

