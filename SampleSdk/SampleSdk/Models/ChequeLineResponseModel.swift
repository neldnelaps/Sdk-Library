//
// ChequeLineResponseModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Информация о позиции в чеке в с результатами расчёта. */
public struct ChequeLineResponseModel: Codable, JSONEncodable, Hashable {

    /** Уникальный номер позиции в чеке. */
    public var position: Int?
    /** Сумма по позиции о применения скидки по (после применения собственных скидок партнера). */
    public var amount: Double?
    /** Идентификатор товара по каталогу партнера. */
    public var goodsId: String?
    /** Штрих-код товара. */
    public var barcode: String?
    /** Количество товара/вес. */
    public var quantity: Double?
    /** Сумма кэшбэка на позицию. */
    public var cashback: Double?
    /** Размер прямой скидки, предоставляемой по карте. */
    public var discount: Double?
    /** Список сработавших акций. */
    public var appliedOffers: [OfferInfoModel]?
    /** Сумма платежа. */
    public var payAmount: Double?
    /** Кооментарий. */
    public var message: String?

    public init(position: Int? = nil, amount: Double? = nil, goodsId: String? = nil, barcode: String? = nil, quantity: Double? = nil, cashback: Double? = nil, discount: Double? = nil, appliedOffers: [OfferInfoModel]? = nil, payAmount: Double? = nil, message: String? = nil) {
        self.position = position
        self.amount = amount
        self.goodsId = goodsId
        self.barcode = barcode
        self.quantity = quantity
        self.cashback = cashback
        self.discount = discount
        self.appliedOffers = appliedOffers
        self.payAmount = payAmount
        self.message = message
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case position
        case amount
        case goodsId
        case barcode
        case quantity
        case cashback
        case discount
        case appliedOffers
        case payAmount
        case message
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(position, forKey: .position)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(goodsId, forKey: .goodsId)
        try container.encodeIfPresent(barcode, forKey: .barcode)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(cashback, forKey: .cashback)
        try container.encodeIfPresent(discount, forKey: .discount)
        try container.encodeIfPresent(appliedOffers, forKey: .appliedOffers)
        try container.encodeIfPresent(payAmount, forKey: .payAmount)
        try container.encodeIfPresent(message, forKey: .message)
    }
}

