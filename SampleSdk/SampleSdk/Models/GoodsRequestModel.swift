//
// GoodsRequestModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Запрос расчета преференций для каталога. */
public struct GoodsRequestModel: Codable, JSONEncodable, Hashable {

    /** Код программы лояльности. */
    public var loyaltyProgramUid: String?
    /** Code merchant. */
    public var merchantUid: UUID?
    /** Uid каталога. */
    public var catalogUid: UUID?
    /** Дата. */
    public var date: Date?
    /** Считаем скидку. */
    public var isCalculateDiscount: Bool?
    /** Считаем бонусы. */
    public var isCalculateCashback: Bool?
    /** Информация о товарах. */
    public var goods: [GoodsItemRequestModel]?
    /** Карты для обсчёта. */
    public var cards: [CardRequestModel]?
    /** Статусные системы для обсчёта. */
    public var statusSystems: [StatusSystemRequestModel]?
    /** Брать ли значение из атрибута. */
    public var goodsAmountAttributeId: Int?
    /** Код валюты. */
    public var currencyUid: String?

    public init(loyaltyProgramUid: String? = nil, merchantUid: UUID? = nil, catalogUid: UUID? = nil, date: Date? = nil, isCalculateDiscount: Bool? = nil, isCalculateCashback: Bool? = nil, goods: [GoodsItemRequestModel]? = nil, cards: [CardRequestModel]? = nil, statusSystems: [StatusSystemRequestModel]? = nil, goodsAmountAttributeId: Int? = nil, currencyUid: String? = nil) {
        self.loyaltyProgramUid = loyaltyProgramUid
        self.merchantUid = merchantUid
        self.catalogUid = catalogUid
        self.date = date
        self.isCalculateDiscount = isCalculateDiscount
        self.isCalculateCashback = isCalculateCashback
        self.goods = goods
        self.cards = cards
        self.statusSystems = statusSystems
        self.goodsAmountAttributeId = goodsAmountAttributeId
        self.currencyUid = currencyUid
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case loyaltyProgramUid
        case merchantUid
        case catalogUid
        case date
        case isCalculateDiscount
        case isCalculateCashback
        case goods
        case cards
        case statusSystems
        case goodsAmountAttributeId
        case currencyUid
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(loyaltyProgramUid, forKey: .loyaltyProgramUid)
        try container.encodeIfPresent(merchantUid, forKey: .merchantUid)
        try container.encodeIfPresent(catalogUid, forKey: .catalogUid)
        try container.encodeIfPresent(date, forKey: .date)
        try container.encodeIfPresent(isCalculateDiscount, forKey: .isCalculateDiscount)
        try container.encodeIfPresent(isCalculateCashback, forKey: .isCalculateCashback)
        try container.encodeIfPresent(goods, forKey: .goods)
        try container.encodeIfPresent(cards, forKey: .cards)
        try container.encodeIfPresent(statusSystems, forKey: .statusSystems)
        try container.encodeIfPresent(goodsAmountAttributeId, forKey: .goodsAmountAttributeId)
        try container.encodeIfPresent(currencyUid, forKey: .currencyUid)
    }
}

