//
// NameCaseModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель представления для вариантов написания. */
public struct NameCaseModel: Codable, JSONEncodable, Hashable {

    /** В единственном числе и именительном падеже. */
    public var nominative: String?
    /** В единственном числе и родительном падеже. */
    public var genitive: String?
    /** Во множественном числе и именительном падеже. */
    public var plural: String?
    /** Сокращенный вариант. */
    public var abbreviation: String?

    public init(nominative: String? = nil, genitive: String? = nil, plural: String? = nil, abbreviation: String? = nil) {
        self.nominative = nominative
        self.genitive = genitive
        self.plural = plural
        self.abbreviation = abbreviation
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case nominative
        case genitive
        case plural
        case abbreviation
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(nominative, forKey: .nominative)
        try container.encodeIfPresent(genitive, forKey: .genitive)
        try container.encodeIfPresent(plural, forKey: .plural)
        try container.encodeIfPresent(abbreviation, forKey: .abbreviation)
    }
}

